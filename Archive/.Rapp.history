Community Phylogenetic Analyses with package picante ####
#
# load package#
# update.packages("picante", dependencies = TRUE, repos = "http://R.research.att.com/")#
library(picante)#
#
# Picante manual#
# vignette("picante-intro")#
#
# Set directory for input data#
DATAwd <- "~/Projects/Phylomeet/Analysis/arcot_data/"#
#
##############################################################
# Load in communities, take subsets and format for analysis ##
##############################################################
#
# load community data#
fullcom <- read.table(paste(DATAwd, "arcot.txt", sep=""))#
host <- rep(c(rep("fremont",10), rep("f1",10), rep("backcross",10), rep("narrowleaf",10)),4)#
genhost <- rep(c(rep("fr",10), rep("fo",10), rep("na",20)),4)#
year <- c(rep(2000,40),rep(2001,40),rep(2002,40),rep(2003,40))#
com <- cbind(year, genhost, fullcom)#
#
# pool data#
	# byHost: sum of occcurrences in all years by host#
	sumFr <- apply(com[com$genhost=="fr",3:ncol(com)],2,sum)#
	sumFo <- apply(com[com$genhost=="fo",3:ncol(com)],2,sum)#
	sumNa <- apply(com[com$genhost=="na",3:ncol(com)],2,sum)#
	byHost <- rbind(sumFr,sumFo,sumNa)#
	# byYear: sum of occcurrences by year on all hosts#
	sum2000 <- apply(com[com$year==2000,3:ncol(com)],2,sum)#
	sum2001 <- apply(com[com$year==2001,3:ncol(com)],2,sum)#
	sum2002 <- apply(com[com$year==2002,3:ncol(com)],2,sum)#
	sum2003 <- apply(com[com$year==2003,3:ncol(com)],2,sum)#
	byYear <- rbind(sum2000,sum2001,sum2002,sum2003)#
	# byHY: sum of occurrences by year and by host#
	host <- c("fr","fo","na")#
	year <- c("2000","2001","2002","2003")#
	byHYmaker <- function(com) #
		{ 	#
		fr2000 <- apply(com[com$year==2000 & com$genhost=="fr",3:ncol(com)],2,sum)#
		fo2000 <- apply(com[com$year==2000 & com$genhost=="fo",3:ncol(com)],2,sum)#
		na2000 <- apply(com[com$year==2000 & com$genhost=="na",3:ncol(com)],2,sum)#
		fr2001 <- apply(com[com$year==2001 & com$genhost=="fr",3:ncol(com)],2,sum)#
		fo2001 <- apply(com[com$year==2001 & com$genhost=="fo",3:ncol(com)],2,sum)#
		na2001 <- apply(com[com$year==2001 & com$genhost=="na",3:ncol(com)],2,sum)#
		fr2002 <- apply(com[com$year==2002 & com$genhost=="fr",3:ncol(com)],2,sum)#
		fo2002 <- apply(com[com$year==2002 & com$genhost=="fo",3:ncol(com)],2,sum)#
		na2002 <- apply(com[com$year==2002 & com$genhost=="na",3:ncol(com)],2,sum)#
		fr2003 <- apply(com[com$year==2003 & com$genhost=="fr",3:ncol(com)],2,sum)#
		fo2003 <- apply(com[com$year==2003 & com$genhost=="fo",3:ncol(com)],2,sum)#
		na2003 <- apply(com[com$year==2003 & com$genhost=="na",3:ncol(com)],2,sum)#
		byHY <- rbind(fr2000,fo2000,na2000,fr2001,fo2001,na2001,fr2002,fo2002,na2002,fr2003,fo2003,na2003)#
		byHY#
		}#
	byHY <- byHYmaker(com=com)#
#
	# sumAll: sum of all occurrences in all years on all hosts#
	sumAll <- apply(com[,4:ncol(com)],2,sum)#
	# HY: pooled by Host and Year#
	HY <- byHYmaker(com=fullcom)#
#
# subset data based on commonness#
fullsumAll <- rbind(fullcom,sumAll)#
#
	# sp2: exclude species that have only one occurrence#
	sp2 <- fullsumAll[1:160,sumAll >= 2] #
#
	# sp2HY: com2sp, pooled by host and year#
	sp2HY <- byHYmaker(com=cbind(year, genhost, sp2))#
#
	# sp3: exclude species that have only one occurrence#
	sp3 <- fullsumAll[1:160,sumAll >= 3] #
#
	# sp3HY: com3sp, pooled by host and year#
	sp3HY <- byHYmaker(com=cbind(year, genhost, sp3))#
#
	# yr2: all except species that are only present in one year#
	y <- byYear#
	for(i in 1:ncol(y)) #
		{ #
		for(j in 1:nrow(y)) #
			{ #
			if (byYear[j,i] > 0) {y[j,i] <- 1} #
			}	#
		}#
	nyear <- apply(y,2,sum)#
	fullnyear <- rbind(fullcom,nyear)#
	yr2 <- fullnyear[1:160,nyear >= 2]#
#
	# yr2HY: y2, pooled by host and year#
	yr2HY <- byHYmaker(com=cbind(year, genhost, yr2))#
	# yr2sp2: intersection of sp2 and yr2#
	sp2year <- rbind(sp2,nyear)#
	yr2sp2 <- sp2year[1:160,sp2year[161,] >= 2]#
#
	# yr2sp2HY: yr2sp2, pooled by host and year#
	yr2sp2HY <- byHYmaker(com=cbind(year, genhost, yr2sp2))#
#
	# yr2sp3: intersection of sp3 and yr2#
	sp3year <- rbind(sp3,nyear)#
	yr2sp3 <- sp3year[1:160,sp3year[161,] >= 2]#
#
	# yr2sp3HY: yr2sp3, pooled by host and year#
	yr2sp3HY <- byHYmaker(com=cbind(year, genhost, yr2sp3))#
# list of full community and subsets	#
	 # coms <- lapply(list(fullcom, HY, sp2, sp3, yr2, yr2sp2, yr2sp3, sp2HY, sp3HY, yr2HY, yr2sp2HY, yr2sp3HY), as.matrix)#
	 # names(coms) <- c("fullcom", "HY", "sp2", "sp3", "yr2", "yr2sp2", "yr2sp3", "sp2HY", "sp3HY", "yr2HY", "yr2sp2HY", "yr2sp3HY")#
# list of the full community and the smallest subset	#
	 # coms <- lapply(list(fullcom, HY, yr2sp3, yr2sp3HY), as.matrix)#
	 # names(coms) <- c("fullcom", "HY", "yr2sp3", "yr2sp3HY")#
#
# list of the smallest subset	#
	 coms <- lapply(list(yr2sp3, yr2sp3HY), as.matrix)#
	 names(coms) <- c("yr2sp3", "yr2sp3HY")#
##########################################################################
# Load in phylogenies, prune, and create distance matrices for analysis ##
##########################################################################
#
# Phylogeny with ultrametricized branch lengths#
	# read in phylogeny #
	ultra <- read.nexus(paste(DATAwd,"phylos/","ultra",".tre",sep=""))#
	ultras <- list(ultra)#
	names(ultras) <- "ultra"#
	lel <- length(ultra$edge.length)#
#
	# number of randomized branch lengths#
	nrand = 3#
#
	# create nrand more trees with randomly altered branch lengths#
	for(i in 1:nrand)#
	{#
		ultras[[i+1]] <- ultra#
		ultras[[i+1]]$edge.length <- ultra$edge.length + runif(lel, min=-0.99, max=0.99)#
		names(ultras)[[i+1]] <- paste0("urand", i)#
	}#
#
# Phylogeny with each edge length set equal #
	# read in phylogeny #
	equal <- ultra#
	equal$edge.length <- rep(1, length=lel)#
	equals <- list(equal)#
	names(equals) <- "equal"#
#
	# create nrand more trees with randomly altered branch lengths#
	for(i in 1:nrand)#
	{#
		equals[[i+1]] <- equal#
		equals[[i+1]]$edge.length <- runif(lel, min=0.01, max=2)#
		names(equals)[[i+1]] <- paste0("erand", i)#
	}#
# Combine all phylogenies into one list#
	phylos <- as.list(c(ultras, equals))#
	phyNames <- names(phylos)#
#
# Plot phylogenies#
	dev.new()#
	par(mfrow=c(4,2))#
	for(i in 1:length(phylos))#
	{#
		plot(phylos[[i]], cex=0.5, show.tip.label=F)#
	}#
#
# Prune phylogenies by community#
	phy <- vector("list",length=length(coms))#
	names(phy) <- names(coms)#
	for (c in 1:length(coms)) #
	{	#
		phy[[c]] <- vector("list", length=length(phyNames))#
		names(phy[[c]]) <- phyNames#
		for (p in 1:length(phylos)) #
		{ 	#
			phy[[c]][[p]] <- prune.sample(coms[[c]], phylos[[p]]) #
		}#
	}#
# Form distance matrix for each topology#
	phydist <- vector("list",length=length(coms))#
	names(phydist) <- names(coms)#
	for (c in 1:length(coms)) #
	{	phydist[[c]] <- vector("list", length=length(phyNames))#
		names(phydist[[c]]) <- phyNames#
		for (p in 1:length(phylos)) #
		{ 	phydist[[c]][[p]] <- cophenetic(phy[[c]][[p]]) 	}#
	}#
#
# Plotting phylogenies#
	# First five sets of phylogenies to get overview#
	par(mfrow=c(4,3))#
	for (c in 1:9) #
	{	#
		plot(phy[[c]][[1]], show.tip.label=F) #
	}#
#
	# large versions of full phylogenies#
	par(mfrow=c(1,2))#
	plot(phy$fullcom$ultra, cex=0.5)#
	plot(phy$fullcom$equal, cex=0.5)
length(phy)
phy
Read in comdist results#
	for (c in 1:length(coms)) #
		{			#
		for (p in 1:length(phylos)) #
			{ 	#
			assign( #
			paste0("ComDist_", names(coms)[c], "_", phyNames[p]), 				#
			read.csv( paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv" ))#
			)#
			}#
		}
set folder for output#
ComDistwd <- "~/Projects/Phylomeet/Analysis/Results_ComDist/"#
#
# make a list to contain comdist results#
ComDist <- vector("list",length=length(coms))#
names(ComDist) <- names(coms)
Read in comdist results#
	for (c in 1:length(coms)) #
		{			#
		for (p in 1:length(phylos)) #
			{ 	#
			assign( #
			paste0("ComDist_", names(coms)[c], "_", phyNames[p]), 				#
			read.csv( paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv" ))#
			)#
			}#
		}
library(MASS)#
	fit <- isoMDS(ComDist$yr2sp3HY$ultra, k=2)#
	x <- fit$points[,1]#
	y <- fit$points[,2]#
	type <- rep(c("Fre","F1","Nar"),4)#
	cols <- rep(c(2,1,3),4)#
	library(car)#
	scatterplot(x,y, groups=type, by.group=T, reg=F, ellipse=F, smooth=F, level=0.80, xlab="Axis 1", ylab="Axis 2", main="Nonmetric MDS of Phylogenetic Community Distance of \nArthopod Communities on Fremont, F1, and Narrowleaf", legend.plot=FALSE, pch=c(3,3,3), cex=0)#
	text(x, y, labels = rownames(byHY), cex=1, col=cols)#
	legend("topleft",legend=c("Fre","Hyb","Nar"),col=c(2,1,3), pch=19)
c=1
p=1
paste0("ComDist_", names(coms)[c], "_", phyNames[p])
ComDist_yr2sp3_ultra
class(ComDist_yr2sp3_ultra)
cd <- ComDist_yr2sp3_ultra
cddist <- dist(cd)
cddist <- as.dist(cd)
dim(cd)
cd[,1]
?read.csv
for (c in 1:length(coms)) #
		{			#
		for (p in 1:length(phylos)) #
			{ 	#
			assign( #
			paste0("ComDist_", names(coms)[c], "_", phyNames[p]), 				#
			read.csv( paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv" ), rownames=1 )#
			)#
			}#
		}
for (c in 1:length(coms)) #
		{			#
		for (p in 1:length(phylos)) #
			{ 	#
			assign( #
			paste0("ComDist_", names(coms)[c], "_", phyNames[p]), 				#
			read.csv( paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv" ), row.names=1 )#
			)#
			}#
		}
cd <- ComDist_yr2sp3_ultra
cd[,1]
dim(cd)
cddist <- dist(cd)
class(cddist)
head(cddist)
cddist
for (c in 1:length(coms)) #
		{			#
		for (p in 1:length(phylos)) #
			{ 	#
			dist( assign( paste0( "ComDist_", names(coms)[c], "_", phyNames[p] ), read.csv( paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv" ), row.names=1 ) ) )#
			}#
		}
ComDist_yr2sp3_ultra
class(ComDist_yr2sp3_ultra)
for (c in 1:length(coms)) #
		{			#
		for (p in 1:length(phylos)) #
			{ 	#
			assign( paste0( "ComDist_", names(coms)[c], "_", phyNames[p] ), dist( read.csv( paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv" ), row.names=1 ) ) )#
			}#
		}
class(ComDist_yr2sp3_ultra)
ComDist_yr2sp3_ultra
ComDist$yr2sp3HY$ultra
ComDistwd <- "~/Projects/Phylomeet/Analysis/Results_ComDist/"#
#
# make a list to contain comdist results#
ComDist <- vector("list",length=length(coms))#
names(ComDist) <- names(coms)
ComDist
ComDistwd <- "~/Projects/Phylomeet/Analysis/Results_ComDist/"#
#
# make a list to contain comdist results#
ComDist <- vector("list",length=length(coms))#
names(ComDist) <- names(coms)#
#
# find comdist for all communities and branch lengths#
	# loop through community subsets#
	for (c in 1:length(coms)) #
		{	#
		# list to contain results for phylogeny#
		ComDist[[c]] <- vector("list",length=length(phyNames)) #
		names(ComDist[[c]]) <- phyNames#
		# loop through phylogenies within each community subset#
		# for (p in 1:length(phylos)) #
			# { 	#
			# ComDist[[c]][[p]] <- comdist(coms[[c]], phydist[[c]][[p]], abundance.weighted=T)#
			# write.csv( as.matrix( ComDist[[c]][[p]]), paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv"))#
			# }#
#
		# alternatively, import pre-run results#
		for (p in 1:length(phylos)) #
			{ 	#
			ComDist[[c]][[p]] <- dist( read.csv( paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv" ), row.names=1 ) ) #
			}#
		}
ComDist
str(ComDist)
summary(ComDist)
summary(ComDist$yr2sp3)
summary(ComDist$yr2sp3$ultra)
summary(ComDist$yr2sp3$urand1)
summary(ComDist$yr2sp3$urand2)
summary(ComDist$yr2sp3$urand3)
fit <- isoMDS(ComDist$yr2sp3HY$ultra, k=2)
library(MASS)#
	fit <- isoMDS(ComDist$yr2sp3HY$ultra, k=2)#
	x <- fit$points[,1]#
	y <- fit$points[,2]#
	type <- rep(c("Fre","F1","Nar"),4)#
	cols <- rep(c(2,1,3),4)#
	library(car)#
	scatterplot(x,y, groups=type, by.group=T, reg=F, ellipse=F, smooth=F, level=0.80, xlab="Axis 1", ylab="Axis 2", main="Nonmetric MDS of Phylogenetic Community Distance of \nArthopod Communities on Fremont, F1, and Narrowleaf", legend.plot=FALSE, pch=c(3,3,3), cex=0)#
	text(x, y, labels = rownames(byHY), cex=1, col=cols)#
	legend("topleft",legend=c("Fre","Hyb","Nar"),col=c(2,1,3), pch=19)
scatterplot(x,y, groups=type, by.group=T, reg=F, ellipse=F, smooth=F, level=0.80, xlab="Axis 1", ylab="Axis 2", main="Nonmetric MDS of Phylogenetic Community Distance of \nArthopod Communities on Fremont, F1, and Narrowleaf", legend.plot=FALSE, pch=c(3,3,3), cex=0)
scatterplot(x,y, groups=type, by.group=T, reg=F, ellipse=F, smooth=F, level=0.80, xlab="Axis 1", ylab="Axis 2", main="Nonmetric MDS of Phylogenetic Community Distance of \nArthopod Communities on Fremont, F1, and Narrowleaf", legend.plot=FALSE, pch=c(3,3,3), cex=1)
plot(1:20,pch=1:20)
scatterplot(x,y, groups=type, by.group=T, reg=F, ellipse=F, smooth=F, level=0.80, xlab="Axis 1", ylab="Axis 2", main="Nonmetric MDS of Phylogenetic Community Distance of \nArthopod Communities on Fremont, F1, and Narrowleaf", legend.plot=FALSE, pch=16, cex=1)#
	text(x, y, labels = rownames(byHY), cex=1, col=cols)#
	legend("topleft",legend=c("Fre","Hyb","Nar"),col=c(2,1,3), pch=19)
scatterplot(x,y, groups=type, by.group=T, reg=F, ellipse=F, smooth=F, level=0.80, xlab="Axis 1", ylab="Axis 2", main="Nonmetric MDS of Phylogenetic Community Distance of \nArthopod Communities on Fremont, F1, and Narrowleaf", legend.plot=FALSE, pch=16, cex=1)
scatterplot(x,y, groups=type, by.group=T, reg=F, ellipse=F, smooth=F, level=0.80, xlab="Axis 1", ylab="Axis 2", main="Nonmetric MDS of Phylogenetic Community Distance of \nArthopod Communities on Fremont, F1, and Narrowleaf", legend.plot=FALSE, pch=16, cex=1)#
	text(x, y, labels = rownames(byHY), cex=1, col=cols)#
	legend("topleft",legend=c("Fre","Hyb","Nar"),col=c(2,1,3), pch=19)
summary(ComDist)
summary(ComDist[[1]])
isoMDS(ComDist[[1]]$ultra, k=2)
for( i in 1:length(ComDist[[1]]))#
		{#
			fit <- isoMDS(ComDist[[1]][[i]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			scatterplot(x,y, groups=type, by.group=T, reg=F, ellipse=F, smooth=F, level=0.80, xlab="Axis 1", ylab="Axis 2", main="Nonmetric MDS of Phylogenetic Community Distance of \nArthopod Communities on Fremont, F1, and Narrowleaf", legend.plot=FALSE, pch=16, cex=0)#
			text(x, y, labels = rownames(byHY), cex=1, col=cols)#
			legend("topleft",legend=c("Fre","Hyb","Nar"),col=c(2,1,3), pch=19)#
		}
for( i in 1:length(ComDist[[1]]))#
		{#
			fit <- isoMDS(ComDist[[1]][[i]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols)#
		}
par(mfrow=c(2,length(ComDist[[1]])))#
	for( i in 1:length(ComDist[[1]]))#
		{#
			fit <- isoMDS(ComDist[[1]][[i]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols)#
		}
par(mfrow=c(2,4)#
	for( i in 1:length(ComDist[[1]]))#
		{#
			fit <- isoMDS(ComDist[[1]][[i]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols)#
		}
par(mfrow=c(2,4))#
	for( i in 1:length(ComDist[[1]]))#
	{#
		fit <- isoMDS(ComDist[[1]][[i]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols)#
	}
par(mfrow=c(2,4))#
	for( i in 1:length(ComDist[[1]]))#
	{#
		fit <- isoMDS(ComDist[[1]][[i]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, main = "Individual Hosts")#
	}
names(ComDist)
par(mfrow=c(2,4))#
	for( i in 1:length(ComDist[[1]]))#
	{#
		fit <- isoMDS(ComDist[[1]][[i]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, main = paste0( "Individual Hosts", names( ComDist[[1]][[i]] ) )#
	}
par(mfrow=c(2,4))#
	for( i in 1:length(ComDist[[1]]))#
	{#
		fit <- isoMDS(ComDist[[1]][[i]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, main = paste0( "Individual Hosts", names( ComDist[[1]][[i]] ) ) )#
	}
names( ComDist[[1]][[i]] )
names(ComDist[[1]])
names(ComDist[[1]][1])
par(mfrow=c(2,4))#
	for( i in 1:length(ComDist[[1]]))#
	{#
		fit <- isoMDS(ComDist[[1]][[i]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, main = paste0( "Individual Hosts", names( ComDist[[1]][i] ) ) )#
	}
par(mfrow=c(2,4))#
	for( i in 1:length(ComDist[[1]]))#
	{#
		fit <- isoMDS(ComDist[[1]][[i]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, main = paste0( "Individual Hosts ", names( ComDist[[1]][i] ) ) )#
	}
par(mfrow=c(2,4))#
	for( i in 1:length(ComDist[[2]]))#
	{#
		fit <- isoMDS(ComDist[[2]][[i]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, main = paste0( "Pooled Hosts ", names( ComDist[[2]][i] ) ) )#
	}
for( c in 1:length(ComDist) )#
{#
	dev.new()#
	par(mfrow=c(2,4))#
	for( p in 1:length( ComDist[[1]] ) )#
	{#
		fit <- isoMDS(ComDist[[1]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, main = paste0( "Individual Hosts ", names( ComDist[[1]][p] ) ) )#
	}#
}
for( c in 1:length(ComDist) )#
{#
	dev.new()#
	par(mfrow=c(2,4))#
	for( p in 1:length( ComDist[[1]] ) )#
	{#
		fit <- isoMDS(ComDist[[1]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, main = paste( names( ComDist[[c]]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
}
names( ComDist[[c]][p] )
names( ComDist[[c]] )
names( ComDist )
c
names( ComDist[[c]] )
names( ComDist[[2]] )
names( ComDist[2] )
for( c in 1:length(ComDist) )#
{#
	dev.new()#
	par(mfrow=c(2,4))#
	for( p in 1:length( ComDist[[1]] ) )#
	{#
		fit <- isoMDS(ComDist[[1]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
}
Phylogeny with ultrametricized branch lengths#
	# read in phylogeny #
	ultra <- read.nexus(paste(DATAwd,"phylos/","ultra",".tre",sep=""))#
	ultras <- list(ultra)#
	names(ultras) <- "ultra"#
	lel <- length(ultra$edge.length)#
#
	# number of randomized branch lengths#
	nrand = 9#
#
	# create nrand more trees with randomly altered branch lengths#
	for(i in 1:nrand)#
	{#
		ultras[[i+1]] <- ultra#
		ultras[[i+1]]$edge.length <- ultra$edge.length + runif(lel, min=-0.99, max=0.99)#
		names(ultras)[[i+1]] <- paste0("urand", i)#
	}#
#
# Phylogeny with each edge length set equal #
	# read in phylogeny #
	equal <- ultra#
	equal$edge.length <- rep(1, length=lel)#
	equals <- list(equal)#
	names(equals) <- "equal"#
#
	# create nrand more trees with randomly altered branch lengths#
	for(i in 1:nrand)#
	{#
		equals[[i+1]] <- equal#
		equals[[i+1]]$edge.length <- runif(lel, min=0.01, max=2)#
		names(equals)[[i+1]] <- paste0("erand", i)#
	}#
# Combine all phylogenies into one list#
	phylos <- as.list(c(ultras, equals))#
	phyNames <- names(phylos)#
#
# Plot phylogenies#
	dev.new()#
	par(mfrow=c(4,2))#
	for(i in 1:length(phylos))#
	{#
		plot(phylos[[i]], cex=0.5, show.tip.label=F)#
	}#
#
# Prune phylogenies by community#
	phy <- vector("list",length=length(coms))#
	names(phy) <- names(coms)#
	for (c in 1:length(coms)) #
	{	#
		phy[[c]] <- vector("list", length=length(phyNames))#
		names(phy[[c]]) <- phyNames#
		for (p in 1:length(phylos)) #
		{ 	#
			phy[[c]][[p]] <- prune.sample(coms[[c]], phylos[[p]]) #
		}#
	}#
# Form distance matrix for each topology#
	phydist <- vector("list",length=length(coms))#
	names(phydist) <- names(coms)#
	for (c in 1:length(coms)) #
	{	phydist[[c]] <- vector("list", length=length(phyNames))#
		names(phydist[[c]]) <- phyNames#
		for (p in 1:length(phylos)) #
		{ 	phydist[[c]][[p]] <- cophenetic(phy[[c]][[p]]) 	}#
	}
PDwd <- "~/Projects/Phylomeet/Analysis/Results_PD/"#
#
# Make a list to contain PD results#
	PD <- vector("list",length=length(coms))#
#
# Find PD for all communities and branch lengths#
	for (c in 1:length(coms)) #
	{	PD[[c]] <- vector("list",length=length(phyNames))#
		for (p in 1:length(phylos)) #
		{ 	PD[[c]][[p]] <- pd(coms[[c]], phy[[c]][[p]], include.root=TRUE)#
			write.csv(PD[[c]][[p]], paste0(PDwd, "PD_", names(coms)[c], "_", phyNames[p], ".csv"))#
		}#
	}
Set folder for output#
NRIwd <- "~/Projects/Phylomeet/Analysis/Results_NRI/"#
#
# Make a list to contain NRI results#
NRI <- vector("list",length=length(coms))#
#
# Find NRI for all communities and branch lengths#
for (c in 1:length(coms)) #
{	NRI[[c]] <- vector("list",length=length(phyNames))#
	for (p in 1:length(phylos)) #
	{ 	NRI[[c]][[p]] <- ses.mpd(coms[[c]], phydist[[c]][[p]], null.model = "richness", abundance.weighted = TRUE, runs = 999)#
		write.csv(NRI[[c]][[p]], paste0(NRIwd, "NRI_", names(coms)[c],"_", phyNames[p], ".csv"))#
	}#
}
set folder for output#
ComDistwd <- "~/Projects/Phylomeet/Analysis/Results_ComDist/"#
#
# make a list to contain comdist results#
ComDist <- vector("list",length=length(coms))#
names(ComDist) <- names(coms)#
#
# find comdist for all communities and branch lengths#
	# loop through community subsets#
	for (c in 1:length(coms)) #
	{	#
		# list to contain results for phylogeny#
		ComDist[[c]] <- vector("list",length=length(phyNames)) #
		names(ComDist[[c]]) <- phyNames#
		# loop through phylogenies within each community subset#
		for (p in 1:length(phylos)) #
			{ 	#
			ComDist[[c]][[p]] <- comdist(coms[[c]], phydist[[c]][[p]], abundance.weighted=T)#
			write.csv( as.matrix( ComDist[[c]][[p]]), paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv"))#
			}#
#
		# alternatively, import pre-run results#
		# for (p in 1:length(phylos)) #
		# { 	#
			# ComDist[[c]][[p]] <- dist( read.csv( paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv" ), row.names=1 ) ) #
		# }#
	}
for (c in 1:length(coms)) #
	{	#
		# list to contain results for phylogeny#
		ComDist[[c]] <- vector("list",length=length(phyNames)) #
		names(ComDist[[c]]) <- phyNames#
		# loop through phylogenies within each community subset#
		# for (p in 1:length(phylos)) #
			# { 	#
			# ComDist[[c]][[p]] <- comdist(coms[[c]], phydist[[c]][[p]], abundance.weighted=T)#
			# write.csv( as.matrix( ComDist[[c]][[p]]), paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv"))#
			# }#
#
		# alternatively, import pre-run results#
		for (p in 1:length(phylos)) #
		{ 	#
			ComDist[[c]][[p]] <- dist( read.csv( paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv" ), row.names=1 ) ) #
		}#
	}
summary(ComDist)
summary(ComDist&yr2sp3)
summary(ComDist$yr2sp3)
for( c in 1:length(ComDist) )#
{#
	dev.new()#
	par(mfrow=c(2,5))#
	for( p in 1:10 )#
	{#
		fit <- isoMDS(ComDist[[1]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	dev.new()#
	par(mfrow=c(2,5))#
	for( p in 11:20 )#
	{#
		fit <- isoMDS(ComDist[[1]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
}
)
for( c in 1:length(ComDist) )#
{#
	dev.new()#
	par(mfrow=c(2,5))#
	for( p in 1:10 )#
	{#
		fit <- isoMDS(ComDist[[1]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
#
	dev.new()#
	par(mfrow=c(2,5))#
	for( p in 11:20 )#
	{#
		fit <- isoMDS(ComDist[[1]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
}
ComdDist[[1]]
ComDist[[1]]
summary(ComDist[1])
summary(ComDist[[1]])
summary(ComDist)
ComDist$yr2sp3HY[[1]]
for( c in 1:length(ComDist) )#
{#
	dev.new()#
	par(mfrow=c(2,5))#
	for( p in 1:10 )#
	{#
		fit <- isoMDS(ComDist[[c]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
#
	dev.new()#
	par(mfrow=c(2,5))#
	for( p in 11:20 )#
	{#
		fit <- isoMDS(ComDist[[c]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
}
for( c in 1:length(ComDist) )#
{#
	dev.new()#
	par(mfrow=c(2,5))#
	for( p in 1:10 )#
	{#
		fit <- isoMDS(ComDist[[c]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, pch=16, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
#
	dev.new()#
	par(mfrow=c(2,5))#
	for( p in 11:20 )#
	{#
		fit <- isoMDS(ComDist[[c]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, pch=16, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
}
for( c in 1:length(ComDist) )#
{#
	dev.new()#
	par(mfrow=c(2,5))#
	for( p in 1:10 )#
	{#
		fit <- isoMDS(ComDist[[c]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, pch=16, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
#
	dev.new()#
	par(mfrow=c(2,5))#
	for( p in 11:20 )#
	{#
		fit <- isoMDS(ComDist[[c]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, pch=16, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
}
paste0( names( ComDist[c]), names( ComDist[[c]][p] ), ".pdf" )
names(coms)
paste0( names( ComDist[c]), names( ComDist[[c]][p] ), ".pdf" )
ComDistwd <- "~/Projects/Phylomeet/Analysis/Results_ComDist/"#
#
# make a list to contain comdist results#
ComDist <- vector("list",length=length(coms))#
names(ComDist) <- c("indiv","pooled")
paste0( names( ComDist[c]), names( ComDist[[c]][p] ), ".pdf" )
ComDistwd <- "~/Projects/Phylomeet/Analysis/Results_ComDist/"#
#
# make a list to contain comdist results#
ComDist <- vector("list",length=length(coms))#
names(ComDist) <- c("indiv","pooled")#
# find comdist for all communities and branch lengths#
	# loop through community subsets#
	for (c in 1:length(coms)) #
	{	#
		# list to contain results for phylogeny#
		ComDist[[c]] <- vector("list",length=length(phyNames)) #
		names(ComDist[[c]]) <- phyNames#
		# loop through phylogenies within each community subset#
		# for (p in 1:length(phylos)) #
			# { 	#
			# ComDist[[c]][[p]] <- comdist(coms[[c]], phydist[[c]][[p]], abundance.weighted=T)#
			# write.csv( as.matrix( ComDist[[c]][[p]]), paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv"))#
			# }#
#
		# alternatively, import pre-run results#
		for (p in 1:length(phylos)) #
		{ 	#
			ComDist[[c]][[p]] <- dist( read.csv( paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv" ), row.names=1 ) ) #
		}#
	}
loop through community subsets#
	for (c in 1:length(coms)) #
	{	#
		# list to contain results for phylogeny#
		ComDist[[c]] <- vector("list",length=length(phyNames)) #
		names(ComDist[[c]]) <- phyNames#
		# loop through phylogenies within each community subset#
		for (p in 1:length(phylos)) #
			{ 	#
			ComDist[[c]][[p]] <- comdist(coms[[c]], phydist[[c]][[p]], abundance.weighted=T)#
			write.csv( as.matrix( ComDist[[c]][[p]]), paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv"))#
			}#
#
		# alternatively, import pre-run results#
		for (p in 1:length(phylos)) #
		{ 	#
			ComDist[[c]][[p]] <- dist( read.csv( paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv" ), row.names=1 ) ) #
		}#
	}
names(ComDist)
summary(ComDist)
names(ComDist[[c]])
names(coms)
loop through community subsets#
	for (c in 1:length(coms)) #
	{	#
		# list to contain results for phylogeny#
		ComDist[[c]] <- vector("list",length=length(phyNames)) #
		names(ComDist[[c]]) <- phyNames#
		# loop through phylogenies within each community subset#
		for (p in 1:length(phylos)) #
			{ 	#
			ComDist[[c]][[p]] <- comdist(coms[[c]], phydist[[c]][[p]], abundance.weighted=T)#
			write.csv( as.matrix( ComDist[[c]][[p]]), paste0( ComDistwd, "ComDist_", names(ComDist)[c], "_", phyNames[p], ".csv"))#
			}#
#
		# alternatively, import pre-run results#
		for (p in 1:length(phylos)) #
		{ 	#
			ComDist[[c]][[p]] <- dist( read.csv( paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv" ), row.names=1 ) ) #
		}#
	}
make a list to contain comdist results#
ComDist <- vector("list",length=length(coms))#
#
# find comdist for all communities and branch lengths#
	# loop through community subsets#
	for (c in 1:length(coms)) #
	{	#
		# list to contain results for phylogeny#
		ComDist[[c]] <- vector("list",length=length(phyNames)) #
		names(ComDist[[c]]) <- phyNames#
		# loop through phylogenies within each community subset#
		for (p in 1:length(phylos)) #
			{ 	#
			ComDist[[c]][[p]] <- comdist(coms[[c]], phydist[[c]][[p]], abundance.weighted=T)#
			write.csv( as.matrix( ComDist[[c]][[p]]), paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv"))#
			}#
#
		# alternatively, import pre-run results#
		for (p in 1:length(phylos)) #
		{ 	#
			ComDist[[c]][[p]] <- dist( read.csv( paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv" ), row.names=1 ) ) #
		}#
	}
names(coms) <- c("indiv", "pooled")
make a list to contain comdist results#
ComDist <- vector("list",length=length(coms))#
#
# find comdist for all communities and branch lengths#
	# loop through community subsets#
	for (c in 1:length(coms)) #
	{	#
		# list to contain results for phylogeny#
		ComDist[[c]] <- vector("list",length=length(phyNames)) #
		names(ComDist[[c]]) <- phyNames#
		# loop through phylogenies within each community subset#
		for (p in 1:length(phylos)) #
			{ 	#
			ComDist[[c]][[p]] <- comdist(coms[[c]], phydist[[c]][[p]], abundance.weighted=T)#
			write.csv( as.matrix( ComDist[[c]][[p]]), paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv"))#
			}#
#
		# alternatively, import pre-run results#
		for (p in 1:length(phylos)) #
		{ 	#
			ComDist[[c]][[p]] <- dist( read.csv( paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv" ), row.names=1 ) ) #
		}#
	}
?library
library(c(MASS, car)
)
library(MASS)#
	library(car)#
	type <- rep(c("Fre","F1","Nar"),4)		# names for labels#
	cols <- rep(c(2,1,3),4)					# colors for labels#
#
	for( c in 1:length(ComDist) )#
	{#
		dev.new()#
		pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][p] ), ".pdf" ) )#
		par( mfrow=c(2,5) )#
		for( p in 1:10 )#
		{#
			fit <- isoMDS(ComDist[[c]][[p]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols, pch=16, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
		}#
		dev.new()#
		par(mfrow=c(2,5))#
		for( p in 11:20 )#
		{#
			fit <- isoMDS(ComDist[[c]][[p]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols, pch=16, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
		}#
	}
ComDist[[1]][[1]]
library(MASS)#
	library(car)#
	type <- rep(c("Fre","F1","Nar"),4)		# names for labels#
	cols <- rep(c(2,1,3),4)					# colors for labels#
#
	for( c in 1:length(ComDist) )#
	{#
		dev.new()#
		pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][p] ), ".pdf" ) )#
		par( mfrow=c(2,5) )#
		for( p in 1:10 )#
		{#
			fit <- isoMDS(ComDist[[c]][[p]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols, pch=16, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
		}#
		dev.new()#
		par(mfrow=c(2,5))#
		for( p in 11:20 )#
		{#
			fit <- isoMDS(ComDist[[c]][[p]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols, pch=16, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
		}#
	}
for( c in 1:length(ComDist) )#
	{#
		dev.new()#
		# pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][p] ), ".pdf" ) )#
		par( mfrow=c(2,5) )#
		for( p in 1:10 )#
		{#
			fit <- isoMDS(ComDist[[c]][[p]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols, pch=16, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
		}#
		dev.new()#
		par(mfrow=c(2,5))#
		for( p in 11:20 )#
		{#
			fit <- isoMDS(ComDist[[c]][[p]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols, pch=16, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
		}#
	}
names(ComDist[1])
names(ComDist)
names(ComDist) <- names(coms)
names(ComDist)
for( c in 1:length(ComDist) )#
	{#
		dev.new()#
		# pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][p] ), ".pdf" ) )#
		par( mfrow=c(2,5) )#
		for( p in 1:10 )#
		{#
			fit <- isoMDS(ComDist[[c]][[p]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols, pch=16, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
		}#
		dev.new()#
		par(mfrow=c(2,5))#
		for( p in 11:20 )#
		{#
			fit <- isoMDS(ComDist[[c]][[p]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols, pch=16, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
		}#
	}
names( ComDist[[c]]\ )
names( ComDist[[c]] )
names( ComDist[[1]] )
names( ComDist[[1]][1] )
ComDist[1]
names(ComDist[1])
pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][1] ), ".pdf" ) )
par( mfrow=c(2,5) )#
		for( p in 1:10 )#
		{#
			fit <- isoMDS(ComDist[[c]][[p]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols, pch=16, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
		}#
		dev.off()
?pdf
for( c in 1:length(ComDist) )#
	{#
		pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][1] ), ".pdf" ), width=10, height=5 )#
		par( mfrow=c(2,5) )#
		for( p in 1:10 )#
		{#
			fit <- isoMDS(ComDist[[c]][[p]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols, pch=16, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
		}#
		dev.off()#
	}
?pch
library(MASS)#
	library(car)#
	type <- rep(c("Fre","F1","Nar"),4)		# names for labels#
	cols <- rep(c(2,1,3),4)					# colors for labels#
	syms <- rep(c(1,0,2),4)#
	names(ComDist) <- names(coms)
plot into pdf files#
	for( c in 1:length(ComDist) )#
	{#
		pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][1] ), ".pdf" ), width=10, height=5 )#
		par( mfrow=c(2,5) )#
		for( p in 1:10 )#
		{#
			fit <- isoMDS(ComDist[[c]][[p]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols, pch=syms, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
		}#
		dev.off()#
	}
plot into pdf files#
	for( c in 1:length(ComDist) )#
	{#
		pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][1] ), ".pdf" ), width=11, height=5.5 )#
		par( mfrow=c(2,5) )#
		for( p in 1:10 )#
		{#
			fit <- isoMDS(ComDist[[c]][[p]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols, pch=syms, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
		}#
		dev.off()#
	}
library(MASS)#
	library(car)#
	type <- rep(c("Fre","F1","Nar"),4)		# names for labels#
	cols <- rep(c(2,1,3),4)					# colors for labels#
	syms <- rep(c(16,15,17),4)#
	names(ComDist) <- names(coms)
for( c in 1:length(ComDist) )#
	{#
		pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][1] ), ".pdf" ), width=11, height=5.5 )#
		par( mfrow=c(2,5) )#
		for( p in 1:10 )#
		{#
			fit <- isoMDS(ComDist[[c]][[p]], k=2)#
			x <- fit$points[,1]#
			y <- fit$points[,2]#
			plot( x,y, col=cols, pch=syms, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
		}#
		dev.off()#
	}
for( c in 1:length(ComDist) )#
{#
	pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][1] ), ".pdf" ), width=11, height=5.5 )#
	par( mfrow=c(2,5) )#
	for( p in 11:20 )#
	{#
		fit <- isoMDS(ComDist[[c]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, pch=syms, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
	dev.off()#
}
names(ComDist[[1]])
for( c in 1:length(ComDist) )#
{#
	pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][1] ), ".pdf" ), width=11, height=5.5 )#
	par( mfrow=c(2,5) )#
	for( p in 1:10 )#
	{#
		fit <- isoMDS(ComDist[[c]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, pch=syms, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
	dev.off()#
}#
#
# plot into pdf files: equal#
for( c in 1:length(ComDist) )#
{#
	pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][11] ), ".pdf" ), width=11, height=5.5 )#
	par( mfrow=c(2,5) )#
	for( p in 11:20 )#
	{#
		fit <- isoMDS(ComDist[[c]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, pch=syms, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
	dev.off()#
}
?col
plot(1:20,col=1:20)
library(MASS)#
	library(car)#
	type <- rep(c("Fre","F1","Nar"),4)		# names for labels#
	cols <- rep(c("red","purple","blue"),4)					# colors for labels#
	syms <- rep(c(15,16,17),4)#
	names(ComDist) <- names(coms)
ComDistwd <- "~/Projects/Phylomeet/Analysis/Results_ComDist/"#
#
# make a list to contain comdist results#
ComDist <- vector("list",length=length(coms))#
#
# find comdist for all communities and branch lengths#
	# loop through community subsets#
	for (c in 1:length(coms)) #
	{	#
		# list to contain results for phylogeny#
		ComDist[[c]] <- vector("list",length=length(phyNames)) #
		names(ComDist[[c]]) <- phyNames#
		# loop through phylogenies within each community subset#
		for (p in 1:length(phylos)) #
			{ 	#
			ComDist[[c]][[p]] <- comdist(coms[[c]], phydist[[c]][[p]], abundance.weighted=T)#
			write.csv( as.matrix( ComDist[[c]][[p]]), paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv"))#
			}#
#
		# alternatively, import pre-run results#
		for (p in 1:length(phylos)) #
		{ 	#
			ComDist[[c]][[p]] <- dist( read.csv( paste0( ComDistwd, "ComDist_", names(coms)[c], "_", phyNames[p], ".csv" ), row.names=1 ) ) #
		}#
	}#
# Nonmetric MDS 2D#
	library(MASS)#
	library(car)#
	type <- rep(c("Fre","F1","Nar"),4)		# names for labels#
	cols <- rep(c("red","purple","blue"),4)					# colors for labels#
	syms <- rep(c(15,16,17),4)#
	names(ComDist) <- names(coms)#
# plot into pdf files: ultra#
for( c in 1:length(ComDist) )#
{#
	pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][1] ), ".pdf" ), width=11, height=5.5 )#
	par( mfrow=c(2,5) )#
	for( p in 1:10 )#
	{#
		fit <- isoMDS(ComDist[[c]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, pch=syms, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
	dev.off()#
}#
#
# plot into pdf files: equal#
for( c in 1:length(ComDist) )#
{#
	pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][11] ), ".pdf" ), width=11, height=5.5 )#
	par( mfrow=c(2,5) )#
	for( p in 11:20 )#
	{#
		fit <- isoMDS(ComDist[[c]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, pch=syms, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
	dev.off()#
}
Nonmetric MDS 2D#
	library(MASS)#
	library(car)#
	type <- rep(c("Fre","F1","Nar"),4)		# names for labels#
	cols <- rep(c("black","red","blue"),4)					# colors for labels#
	syms <- rep(c(15,16,17),4)#
	names(ComDist) <- names(coms)#
# plot into pdf files: ultra#
for( c in 1:length(ComDist) )#
{#
	pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][1] ), ".pdf" ), width=11, height=5.5 )#
	par( mfrow=c(2,5) )#
	for( p in 1:10 )#
	{#
		fit <- isoMDS(ComDist[[c]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, pch=syms, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
	dev.off()#
}#
#
# plot into pdf files: equal#
for( c in 1:length(ComDist) )#
{#
	pdf( file=paste0( names( ComDist[c]), names( ComDist[[c]][11] ), ".pdf" ), width=11, height=5.5 )#
	par( mfrow=c(2,5) )#
	for( p in 11:20 )#
	{#
		fit <- isoMDS(ComDist[[c]][[p]], k=2)#
		x <- fit$points[,1]#
		y <- fit$points[,2]#
		plot( x,y, col=cols, pch=syms, cex=2, main = paste( names( ComDist[c]), names( ComDist[[c]][p] ), sep=" " ) )#
	}#
	dev.off()#
}
Community Phylogenetic Analyses  #
###	Arthropod communities on cottonwood hosts#
###	Dataset from Wimp et al. 2004#
####
### Code by Karl Jarvis#
##############################################################
#
# load picante package#
# install.packages("picante", dependencies = TRUE, repos = "http://R.research.att.com/")#
library(picante)#
#
# Picante manual#
# vignette("picante-intro")#
#
# Set directory for input data: community file and phylogeny file#
DATAwd <- "~/Projects/Phylomeet/Analysis/arcot_data/"#
#
##############################################################
# Load in communities, take subsets and format for analysis ##
##############################################################
#
# load community data#
fullcom <- read.table(paste(DATAwd, "arcot.txt", sep=""))#
crosstype <- rep(c(rep("fremont",10), rep("f1",10), rep("backcross",10), rep("narrowleaf",10)),4)#
ctyear <- rep(c(rep("fr",10), rep("fo",10), rep("na",20)),4)#
year <- c(rep(2000,40),rep(2001,40),rep(2002,40),rep(2003,40))#
com <- cbind(year, ctyear, fullcom)#
#
# factors #
years <- 2000:2003#
crosstypes <- c("fr","fo","na")#
CtYrNames <- c("fr2000","fo2000","na2000","fr2001","fo2001","na2001","fr2002","fo2002","na2002","fr2003","fo2003","na2003")#
spaces <- c(0.2,0.2,0.2,1,0.2,0.2,1,0.2,0.2,1,0.2,0.2)#
#
##########################################################################
# pool data#
	# byCT: sum of occcurrences in all years by crosstype#
	sumFr <- apply(com[com$ctyear=="fr",3:ncol(com)],2,sum)#
	sumFo <- apply(com[com$ctyear=="fo",3:ncol(com)],2,sum)#
	sumNa <- apply(com[com$ctyear=="na",3:ncol(com)],2,sum)#
	byCT <- rbind(sumFr,sumFo,sumNa)#
	# byYear: sum of occcurrences by year on all crosstypes#
	sum2000 <- apply(com[com$year==2000,3:ncol(com)],2,sum)#
	sum2001 <- apply(com[com$year==2001,3:ncol(com)],2,sum)#
	sum2002 <- apply(com[com$year==2002,3:ncol(com)],2,sum)#
	sum2003 <- apply(com[com$year==2003,3:ncol(com)],2,sum)#
	byYear <- rbind(sum2000,sum2001,sum2002,sum2003)#
	# byCtYr: sum of occurrences by year and by crosstype#
	byCtYrMaker <- function(com) #
	{ 	#
		fr2000 <- apply(com[com$year==2000 & com$ctyear=="fr",3:ncol(com)],2,sum)#
		fo2000 <- apply(com[com$year==2000 & com$ctyear=="fo",3:ncol(com)],2,sum)#
		na2000 <- apply(com[com$year==2000 & com$ctyear=="na",3:ncol(com)],2,sum)#
		fr2001 <- apply(com[com$year==2001 & com$ctyear=="fr",3:ncol(com)],2,sum)#
		fo2001 <- apply(com[com$year==2001 & com$ctyear=="fo",3:ncol(com)],2,sum)#
		na2001 <- apply(com[com$year==2001 & com$ctyear=="na",3:ncol(com)],2,sum)#
		fr2002 <- apply(com[com$year==2002 & com$ctyear=="fr",3:ncol(com)],2,sum)#
		fo2002 <- apply(com[com$year==2002 & com$ctyear=="fo",3:ncol(com)],2,sum)#
		na2002 <- apply(com[com$year==2002 & com$ctyear=="na",3:ncol(com)],2,sum)#
		fr2003 <- apply(com[com$year==2003 & com$ctyear=="fr",3:ncol(com)],2,sum)#
		fo2003 <- apply(com[com$year==2003 & com$ctyear=="fo",3:ncol(com)],2,sum)#
		na2003 <- apply(com[com$year==2003 & com$ctyear=="na",3:ncol(com)],2,sum)#
		byCtYr <- rbind(fr2000,fo2000,na2000,fr2001,fo2001,na2001,fr2002,fo2002,na2002,fr2003,fo2003,na2003)#
		byCtYr#
	}#
	byCtMaker <- function(com)#
	{#
		fr <- apply(com[com$ctyear=="fr",3:ncol(com)],2,sum)#
		fo <- apply(com[com$ctyear=="fo",3:ncol(com)],2,sum)#
		na <- apply(com[com$ctyear=="na",3:ncol(com)],2,sum)#
		byH <- rbind(fr, fo, na)#
		byH		#
	}#
##########################################################################
# Subset the data#
	byCtYr <- byCtYrMaker(com=com)#
#
##########################################################################
	# Full community#
	# sumAll: sum of all occurrences in all years on all crosstypes#
	sumAll <- apply(com[,4:ncol(com)],2,sum)#
	# CtYr: pooled by crosstype and Year#
	CtYr <- byCtYrMaker(com=com)#
	# Ct: pooled by crosstype only#
	Ct <- byCtMaker(com=com)	#
#
##########################################################################
	# Common taxa only#
	fullsumAll <- rbind(fullcom,sumAll)#
#
	# sp2: exclude species that have only one occurrence#
	sp2 <- fullsumAll[1:160,sumAll >= 2] #
#
	# sp2CtYr: sp2, pooled by crosstype and year#
	sp2CtYr <- byCtYrMaker(com=cbind(year, ctyear, sp2))#
#
	# sp3: exclude species that have only one occurrence#
	sp3 <- fullsumAll[1:160,sumAll >= 3] #
#
	# sp3CtYr: com3sp, pooled by crosstype and year#
	sp3CtYr <- byCtYrMaker(com=cbind(year, ctyear, sp3))#
#
	# yr2: all except species that are only present in one year#
	y <- byYear#
	for(i in 1:ncol(y)) #
	{ #
		for(j in 1:nrow(y)) #
		{ #
			if (byYear[j,i] > 0) {y[j,i] <- 1} #
		}	#
	}#
	nyear <- apply(y,2,sum)#
	fullnyear <- rbind(fullcom,nyear)#
	yr2 <- fullnyear[1:160,nyear >= 2]#
#
	# yr2CtYr: y2, pooled by crosstype and year#
	yr2CtYr <- byCtYrMaker(com=cbind(year, ctyear, yr2))#
	# yr2sp2: intersection of sp2 and yr2#
	sp2year <- rbind(sp2,nyear)#
	yr2sp2 <- sp2year[1:160,sp2year[161,] >= 2]#
#
	# yr2sp2CtYr: yr2sp2, pooled by crosstype and year#
	yr2sp2CtYr <- byCtYrMaker(com=cbind(year, ctyear, yr2sp2))#
#
	# yr2sp3: intersection of sp3 and yr2#
	sp3year <- rbind(sp3,nyear)#
	yr2sp3 <- sp3year[1:160,sp3year[161,] >= 2]#
#
	# yr2sp3CtYr: yr2sp3, pooled by crosstype and year#
	yr2sp3CtYr <- byCtYrMaker(com=cbind(year, ctyear, yr2sp3))#
	# yr2sp3H: yr2sp3, pooled by crosstype#
	yr2sp3Ct <- byCtMaker(com=cbind(year, ctyear, yr2sp3))#
##########################################################################
# Select which community subsets to use#
#
# list of full community and subsets	#
	 # coms <- lapply(list(fullcom, CtYr, sp2, sp3, yr2, yr2sp2, yr2sp3, sp2CtYr, sp3CtYr, yr2CtYr, yr2sp2CtYr, yr2sp3CtYr), as.matrix)#
	 # names(coms) <- c("fullcom", "CtYr", "sp2", "sp3", "yr2", "yr2sp2", "yr2sp3", "sp2CtYr", "sp3CtYr", "yr2CtYr", "yr2sp2CtYr", "yr2sp3CtYr")#
# list of communities to use in this analysis#
	 coms <- lapply(list(fullcom, yr2sp3, CtYr, yr2sp3CtYr, Ct, yr2sp3Ct), as.matrix)#
	 names(coms) <- c("full_indiv", "common_indiv", "full_pooled", "common_pooled", "full_crosstype", "common_crosstype")#
##########################################################################
# Load in phylogenies, prune, and create distance matrices for analysis ##
##########################################################################
#
##########################################################################
# Phylogeny with ultrametricized branch lengths#
	# read in phylogeny #
	ultra <- read.nexus(paste0(DATAwd,"ultra.tre"))#
	ultras <- list(ultra)#
	names(ultras) <- "ultra"#
	lel <- length(ultra$edge.length)#
#
	# number of randomized branch lengths#
	nrand = 9#
#
	# create nrand more trees with randomly altered branch lengths#
	for(i in 1:nrand)#
	{#
		ultras[[i+1]] <- ultra#
		ultras[[i+1]]$edge.length <- ultra$edge.length + runif(lel, min=-0.99, max=0.99)#
		names(ultras)[[i+1]] <- paste0("urand", i)#
	}#
#
# Phylogeny with each edge length set equal #
	# read in phylogeny #
	equal <- ultra#
	equal$edge.length <- rep(1, length=lel)#
	equals <- list(equal)#
	names(equals) <- "equal"#
#
	# create nrand more trees with randomly altered branch lengths#
	for(i in 1:nrand)#
	{#
		equals[[i+1]] <- equal#
		equals[[i+1]]$edge.length <- runif(lel, min=0.01, max=2)#
		names(equals)[[i+1]] <- paste0("erand", i)#
	}#
# Combine all phylogenies into one list#
	phylos <- as.list(c(ultras, equals))#
	phyNames <- names(phylos)#
#
##########################################################################
#
# Prune phylogenies by community#
	phy <- vector("list",length=length(coms))#
	names(phy) <- names(coms)#
	for (c in 1:length(coms)) #
	{	#
		phy[[c]] <- vector("list", length=length(phyNames))#
		names(phy[[c]]) <- phyNames#
		for (p in 1:length(phylos)) #
		{ 	#
			phy[[c]][[p]] <- prune.sample(coms[[c]], phylos[[p]]) #
		}#
	}#
#
# Create distance matrix for each topology#
	phydist <- vector("list",length=length(coms))#
	names(phydist) <- names(coms)#
	for (c in 1:length(coms)) #
	{	#
		phydist[[c]] <- vector("list", length=length(phyNames))#
		names(phydist[[c]]) <- phyNames#
		for (p in 1:length(phylos)) #
		{ 	#
			phydist[[c]][[p]] <- cophenetic(phy[[c]][[p]]) 	#
		}#
	}#
#
#####################################################################
# Plotting#
#
# Plot phylogenies#
	# dev.new()#
	# par(mfrow=c(4,2))#
	# for(i in 1:length(phylos))#
	# {#
		# plot(phylos[[i]], cex=0.5, show.tip.label=F)#
	# }#
	plot(phy$full_pooled$ultra, cex=0.6)		#
#
# Plotting phylogenies#
	# First five sets of phylogenies to get overview#
	# par(mfrow=c(4,3))#
	# for (c in 1:9) #
	# {	#
		# plot(phy[[c]][[1]], show.tip.label=F) #
	# }#
#
	# # large versions of full phylogenies#
	# par(mfrow=c(1,2))#
	# plot(phy$fullcom$ultra, cex=0.5)#
	# plot(phy$fullcom$equal, cex=0.5)
Set folder for output of PD results#
PDwd <- "~/Projects/Phylomeet/Analysis/Results_PD/"#
#
# Set folder for output of NRI results#
NRIwd <- "~/Projects/Phylomeet/Analysis/Results_NRI/"#
#
# Set folder for output of ComDist results#
ComDistwd <- "~/Projects/Phylomeet/Analysis/Results_ComDist/"#
#
# Set directory for figures#
FIGwd <- "~/Projects/Phylomeet/Analysis/Figures/"#
#
library(reshape2)#
#
##########################################################################
# Faith's Phylogenetic Diversity (PD)#
##########################################################################
# Make a list to contain PD results#
	PD <- vector("list",length=length(coms))#
	names(PD) <- names(coms)#
#
##########################################################################
# Calculate PD for all communities and branch lengths#
	for (c in 1:length(coms)) #
	{	PD[[c]] <- vector("list",length=length(phyNames))#
		for (p in 1:length(phylos)) #
		{ 	#
			PD[[c]][[p]] <- pd(coms[[c]], phy[[c]][[p]], include.root=TRUE)#
			write.csv(PD[[c]][[p]], paste0(PDwd, "PD_", names(coms)[c], "_", phyNames[p], ".csv"))	# write PD to file#
		}#
	}
Community Phylogenetic Analyses  #
###	Arthropod communities on cottonwood hosts#
###	Dataset from Wimp et al. 2004#
####
### Code by Karl Jarvis#
##############################################################
#
# load picante package#
# install.packages("picante", dependencies = TRUE, repos = "http://R.research.att.com/")#
# install.packages("geiger", dependencies = TRUE, repos = "http://R.research.att.com/")#
library(picante)#
# Picante manual#
# vignette("picante-intro")#
#
# Set directory for input data: community file and phylogeny file#
DATAwd <- "~/Projects/Phylomeet/Analysis/arcot_data/"#
#
##############################################################
# Load in communities, take subsets and format for analysis ##
##############################################################
#
# load community data#
fullcom <- read.table(paste(DATAwd, "arcot.txt", sep=""))#
crosstype <- rep(rep(c("fremont", "f1", "backcross","narrowleaf"), each=10), times=4)#
ctyear <- rep(rep(c("fr","fo","na","na"), each=10), times=4)#
year <- c(rep(c(2000,2001,2002,2003), each=40))#
com <- cbind(year, ctyear, fullcom)#
#
# factors #
years <- 2000:2003#
crosstypes <- c("fr","fo","na")#
CtYrNames <- c("fr2000","fo2000","na2000","fr2001","fo2001","na2001","fr2002","fo2002","na2002","fr2003","fo2003","na2003")#
spaces <- c(0.2,0.2,0.2,1,0.2,0.2,1,0.2,0.2,1,0.2,0.2)#
#
################################################
# pool data#
	# byCT: sum of occcurrences in all years by crosstype#
	sumFr <- apply(com[com$ctyear=="fr",3:ncol(com)],2,sum)#
	sumFo <- apply(com[com$ctyear=="fo",3:ncol(com)],2,sum)#
	sumNa <- apply(com[com$ctyear=="na",3:ncol(com)],2,sum)#
	byCT <- rbind(sumFr,sumFo,sumNa)#
	# byYear: sum of occcurrences by year on all crosstypes#
	sum2000 <- apply(com[com$year==2000,3:ncol(com)],2,sum)#
	sum2001 <- apply(com[com$year==2001,3:ncol(com)],2,sum)#
	sum2002 <- apply(com[com$year==2002,3:ncol(com)],2,sum)#
	sum2003 <- apply(com[com$year==2003,3:ncol(com)],2,sum)#
	byYear <- rbind(sum2000,sum2001,sum2002,sum2003)#
	# byCtYr: sum of occurrences by year and by crosstype#
	byCtYrMaker <- function(com) #
	{ 	#
		fr2000 <- apply(com[com$year==2000 & com$ctyear=="fr",3:ncol(com)],2,sum)#
		fo2000 <- apply(com[com$year==2000 & com$ctyear=="fo",3:ncol(com)],2,sum)#
		na2000 <- apply(com[com$year==2000 & com$ctyear=="na",3:ncol(com)],2,sum)#
		fr2001 <- apply(com[com$year==2001 & com$ctyear=="fr",3:ncol(com)],2,sum)#
		fo2001 <- apply(com[com$year==2001 & com$ctyear=="fo",3:ncol(com)],2,sum)#
		na2001 <- apply(com[com$year==2001 & com$ctyear=="na",3:ncol(com)],2,sum)#
		fr2002 <- apply(com[com$year==2002 & com$ctyear=="fr",3:ncol(com)],2,sum)#
		fo2002 <- apply(com[com$year==2002 & com$ctyear=="fo",3:ncol(com)],2,sum)#
		na2002 <- apply(com[com$year==2002 & com$ctyear=="na",3:ncol(com)],2,sum)#
		fr2003 <- apply(com[com$year==2003 & com$ctyear=="fr",3:ncol(com)],2,sum)#
		fo2003 <- apply(com[com$year==2003 & com$ctyear=="fo",3:ncol(com)],2,sum)#
		na2003 <- apply(com[com$year==2003 & com$ctyear=="na",3:ncol(com)],2,sum)#
		byCtYr <- rbind(fr2000,fo2000,na2000,fr2001,fo2001,na2001,fr2002,fo2002,na2002,fr2003,fo2003,na2003)#
		byCtYr#
	}#
	byCtMaker <- function(com)#
	{#
		fr <- apply(com[com$ctyear=="fr",3:ncol(com)],2,sum)#
		fo <- apply(com[com$ctyear=="fo",3:ncol(com)],2,sum)#
		na <- apply(com[com$ctyear=="na",3:ncol(com)],2,sum)#
		byH <- rbind(fr, fo, na)#
		byH		#
	}#
######################################################
# Subset the data#
	byCtYr <- byCtYrMaker(com=com)#
#
######################################################
	# Full community#
	# sumAll: sum of all occurrences in all years on all crosstypes#
	sumAll <- apply(com[,4:ncol(com)],2,sum)#
	# CtYr: pooled by crosstype and Year#
	CtYr <- byCtYrMaker(com=com)#
	# Ct: pooled by crosstype only#
	Ct <- byCtMaker(com=com)	#
#
######################################################
	# Common taxa only#
	fullsumAll <- rbind(fullcom,sumAll)#
#
	# sp2: exclude species that have only one occurrence#
	sp2 <- fullsumAll[1:160,sumAll >= 2] #
#
	# sp2CtYr: sp2, pooled by crosstype and year#
	sp2CtYr <- byCtYrMaker(com=cbind(year, ctyear, sp2))#
#
	# sp3: exclude species that have only one occurrence#
	sp3 <- fullsumAll[1:160,sumAll >= 3] #
#
	# sp3CtYr: com3sp, pooled by crosstype and year#
	sp3CtYr <- byCtYrMaker(com=cbind(year, ctyear, sp3))#
#
	# yr2: all except species that are only present in one year#
	y <- byYear#
	for(i in 1:ncol(y)) #
	{ #
		for(j in 1:nrow(y)) #
		{ #
			if (byYear[j,i] > 0) {y[j,i] <- 1} #
		}	#
	}#
	nyear <- apply(y,2,sum)#
	fullnyear <- rbind(fullcom,nyear)#
	yr2 <- fullnyear[1:160,nyear >= 2]#
#
	# yr2CtYr: y2, pooled by crosstype and year#
	yr2CtYr <- byCtYrMaker(com=cbind(year, ctyear, yr2))#
	# yr2sp2: intersection of sp2 and yr2#
	sp2year <- rbind(sp2,nyear)#
	yr2sp2 <- sp2year[1:160,sp2year[161,] >= 2]#
#
	# yr2sp2CtYr: yr2sp2, pooled by crosstype and year#
	yr2sp2CtYr <- byCtYrMaker(com=cbind(year, ctyear, yr2sp2))#
#
	# yr2sp3: intersection of sp3 and yr2#
	sp3year <- rbind(sp3,nyear)#
	yr2sp3 <- sp3year[1:160,sp3year[161,] >= 2]#
#
	# yr2sp3CtYr: yr2sp3, pooled by crosstype and year#
	yr2sp3CtYr <- byCtYrMaker(com=cbind(year, ctyear, yr2sp3))#
	# yr2sp3H: yr2sp3, pooled by crosstype#
	yr2sp3Ct <- byCtMaker(com=cbind(year, ctyear, yr2sp3))#
######################################################
# Select which community subsets to use#
#
# list of full community and subsets	#
	 # coms <- lapply(list(fullcom, CtYr, sp2, sp3, yr2, yr2sp2, yr2sp3, sp2CtYr, sp3CtYr, yr2CtYr, yr2sp2CtYr, yr2sp3CtYr), as.matrix)#
	 # names(coms) <- c("fullcom", "CtYr", "sp2", "sp3", "yr2", "yr2sp2", "yr2sp3", "sp2CtYr", "sp3CtYr", "yr2CtYr", "yr2sp2CtYr", "yr2sp3CtYr")#
# list of communities to use in this analysis#
	 coms <- lapply(list(fullcom, yr2sp3, CtYr, yr2sp3CtYr, Ct, yr2sp3Ct), as.matrix)#
	 names(coms) <- c("full_indiv", "common_indiv", "full_pooled", "common_pooled", "full_crosstype", "common_crosstype")#
######################################################
# Load in phylogenies, prune, and create #
# distance matrices for analysis #
######################################################
#
######################################################
# Phylogeny with ultrametricized branch lengths#
	# read in phylogeny #
	ultra <- read.nexus(paste0(DATAwd,"ultra.tre"))#
	# u1 <- read.tree(paste0(DATAwd,"ultra1.tre"))#
	# u1l <- ladderize(u1)#
	# plot(u1, type="fan")#
	write.tree(ultra, paste0(DATAwd,"ultra1.tre"))#
	ultras <- list(ultra)#
	names(ultras) <- "ultra"#
	lel <- length(ultra$edge.length)#
#
	# number of randomized branch lengths#
	nrand = 9#
#
	# create nrand more trees with randomly altered branch lengths#
	for(i in 1:nrand)#
	{#
		ultras[[i+1]] <- ultra#
		ultras[[i+1]]$edge.length <- ultra$edge.length + runif(lel, min=-0.99, max=0.99)#
		names(ultras)[[i+1]] <- paste0("urand", i)#
	}#
#
# Phylogeny with each edge length set equal #
	# read in phylogeny #
	equal <- ultra#
	equal$edge.length <- rep(1, length=lel)#
	equals <- list(equal)#
	names(equals) <- "equal"#
#
	# create nrand more trees with randomly altered branch lengths#
	for(i in 1:nrand)#
	{#
		equals[[i+1]] <- equal#
		equals[[i+1]]$edge.length <- runif(lel, min=0.01, max=2)#
		names(equals)[[i+1]] <- paste0("erand", i)#
	}#
# Combine all phylogenies into one list#
	phylos <- as.list(c(ultras, equals))#
	phyNames <- names(phylos)#
#
################################################
# Prune phylogenies by community#
	phy <- vector("list",length=length(coms))#
	names(phy) <- names(coms)#
	for (c in 1:length(coms)) #
	{	#
		phy[[c]] <- vector("list", length=length(phyNames))#
		names(phy[[c]]) <- phyNames#
		for (p in 1:length(phylos)) #
		{ 	#
			phy[[c]][[p]] <- prune.sample(coms[[c]], phylos[[p]]) #
		}#
	}#
#
# Create distance matrix for each topology#
	phydist <- vector("list",length=length(coms))#
	names(phydist) <- names(coms)#
	for (c in 1:length(coms)) #
	{	#
		phydist[[c]] <- vector("list", length=length(phyNames))#
		names(phydist[[c]]) <- phyNames#
		for (p in 1:length(phylos)) #
		{ 	#
			phydist[[c]][[p]] <- cophenetic(phy[[c]][[p]]) 	#
		}#
	}#
#
################################################
# Plotting#
#
# Plot phylogenies#
	# dev.new()#
	# par(mfrow=c(4,2))#
	# for(i in 1:length(phylos))#
	# {#
		# plot(phylos[[i]], cex=0.5, show.tip.label=F)#
	# }#
	# plot(phy$full_pooled$ultra, cex=0.6)		#
#
# Plotting phylogenies#
	# First five sets of phylogenies to get overview#
	# par(mfrow=c(4,3))#
	# for (c in 1:9) #
	# {	#
		# plot(phy[[c]][[1]], show.tip.label=F) #
	# }#
#
	# # large versions of full phylogenies#
	# par(mfrow=c(1,2))#
	# plot(phy$fullcom$ultra, cex=0.5)#
	# plot(phy$fullcom$equal, cex=0.5)
Community Phylogenetic Analysis of arthropod communities on cottonwood hosts#
##########################################################################
#
##########################################################################
# Set folder locations#
#
# Set folder for output of PD results#
PDwd <- "~/Projects/Phylomeet/Analysis/Results_PD/"#
#
# Set folder for output of NRI results#
NRIwd <- "~/Projects/Phylomeet/Analysis/Results_NRI/"#
#
# Set folder for output of ComDist results#
ComDistwd <- "~/Projects/Phylomeet/Analysis/Results_ComDist/"#
#
# Set directory for figures#
FIGwd <- "~/Projects/Phylomeet/Analysis/Figures/"#
#
library(reshape2)
Run dataprep#
source('~/Projects/Phylomeet/Analysis/arcot_dataprep.r', chdir = TRUE)#
#
########################
# Figure 1: Phylogeny#
	phyfig <- phylos$ultra#
	nfull <- read.csv("~/Projects/Phylomeet/Manuscript/Tables&Figures/phylogeny/phynames.csv", colClasses="character")#
#
	# phylogeny with order names included#
	ncol <- apply(nfull, 1, function(x) paste(x, collapse="_"))#
	nc <- ncol#
	for(i in 0:9)#
	{#
		nc <- gsub(i, "sp.", nc) #
		nc <- gsub("sp.sp.", "sp.", nc)#
		nc <- gsub("__", "_", nc)#
	}#
	# phylogeny with order names excluded	#
	nfam <- apply(nfull[,-1],1,function(x) paste(x, collapse="_"))#
	ng <- gsub("__", "_", nfam)#
	o <- c(188,189,193,199)#
	for(i in o)#
	{ ng[o] <- paste0(nfull[o,1], "_sp.") }#
	for(i in 0:9)#
	{ ng <- gsub(i, "sp.", ng) }#
	ng <- gsub("sp.sp.", "sp.", ng)#
	phyord <- phyfig#
	phyord$tip.label <- nc#
	phyfig$tip.label <- ng#
	num <- c(2,)#
	nodelabels(text=1:42, node=num)
plot(phyord, cex=0.4, root.edge=T, no.margin=T)#
	nodelabels(1:phyfig$Nnode, bg="black", col="white", cex=0.5, frame="circle")
http://www.ats.ucla.edu/stat/r/dae/poissonreg.htm#
leech <- read.csv("~/Desktop/leeches1.csv")#
head(leech)#
summary(leech)#
sapply(leech,sd)#
#
dev.new()#
hist(leech$n, breaks=max(leech$n))#
#
dev.new()#
plot(1:length(leech$n),leech$n)#
#
dev.new()#
par(mfrow=c(2,3))#
for(i in 1:5) #
{#
	boxplot(leech$n ~ leech[,i])#
	title(main=names(leech[i]))#
}#
library(MuMIn)#
m <- glm(n ~ Day + Location + Treatment + Tank + Rock_size, family="poisson", data=leech)#
dredge(m)#
summary(m)
leech <- read.csv("~/Desktop/leeches1.csv")#
head(leech)#
summary(leech)#
sapply(leech,sd)#
#
dev.new()#
hist(leech$n, breaks=max(leech$n))
?rpois
x <- rpois(100,1)
plot(x)
dev.new()#
hist(leech$n, breaks=max(leech$n))
dev.new()#
plot(1:length(leech$n),leech$n)
dev.new()#
par(mfrow=c(2,3))#
for(i in 1:5) #
{#
	boxplot(leech$n ~ leech[,i])#
	title(main=names(leech[i]))#
}
?glm
par(mfrow=c(2,3))#
for(i in 1:5) #
{#
	boxplot(leech$n ~ leech[,i])#
	title(main=names(leech[i]))#
}
m <- glm(n ~ Day + Location + Treatment + Rock_size, family="poisson", data=leech)
m
par(mfrow=c(2,3))#
for(i in 1:5) #
{#
	boxplot(leech$n ~ leech[,i])#
	title(main=names(leech[i]))#
}
library(MuMIn)#
dredge(m)
summary(m)
?glm
hist(leech$n, breaks=max(leech$n))
dev.new()#
hist(leech$n, breaks=max(leech$n))
