paste0(output_dir, CDoutResults, ".log")
# Run on monsoon
CDdir = "/scratch/kj375/CDPOP/mdata/"  # path of folder containing CDPOP output
sGDdir = "/scratch/kj375/sGD/results/"  # path of folder to contain sGD output
# Run on laptop
# CDdir = "/Users/kjj/CDPOP_v1.2.21_20140723/mdata/" # path of folder containing CDPOP output
# sGDdir = "/Users/kjj/Projects/MortSims/sGD2test/" # path of folder to contain sGD output
# Input files
CDoutResults = args[1] # CDPOP output folders like "ibdb0m0d24001405192897"
CDoutDir = paste0(CDdir,CDoutResults) # path of CDPOP results
invarFile = paste0(CDdir, args[2]) # path of CDPOP input variable files like "invar_ibdb0m0d2400.csv"
output_dir = paste0(sGDdir, CDoutResults) # path of output from each sGD run
xy_file = paste0(CDdir, "xy722crop450.csv") # path of file with points of cropped landscape
xy_all = paste0(CDdir, "xygrid722.csv") # path of file with all points in full landscape
fullPop = 722 # maximum population size in full landscape
args = c("ibdb0m0d24001407888795", "invar_ibdb0m0d2400.csv") # Use with regular R (first one in list, ibd with complete barrier)
# args = c("ibr83b0m0d24001405196829", "invar_ibr83b0m0d2400.csv") # Use with regular R (sim with highest cost in landscape)
# Run on monsoon
CDdir = "/scratch/kj375/CDPOP/mdata/"  # path of folder containing CDPOP output
sGDdir = "/scratch/kj375/sGD/results/"  # path of folder to contain sGD output
# Run on laptop
# CDdir = "/Users/kjj/CDPOP_v1.2.21_20140723/mdata/" # path of folder containing CDPOP output
# sGDdir = "/Users/kjj/Projects/MortSims/sGD2test/" # path of folder to contain sGD output
# Input files
CDoutResults = args[1] # CDPOP output folders like "ibdb0m0d24001405192897"
CDoutDir = paste0(CDdir,CDoutResults) # path of CDPOP results
invarFile = paste0(CDdir, args[2]) # path of CDPOP input variable files like "invar_ibdb0m0d2400.csv"
output_dir = paste0(sGDdir, CDoutResults) # path of output from each sGD run
xy_file = paste0(CDdir, "xy722crop450.csv") # path of file with points of cropped landscape
xy_all = paste0(CDdir, "xygrid722.csv") # path of file with all points in full landscape
fullPop = 722 # maximum population size in full landscape
paste0(output_dir, CDoutResults, ".log")
args = c("ibdb0m0d24001407888795/", "invar_ibdb0m0d2400.csv") # Use with regular R (first one in list, ibd with complete barrier)
CDoutResults = args[1] # CDPOP output folders like "ibdb0m0d24001405192897"
CDoutDir = paste0(CDdir,CDoutResults) # path of CDPOP results
invarFile = paste0(CDdir, args[2]) # path of CDPOP input variable files like "invar_ibdb0m0d2400.csv"
output_dir = paste0(sGDdir, CDoutResults) # path of output from each sGD run
xy_file = paste0(CDdir, "xy722crop450.csv") # path of file with points of cropped landscape
xy_all = paste0(CDdir, "xygrid722.csv") # path of file with all points in full landscape
fullPop = 722 # maximum population size in full landscape
paste0(output_dir, CDoutResults, ".log")
paste0(args[1], args[2])
args = c("ibdb0m0d2400", "1407888795")
paste0(args[1], args[2])
paste0(CDdir, "invar_", args[1], ".csv")
output_dir
CDoutResults
paste0(output_dir, args[1], ".log")
rm(list=ls())
# load required packages
library(diveRsity)
library(adegenet)
library(ecodist)
# How to run
# args = commandArgs(TRUE)  # Run in Rscript through shell
args = c("ibdb0m0d2400", "1407888795") # Use with regular R (first one in list, ibd with complete barrier)
# args = c("ibr83b0m0d2400", "1405196829") # Use with regular R (sim with highest cost in landscape)
# Run on monsoon
# CDdir = "/scratch/kj375/CDPOP/mdata/"  # path of folder containing CDPOP output
# sGDdir = "/scratch/kj375/sGD/results/"  # path of folder to contain sGD output
# Run on laptop
CDdir = "/Users/kjj/CDPOP_v1.2.21_20140723/mdata/" # path of folder containing CDPOP output
sGDdir = "/Users/kjj/Projects/MortSims/sGD2test/" # path of folder to contain sGD output
# Input files
CDoutResults = paste0(args[1], args[2]) # CDPOP output folders like "ibdb0m0d24001405192897"
CDoutDir = paste0(CDdir,CDoutResults) # path of CDPOP results
invarFile = paste0(CDdir, "invar_", args[1], ".csv") # path of CDPOP input variable files like "invar_ibdb0m0d2400.csv"
output_dir = paste0(sGDdir, CDoutResults) # path of output from each sGD run
xy_file = paste0(CDdir, "xy722crop450.csv") # path of file with points of cropped landscape
xy_all = paste0(CDdir, "xygrid722.csv") # path of file with all points in full landscape
fullPop = 722 # maximum population size in full landscape
# input variables
popMax = nrow(read.csv(xy_file)) # find maximum population size in cropped landscape
IN = read.csv(invarFile) # read input variables file
Ngen = IN$looptime
costdistance_file = paste0(CDdir,IN$matecdmat,".csv")
Nseq = IN$nthfile_seq
Nrun = 1
# Nrun = IN$mcruns
mort = as.character(IN$subpopmortperc)
mortName = substr(mort, 1, (nchar(mort)+1)/2-1)
batchName = paste0(IN$matecdmat, mortName, "_", IN$matemovethresh, "_", IN$Fdispmovethresh, "_", IN$Mdispmovethresh)
outputNames = list.dirs(CDoutDir)[-1]
dir.create(output_dir)
numloci = IN$loci
# Log file
sink(paste0(output_dir, args[1], ".log"))
# sGD inputs
minhoodsize = 12
CRSproj = "+proj=utm +zone=12 +datum=WGS84"
GD_ans = T
i=1
# Run on laptop
CDdir = "/Users/kjj/CDPOP_v1.2.21_20140723/mdata/" # path of folder containing CDPOP output
sGDdir = "/Users/kjj/Projects/MortSims/sGD2test/" # path of folder to contain sGD output
# Input files
CDoutResults = paste0(args[1], args[2]) # CDPOP output folders like "ibdb0m0d24001405192897"
CDoutDir = paste0(CDdir,CDoutResults) # path of CDPOP results
invarFile = paste0(CDdir, "invar_", args[1], ".csv") # path of CDPOP input variable files like "invar_ibdb0m0d2400.csv"
output_dir = paste0(sGDdir, CDoutResults) # path of output from each sGD run
xy_file = paste0(CDdir, "xy722crop450.csv") # path of file with points of cropped landscape
xy_all = paste0(CDdir, "xygrid722.csv") # path of file with all points in full landscape
fullPop = 722 # maximum population size in full landscape
# input variables
popMax = nrow(read.csv(xy_file)) # find maximum population size in cropped landscape
IN = read.csv(invarFile) # read input variables file
Ngen = IN$looptime
costdistance_file = paste0(CDdir,IN$matecdmat,".csv")
Nseq = IN$nthfile_seq
Nrun = 1
# Nrun = IN$mcruns
mort = as.character(IN$subpopmortperc)
mortName = substr(mort, 1, (nchar(mort)+1)/2-1)
batchName = paste0(IN$matecdmat, mortName, "_", IN$matemovethresh, "_", IN$Fdispmovethresh, "_", IN$Mdispmovethresh)
outputNames = list.dirs(CDoutDir)[-1]
dir.create(output_dir)
numloci = IN$loci
# Log file
sink(paste0(output_dir, args[1], ".log"))
# sGD inputs
minhoodsize = 12
CRSproj = "+proj=utm +zone=12 +datum=WGS84"
GD_ans = T
end = paste0("b", 0, "m", i-1, "g", Ngen)
outfilename = paste0("sGD_", end)
neighborhood_file = paste0(output_dir, "/", outfilename,"nhood.gen")
genepop_file_N = paste0(CDoutDir, "/", "batchrun", 0, "mcrun", i-1, "/", "genepopgrid", Ngen, ".gen")
genepop_file = gsub("[.]gen", "_0.gen", genepop_file_N)
gendistance_file = paste0(CDoutDir, "/", "batchrun", 0, "mcrun", i-1, "/", "Gdmatrix", Ngen, ".csv")
corrfile = paste0(output_dir, "/corr_", end, ".pdf")
# read in points
xyfile = read.csv(xy_file)
xyall = read.csv(xy_all)
Npops = length(unique(xyfile$Subpopulation))
# core is the core area that we want to keep so we can crop the edge effect off
core = abs(xyall$YCOORD) < 4700 & abs(xyall$XCOORD) < 9200 # 15x15x2=450
#   core = abs(xyall$YCOORD) < 1000 & abs(xyall$XCOORD) < 2000 # 3x3x2=18
#   core = abs(xyall$YCOORD) < 1700 & abs(xyall$XCOORD) < 3200 # 5x5x2=50
cropindivs = sum(core) # max number of individuals in cropped landscape
# coregen is the core object reformatted to apply to the right indices of genepop file
coregen = c(rep(TRUE, numloci+2), core[1:(length(core)/2)], TRUE, core[(length(core)/2+1):length(core)])
# read in genepop file
genepopfile_in = readLines(genepop_file_N)      # read in genepop file
genepopfile_lines_N  = genepopfile_in[coregen]  # subset of genepop in core area
writeLines(gsub("NANA","000000",genepopfile_lines_N), genepop_file) # rewrite genepop, subbing proper NA format
genepopfile_lines = readLines(genepop_file)[genepopfile_lines_N != "POP"] # read in genepop, removing 2 POP lines
genepopfile = read.genepop(genepop_file)        # read in cropped genepop file
# read in genetic distance matrix
GDist = read.csv(gendistance_file,header=F)     # read gen dist file
gendistances = GDist[,1:nrow(GDist)][core,core] # chop off extra blank column, crop to core area
gd_dist = as.dist(as.matrix(gendistances))      # format to dist object
# write genepop file with
header_length = 1+numloci                       #
genepop_header = genepopfile_lines[1:header_length]
genepop_data_open = genepopfile_lines[(header_length+1):(header_length+cropindivs)]
write.table(genepop_header,neighborhood_file,sep="\t",quote=F,col.names=F,row.names=F)
# find positions that are unoccupied
openpositions = grep("OPEN", genepop_data_open) # index of missing positions
numindivs = cropindivs - length(openpositions) # actual number of indivs
# read in cost distance matrix
if (length(openpositions) == 0)
{
costdistances = read.csv(costdistance_file,header=F)[core,core]
genepop_data = genepop_data_open
} else
{
costdistances = read.csv(costdistance_file,header=F)[-openpositions,-openpositions][core,core]
genepop_data = genepop_data_open[-openpositions]
}
cd_dist = as.dist(as.matrix(costdistances))
print("Calculating mantel correlation")
correlogram = mgram(gd_dist, cd_dist, breaks=c(seq(400, 20000, by=400), seq(25000,max(costdistances), by=5000)), nperm = 99, mrank = F) # "breaks" defines where sample points will be.
pdf(corrfile); plot(correlogram); dev.off() # plot to file
corrfile
corrfile = paste0(output_dir, "/corr_", end, ".pdf")
corrfile
paste0(output_dir, "/corr_", end, ".pdf")
# Run on laptop
CDdir = "/Users/kjj/CDPOP_v1.2.21_20140723/mdata/" # path of folder containing CDPOP output
sGDdir = "/Users/kjj/Projects/MortSims/sGD2test/" # path of folder to contain sGD output
# Input files
CDoutResults = paste0(args[1], args[2]) # CDPOP output folders like "ibdb0m0d24001405192897"
CDoutDir = paste0(CDdir,CDoutResults) # path of CDPOP results
invarFile = paste0(CDdir, "invar_", args[1], ".csv") # path of CDPOP input variable files like "invar_ibdb0m0d2400.csv"
output_dir = paste0(sGDdir, CDoutResults) # path of output from each sGD run
xy_file = paste0(CDdir, "xy722crop450.csv") # path of file with points of cropped landscape
xy_all = paste0(CDdir, "xygrid722.csv") # path of file with all points in full landscape
fullPop = 722 # maximum population size in full landscape
# input variables
popMax = nrow(read.csv(xy_file)) # find maximum population size in cropped landscape
IN = read.csv(invarFile) # read input variables file
Ngen = IN$looptime
costdistance_file = paste0(CDdir,IN$matecdmat,".csv")
Nseq = IN$nthfile_seq
Nrun = 1
# Nrun = IN$mcruns
mort = as.character(IN$subpopmortperc)
mortName = substr(mort, 1, (nchar(mort)+1)/2-1)
batchName = paste0(IN$matecdmat, mortName, "_", IN$matemovethresh, "_", IN$Fdispmovethresh, "_", IN$Mdispmovethresh)
outputNames = list.dirs(CDoutDir)[-1]
dir.create(output_dir)
numloci = IN$loci
# Log file
sink(paste0(output_dir, args[1], ".log"))
# sGD inputs
minhoodsize = 12
CRSproj = "+proj=utm +zone=12 +datum=WGS84"
GD_ans = T
# sGD function
paste0(output_dir, args[1], ".log")
print(paste0(output_dir, args[1], ".log"))
print(paste0(output_dir, args[1], ".log"))
# load required packages
library(diveRsity)
library(adegenet)
library(ecodist)
# How to run
# args = commandArgs(TRUE)  # Run in Rscript through shell
args = c("ibdb0m0d2400", "1407888795") # Use with regular R (first one in list, ibd with complete barrier)
# args = c("ibr83b0m0d2400", "1405196829") # Use with regular R (sim with highest cost in landscape)
# Run on monsoon
# CDdir = "/scratch/kj375/CDPOP/mdata/"  # path of folder containing CDPOP output
# sGDdir = "/scratch/kj375/sGD/results/"  # path of folder to contain sGD output
# Run on laptop
CDdir = "/Users/kjj/CDPOP_v1.2.21_20140723/mdata/" # path of folder containing CDPOP output
sGDdir = "/Users/kjj/Projects/MortSims/sGD2test/" # path of folder to contain sGD output
# Input files
CDoutResults = paste0(args[1], args[2]) # CDPOP output folders like "ibdb0m0d24001405192897"
CDoutDir = paste0(CDdir,CDoutResults) # path of CDPOP results
invarFile = paste0(CDdir, "invar_", args[1], ".csv") # path of CDPOP input variable files like "invar_ibdb0m0d2400.csv"
output_dir = paste0(sGDdir, CDoutResults) # path of output from each sGD run
xy_file = paste0(CDdir, "xy722crop450.csv") # path of file with points of cropped landscape
xy_all = paste0(CDdir, "xygrid722.csv") # path of file with all points in full landscape
fullPop = 722 # maximum population size in full landscape
# input variables
popMax = nrow(read.csv(xy_file)) # find maximum population size in cropped landscape
IN = read.csv(invarFile) # read input variables file
Ngen = IN$looptime
costdistance_file = paste0(CDdir,IN$matecdmat,".csv")
Nseq = IN$nthfile_seq
Nrun = 1
# Nrun = IN$mcruns
mort = as.character(IN$subpopmortperc)
mortName = substr(mort, 1, (nchar(mort)+1)/2-1)
batchName = paste0(IN$matecdmat, mortName, "_", IN$matemovethresh, "_", IN$Fdispmovethresh, "_", IN$Mdispmovethresh)
outputNames = list.dirs(CDoutDir)[-1]
dir.create(output_dir)
numloci = IN$loci
# Log file
sink(paste0(output_dir, args[1], ".log"))
# sGD inputs
minhoodsize = 12
CRSproj = "+proj=utm +zone=12 +datum=WGS84"
GD_ans = T
end = paste0("b", 0, "m", i-1, "g", Ngen)
outfilename = paste0("sGD_", end)
neighborhood_file = paste0(output_dir, "/", outfilename,"nhood.gen")
genepop_file_N = paste0(CDoutDir, "/", "batchrun", 0, "mcrun", i-1, "/", "genepopgrid", Ngen, ".gen")
genepop_file = gsub("[.]gen", "_0.gen", genepop_file_N)
gendistance_file = paste0(CDoutDir, "/", "batchrun", 0, "mcrun", i-1, "/", "Gdmatrix", Ngen, ".csv")
corrfile = paste0(output_dir, "/corr_", end, ".pdf")
# read in points
xyfile = read.csv(xy_file)
xyall = read.csv(xy_all)
Npops = length(unique(xyfile$Subpopulation))
# core is the core area that we want to keep so we can crop the edge effect off
core = abs(xyall$YCOORD) < 4700 & abs(xyall$XCOORD) < 9200 # 15x15x2=450
#   core = abs(xyall$YCOORD) < 1000 & abs(xyall$XCOORD) < 2000 # 3x3x2=18
#   core = abs(xyall$YCOORD) < 1700 & abs(xyall$XCOORD) < 3200 # 5x5x2=50
cropindivs = sum(core) # max number of individuals in cropped landscape
# coregen is the core object reformatted to apply to the right indices of genepop file
coregen = c(rep(TRUE, numloci+2), core[1:(length(core)/2)], TRUE, core[(length(core)/2+1):length(core)])
# read in genepop file
genepopfile_in = readLines(genepop_file_N)      # read in genepop file
genepopfile_lines_N  = genepopfile_in[coregen]  # subset of genepop in core area
writeLines(gsub("NANA","000000",genepopfile_lines_N), genepop_file) # rewrite genepop, subbing proper NA format
genepopfile_lines = readLines(genepop_file)[genepopfile_lines_N != "POP"] # read in genepop, removing 2 POP lines
genepopfile = read.genepop(genepop_file)        # read in cropped genepop file
# read in genetic distance matrix
GDist = read.csv(gendistance_file,header=F)     # read gen dist file
gendistances = GDist[,1:nrow(GDist)][core,core] # chop off extra blank column, crop to core area
gd_dist = as.dist(as.matrix(gendistances))      # format to dist object
# write genepop file with
header_length = 1+numloci                       #
genepop_header = genepopfile_lines[1:header_length]
genepop_data_open = genepopfile_lines[(header_length+1):(header_length+cropindivs)]
write.table(genepop_header,neighborhood_file,sep="\t",quote=F,col.names=F,row.names=F)
(openpositions = grep("OPEN", genepop_data_open)) # index of missing positions
print(openpositions = grep("OPEN", genepop_data_open)) # index of missing positions
numindivs = cropindivs - length(openpositions) # actual number of indivs
numindivs
mgramact = correlogram$mgram[correlogram$mgram[,2] > 0 ,] # save only points with observations that support them
ndist = which(mgramact[,3] <= 0)[1] - 1 # index of point where correlation hits zero or below
maxcostdist = as.numeric(mgramact[ndist,1]) # distance where correlation reaches zero
halfmax = maxcostdist/2 # half of maxcostdist is suggested by Shirk, keeps corr very high
write.table(halfmax, file.path(output_dir, paste0(outfilename,".txt")), row.names=F, col.names=F)
mgramact
sink(NULL)
mgramact
