cells
plot(cells %mark% (nndist(cells)/2), markscale = 1, main = "Stienen diagram")
plot(emp, main = "Empty space distances")
pd <- pairdist(cells)
plot(pd)
nn <- nndist(cells)
plot(nn)
library(spatstat)
data(cells)
plot(cells)
Fc <- Fest(cells)
Fc
par(pty = "s")
plot(Fest(cells))
plot(Fest(cells), hazard ~ r, main = "Hazard rate of F")
plot(Fest(cells), cbind(km, rs, raw, theo) ~ r)
par(pty = "s")
plot(Fest(cells), cbind(km, rs, raw, theo) ~ r)
plot(Fest(cells), cbind(km, rs, theo) ~ theo)
plot(Fest(cells), . ~ theo) # same as above. "." means "all recommended estimates"
plot(Fest(cells), . ~ theo ~ r)
plot(Fest(cells), . - theo ~ r)
plot(Fest(cells), asin(sqrt(.)) ~ r)
library(rgdal)
Gc <- Gest(cells)
library(spatstat)
Gc <- Gest(cells)
Gc
par(pty = "s")
plot(Gc)
fisher <- function(x) {asin(sqrt(x))}
plot(Gest(cells), fisher(.) ~ fisher(theo))
Gc <- Kest(cells); Gc
par(pty = "s")
plot(Kest(cells))
L <- Lest(cells)
plot(L, main = "L function")
plot(pcf(cells))
plot(K, sqrt(./pi) ~ r)
K <- Kest(cells)
plot(K, sqrt(./pi) ~ r)
L <- eval.fv(sqrt(K/pi))
L
K <- Kest(cells); K
L <- eval.fv(sqrt(K/pi)); L
g <- pcf(K)
g <- pcf(K); g
plot(allstats(cells))
data(redwood)
K <- Kest(redwood)
y <- with(K, iso - theo)
x <- with(K, r)
L <- with(K, sqrt(./pi))
with(Kest(redwood), max(abs(iso - theo)))
plot(K, sqrt(./pi) ~ r)
plot(K, cbind(iso, theo) ~ r)
K <- Kest(redwood)
L <- eval.fv(sqrt(K/pi))
pi
K1 <- Kest(redwood)
K2 <- Kest(runifpoint(redwood$n, redwood$window))
DK <- eval.fv(K1 - K2)
par(mfrow = c(1,2))
library(spatstat)
X <- rcell(nx = 15)
?rcell
plot(X)
plot(Kest(X))
X <- rpoispp(function(x,y) {300 * exp(-3 * x) } )
plot(X)
plot(Kest(X))
plot(Kest(rpoispp(50)))
E <- envelope(cells, Kest, nsim = 39, rank = 1); E
plot(E, main = "pointwise envelopes")
E <- envelope(cells, Kest, nsim = 39, rank = 1); E#
plot(E, main = "pointwise envelopes")
E <- envelope(cells, Kest, nsim = 19, rank = 1, global = TRUE)
plot(E, main = "global envelopes")
E <- envelope(cells, Lest, nsim = 19, rank = 1, global = TRUE)
plot(E, main = "global envelopes of L(r)")
data(bei)
fit <- ppm(bei, ~elev + grad, covariates = bei.extra)
E <- envelope(fit, Lest, nsim = 19, global = TRUE, correction = "border")
plot(E, main = "envelope for inhomogeneous Poisson")
plot(bei)
sim <- expression(rpoispp(100))
data(cells)
e <- expression(runifpoint(cells$n, cells$window))
E <- envelope(cells, Lest, nsim = 19, global = TRUE, simulate = e)
plot(E, main = "envelope with fixed n")
data(cells)
SimPatList <- list()
list()
for (i in 1:1000) SimPatList[[i]] <- runifpoint(cels$n)
EK <- envelope(cells, Kest, simulate = SimPatList, nsim = 1000)
for (i in 1:1000) SimPatList[[i]] <- runifpoint(cells$n)
EK <- envelope(cells, Kest, simulate = SimPatList, nsim = 1000)
Ep <- envelope(cells, pcf, simulate = SimPatList, nsim = 1000)
x <- seq(1,100)
y <- log(x)
plot(x,y)
x <- seq(1,1000)
y <- log(x)
plot(x,y)
x <- seq(1,1000)#
y <- log(x, 2)#
plot(x,y, add = TRUE)
?log
y <- log(x, base=2)
x <- seq(1,1000)#
y <- log(x, base=2)#
plot(x,y, add = TRUE)
?plot
plot(x~y, add = TRUE)
plot(y~x, add = TRUE)
plot(x,y)
x <- seq(1,1000)#
y <- log(x)#
plot(x,y)#
#
x <- seq(1,1000)#
y <- log(x, base=2)#
plot(y~x, add = TRUE)
plot(y~x)
x <- seq(1,1000)#
y <- log(x)#
plot(y~x)
x <- seq(1,1000)#
y <- log(x, base=2)#
plot(y~x, add = TRUE)
?plot
points(y~x, add = TRUE)
points(x,y, add = TRUE)
points(x,y)
x <- seq(1,1000)#
y <- log(x)#
plot(y~x)#
#
x <- seq(1,1000)#
y <- log(x, base=2)#
points(x,y)
x <- seq(1,1000)#
y <- log(x)#
plot(y~x)
y <- log(x, base=0.5)
points(x,y)
x <- seq(1,1000)#
y <- log(x)#
plot(y~x)#
#
x <- seq(1,1000)#
y <- log(x, base=0.5)#
points(x,y)
y <- log(x, base=0.5)
y
x <- seq(1,1000)#
y <- log(x,10)#
plot(y~x)#
#
#
y <- log(x,5)#
points(x,y)
x <- seq(1,1000)#
y <- log(x,5)#
plot(y~x)#
#
#
y <- log(x,10)#
points(x,y)
lines(x,y)
x <- seq(1,1000)#
y <- log(x,5)#
plot(y~x)#
#
#
y <- log(x,10)#
lines(x,y)
x <- seq(1,1000)#
y <- log(x,5)#
plot(y~x)#
#
#
y <- log(x,15)#
lines(x,y)
par(mfrow=c(1,1))
lines(x,y)
x <- seq(1,1000)#
y <- log(x,5)#
plot(y~x)#
#
y <- log(x,15)#
lines(x,y)
?plot
plot(y~x, type=l)
plot(y~x, type="l")
x <- seq(1,1000)#
y <- log(x,5)#
plot(y~x, type="l")#
#
y <- log(x,15)#
lines(x,y)
x <- seq(1,1000)#
y <- log(x,1)#
plot(y~x, type="l")#
#
y <- log(x,10)#
lines(x,y)
x <- seq(1,1000)#
y <- log(x,1)#
plot(y~x, type="l")
y <- log(x,2)
y <- log(x,1)
y <- log(x,2)
x <- seq(1,1000)#
y <- log(x,2)#
plot(y~x, type="l")#
#
y <- log(x,10)#
lines(x,y)
y <- log(x,10)
x <- seq(1,1000)#
y <- log(x,10)#
plot(y~x, type="l")#
#
y <- log(x,100)#
lines(x,y)
x <- seq(1,1000)#
y <- log(x,10)#
plot(y~x, type="l", label = "Barrier Effects on Genetic Differentiation", xlab = "generations", ylab = "genetic differentiation")#
#
y <- log(x,100)#
lines(x,y)
x <- seq(1,1000)#
y <- log(x,1000)#
plot(y~x, type="l", label = "Barrier Effects on Genetic Differentiation", xlab = "generations", ylab = "genetic differentiation")#
#
y <- log(x,10000)#
lines(x,y)
x <- seq(1,1000)#
y <- log(x,1000)#
plot(y~x, type="l", label = "Barrier Effects on Genetic Differentiation", xlab = "generations", ylab = "genetic differentiation")#
#
y <- log(x,100000)#
lines(x,y)
x <- rep(1,1000)
y <- -1/x
plot(x,y)
x <- seq(1,1000)
y <- -1/x
plot(x,y)
y <- 1/x
lines(x,y)
plot(x,y, type = "l")
x <- seq(1,1000)#
y <- -1/x#
plot(x,y, type = "l")#
y <- 1/x#
lines(x,y)
x <- seq(1,1000)
y <- -1/x + 1
plot(x,y, type = "l")
y <- log(x)
lines(x,y)
y <- log(x,10)
lines(x,y)
y <- log(x,1000)
lines(x,y)
y <- log(x,100)
lines(x,y)
y <- log(x,100)
plot(x,y, type = "l")
x <- seq(1,1000000)
y <- log(x,100)
plot(x,y, type = "l")
x <- seq(1,1000000)
y <- log(x,1000)
plot(x,y, type = "l")
y <- log(x,10000)
plot(x,y, type = "l")
y <- log(x,100000)
plot(x,y, type = "l")
b <- c(1,10,100)
y <- log(x,b)
for i in (1:length(b))#
{#
	y <- log(x,i)#
	}
b <- c(1,10,100)#
for b in (1:length(b))#
{#
	y <- log(x,b)#
	}
for b in (1:3)
?for
)
?"for"
for (b in 1:3)
{#
	y <- log(x,b)#
	}
y
x <- seq(1,10)
b <- c(1,10,100)
for (b in 1:3)
{
	y <- log(x,b)
	}
y
b <- c(1,10,100)#
for (i in b)#
{#
	y <- log(x,i)#
	}
log(1)
+
)
log(10)
log(100)
log(1,1)
x <- seq(1,10)#
b <- c(10,100,1000)#
for (i in b)#
{#
	y <- log(x,i)#
	}
y
y <- matrix(10,3)
y <- matrix(10,3)#
for (i in b)#
{#
	y[i] <- log(x,i)#
	}
y <- matrix(10,3)#
for (i in b)#
{#
	y[,i] <- log(x,i)#
	}
y
y[,1]
y[1]
y <- matrix(10,3)
y
y <- matrix(10,3)
y
y <- matrix(10,30)
y <- matrix(10,30);y
y <- matrix(0,10,3);y
y[i]
y[i,1]
x <- seq(1,10)#
b <- c(10,100,1000)#
y <- matrix(0,10,3);y#
for (i in b)#
{#
	y[,i] <- log(x,i)#
	}
y
for (i in 1:b)
{#
	y[,i] <- log(x,i)#
	}
for (i in 1:length(b))
{
	y[,i] <- log(x,i)
	}
length(b)
###required libraries#
##if you do not have the "fields" and "MBA" libraries, you need this step to install them#
install.packages("fields")#
install.packages("MBA")#
## load libraries#
library(fields)#
library(MBA)#
#
###data#
data<-matrix(c(44.9186,81.0824,46.9512,80.1061,49.187,80.7055,57.9268,80.1493,60.3659,81.34,69.3089,80.1941,78.4553,79.2459,91.8699,70.834,99.7967,55.9047,101.2195,30.9102,96.1381,17.3075,85.5691,7.4235,74.3902,4.2299,61.7886,1.8181,55.4878,1.0059,49.187,0.9811,45.3252,1.7532,37.1951,1.9181,20.3252,7.1666,8.9431,17.1612,4.2683,29.1507,4.2683,50.8042,9.5528,66.3761,18.4959,76.2539,29.065,80.6261,38.6179,80.8607,44.9186,81.0824),ncol=2,byrow=TRUE)#
stem<-matrix(c(60.3659,81.34,57.9268,80.1493,49.187,80.7055,46.9512,80.1061,44.9186,81.0824,45.5285,83.6438,47.561,88.1794,44.1057,97.2209,48.7805,99.9952,54.878,87.6176,60.3659,81.34),ncol=2,byrow=TRUE)#
eye<-matrix(c(45.935,46.4407,34.1463,44.8195,36.7886,46.9952,36.382,50.9306,32.3171,53.08,29.065,53.0672,26.0163,49.7086,28.0488,45.1892,20.3252,48.7021,20.1219,55.3942,23.5772,61.1164,30.8942,65.476,32.3171,59.7729,45.935,46.4407),ncol=2,byrow=TRUE)#
eye2<-matrix(c(58.9431,46.6888,65.4472,51.2419,71.748,56.9754,74.3902,65.4504,82.7236,59.7745,84.9593,56.4368,84.7561,48.562,77.439,45.7772,78.8618,50.5072,74.3902,53.6393,69.9186,51.6532,68.6992,47.9083,70.5285,44.9627,58.9431,46.6888),ncol=2,byrow=TRUE)#
mouth<-matrix(c(8.9431,44.7202,23.374,41.2338,30.0813,22.7562,38.2114,38.5363,65.0407,38.445,73.374,22.533,80.2846,40.8673,96.9512,44.673,93.4959,31.8641,84.1463,18.8352,66.2602,9.7097,61.9919,16.1889,59.3496,8.3045,45.5285,8.447,42.8862,16.1137,38.2114,9.4024,22.7642,17.4125,11.9919,31.7401,8.9431,44.7202),ncol=2,byrow=TRUE)#
stars<-matrix(c(sample(seq(0,100),80),sample(seq(20,100),80,replace=TRUE)),ncol=2)#
#
###plot#
par(bg = "black")#
par(mar=c(5,2,4,2))+0.1#
plot(data,type="n",xlim=c(0,100),ylim=c(0,100),xaxt="n",yaxt="n",xlab="",ylab="",axes=FALSE)#
symbols(x=stars[,1],y=stars[,2],circles=rep(0.001,nrow(stars)),inches=0.015,bg="white",xlim=c(0,100),ylim=c(0,100))#
col<-runif(nrow(data),min=4,max=7)#
datmb<-mba.surf(matrix(cbind(data,col),ncol=3),no.X=200,no.Y=200,extend=FALSE)#
image(datmb$xyz,zlim=c(0,10),col=heat.colors(40),add=TRUE)#
polygon(stem,col="darkgreen")#
polygon(eye,col="yellow")#
polygon(eye2,col="yellow")#
polygon(mouth,col="yellow")#
points(data,type="l")#
mtext("Happy Halloween",side=3,col="green3",cex=3.5,font=4)#
mtext("from the EEB and Flow",side=1,col="green3",cex=2.5,font=4)
require(XML)#
require(tm)#
require(wordcloud)#
require(RColorBrewer)#
u = "http://cran.r-project.org/web/packages/available_packages_by_date.html"#
t = readHTMLTable(u)[[1]]#
ap.corpus <- Corpus(DataframeSource(data.frame(as.character(t[,3]))))#
ap.corpus <- tm_map(ap.corpus, removePunctuation)#
ap.corpus <- tm_map(ap.corpus, tolower)#
ap.corpus <- tm_map(ap.corpus, function(x) removeWords(x, stopwords("english")))#
ap.tdm <- TermDocumentMatrix(ap.corpus)#
ap.m <- as.matrix(ap.tdm)#
ap.v <- sort(rowSums(ap.m),decreasing=TRUE)#
ap.d <- data.frame(word = names(ap.v),freq=ap.v)#
table(ap.d$freq)#
pal2 <- brewer.pal(8,"Dark2")#
png("wordcloud_packages.png", width=1280,height=800)#
wordcloud(ap.d$word,ap.d$freq, scale=c(8,.2),min.freq=3,#
max.words=Inf, random.order=FALSE, rot.per=.15, colors=pal2)#
dev.off()
™™™
require(XML)#
require(tm)#
require(wordcloud)#
require(RColorBrewer)#
u = "http://cran.r-project.org/web/packages/available_packages_by_date.html"#
t = readHTMLTable(u)[[1]]#
ap.corpus <- Corpus(DataframeSource(data.frame(as.character(t[,3]))))#
ap.corpus <- tm_map(ap.corpus, removePunctuation)#
ap.corpus <- tm_map(ap.corpus, tolower)#
ap.corpus <- tm_map(ap.corpus, function(x) removeWords(x, stopwords("english")))#
ap.tdm <- TermDocumentMatrix(ap.corpus)#
ap.m <- as.matrix(ap.tdm)#
ap.v <- sort(rowSums(ap.m),decreasing=TRUE)#
ap.d <- data.frame(word = names(ap.v),freq=ap.v)#
table(ap.d$freq)#
pal2 <- brewer.pal(8,"Dark2")#
png("wordcloud_packages.png", width=1280,height=800)#
wordcloud(ap.d$word,ap.d$freq, scale=c(8,.2),min.freq=3,#
max.words=Inf, random.order=FALSE, rot.per=.15, colors=pal2)#
dev.off()
require(XML)#
require(tm)#
require(wordcloud)#
require(RColorBrewer)
u = "http://cran.r-project.org/web/packages/available_packages_by_date.html"#
t = readHTMLTable(u)[[1]]#
ap.corpus <- Corpus(DataframeSource(data.frame(as.character(t[,3]))))#
ap.corpus <- tm_map(ap.corpus, removePunctuation)#
ap.corpus <- tm_map(ap.corpus, tolower)#
ap.corpus <- tm_map(ap.corpus, function(x) removeWords(x, stopwords("english")))#
ap.tdm <- TermDocumentMatrix(ap.corpus)#
ap.m <- as.matrix(ap.tdm)#
ap.v <- sort(rowSums(ap.m),decreasing=TRUE)#
ap.d <- data.frame(word = names(ap.v),freq=ap.v)#
table(ap.d$freq)#
pal2 <- brewer.pal(8,"Dark2")#
png("wordcloud_packages.png", width=1280,height=800)#
wordcloud(ap.d$word,ap.d$freq, scale=c(8,.2),min.freq=3,#
max.words=Inf, random.order=FALSE, rot.per=.15, colors=pal2)#
dev.off()
library(picante)#
#
# Picante manual#
#vignette("picante-intro")#
#
# dataset#
setwd("/Users/kjj/Documents/Phylomeet/Analysis/arcot_gw")#
#
# Cottonwood community with all arthropods, 2000-2003#
comm <- data.matrix(read.table("arcot_gw.txt"))#
#
# load nexus files for phylogenies#
phy.ultra.full <- read.nexus("ultra.nex")#
phy.equal.full <- read.nexus("equal.nex")#
#
# prune phylogenies to fit community data#
phy.ultra <- prune.sample(comm,phy.ultra.full)#
phy.equal <- prune.sample(comm,phy.equal.full)#
#
# Form distance matrix for each topology#
phydist.ultra <- cophenetic(phy.ultra)#
phydist.equal <- cophenetic(phy.equal)#
#
# plot#
par(mfrow=c(1,2))#
plot(phy.ultra, cex=0.25) #
title(main = "Ultrametric Branch Lengths")#
#
plot(phy.equal, cex=0.25) #
title(main = "Equal Branch Lengths")
# getting set up#
#install.packages("picante", dependencies = TRUE)#
library(picante)#
#
# Picante manual#
#vignette("picante-intro")#
#
# dataset#
setwd("/Users/kjj/Documents/Phylomeet/Analysis/arcot_gw_insects")#
#
# Cottonwood community with all arthropods, 2000-2003#
comm <- data.matrix(read.table("arcot_gw_insects.txt"))#
#
# load nexus files for phylogenies#
phy.ultra.full <- read.nexus("ultra.nex")#
phy.equal.full <- read.nexus("equal.nex")#
#
# prune phylogenies to fit community data#
phy.ultra <- prune.sample(comm,phy.ultra.full)#
phy.equal <- prune.sample(comm,phy.equal.full)#
#
# Form distance matrix for each topology#
phydist.ultra <- cophenetic(phy.ultra)#
phydist.equal <- cophenetic(phy.equal)#
#
# plot#
par(mfrow=c(1,2))#
plot(phy.ultra, cex=0.25) #
title(main = "Ultrametric Branch Lengths")#
#
plot(phy.equal, cex=0.25) #
title(main = "Equal Branch Lengths")
setwd("/Users/kjj/Documents/Phylomeet/Analysis/insects_only")
setwd("/Users/kjj/Documents/Phylomeet/Analysis/insects_only")
setwd("/Users/kjj/Documents/Phylomeet/Analysis/insects_only")
setwd("/Users/kjj/Documents/Phylomeet/Analysis/insects_only")
library(picante)
setwd("/Users/kjj/Documents/Phylomeet/Analysis/insects_only")
setwd("/Users/kjj/Documents/Phylomeet/Analysis/arcot_gw/insects_only")
# Cottonwood community with all arthropods, common garden, 2000-2003#
comm <- data.matrix(read.table("arcot_gw_insects.txt"))#
#
# load nexus files for phylogenies#
phy.ultra.full <- read.nexus("ultra.nex")#
phy.equal.full <- read.nexus("equal.nex")#
#
# prune phylogenies to fit community data#
phy.ultra <- prune.sample(comm,phy.ultra.full)#
phy.equal <- prune.sample(comm,phy.equal.full)#
#
# Form distance matrix for each topology#
phydist.ultra <- cophenetic(phy.ultra)#
phydist.equal <- cophenetic(phy.equal)#
#
# plot#
par(mfrow=c(1,2))#
plot(phy.ultra, cex=0.25) #
title(main = "Ultrametric Branch Lengths")#
#
plot(phy.equal, cex=0.25) #
title(main = "Equal Branch Lengths")
out.ses.mpd <- ses.mpd(comm, phydist.equal, null.model = "richness", abundance.weighted = TRUE, runs = 999)#
write.csv(out.ses.mpd,"nri_equal_rich.csv")#
#
# ultrametric#
out.ses.mpd <- ses.mpd(comm, phydist.ultra, null.model = "richness", abundance.weighted = TRUE, runs = 999)#
write.csv(out.ses.mpd,"nri_ultra_rich.csv")#
#
##################################
# NTI #
##################################
# NTI - abundance weighted#
# equal #
out.ses.mntd <- ses.mntd(comm, phydist.equal, null.model = "richness", abundance.weighted = TRUE, runs = 999)#
write.csv(out.ses.mntd,"nti_equal_rich.csv")#
#
# ultrametric#
out.ses.mntd <- ses.mntd(comm, phydist.ultra, null.model = "richness", abundance.weighted = TRUE, runs = 999)#
write.csv(out.ses.mntd,"nti_ultra_rich.csv")
