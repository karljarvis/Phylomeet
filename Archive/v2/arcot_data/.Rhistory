if (mgram.gentoland.dist.ans == 'Y')
{
# Storage vectors
gentoland.dist.mg.mean <- c()
gentoland.dist.mg.sd <- c()
# Read in
filename <- "MgramMCgentoland.dist.csv"
mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)
# New filename to write to.
filename <- "MgramMCgentoland.dist.analysis.csv"
# Loop through the length of the mgram vectors
for (i in 1:((length(mgmcoutput)/3)-1))
{
# Create temp variable
meantemp <- c()
# Loop through the number of samples to average over and grab and append
for (j in 1:(mcrunno*batchno))
{
meantemp <- append(meantemp,mgmcoutput[j,(i+1)])
}
# Get the mean and sd
gentoland.dist.mg.mean <- append(gentoland.dist.mg.mean,mean(meantemp))
gentoland.dist.mg.sd <- append(gentoland.dist.mg.sd,sd(meantemp))
}
# Calculate error and left and right error bars
gentoland.dist.mg.error <- qnorm(0.975)*gentoland.dist.mg.sd/sqrt((mcrunno*batchno))
gentoland.dist.mg.left <- gentoland.dist.mg.mean - gentoland.dist.mg.error
gentoland.dist.mg.right <- gentoland.dist.mg.mean + gentoland.dist.mg.error
# Write information back to file
write.table(t(data.frame(gentoland.dist.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",
row.names=TRUE,col.names=FALSE)
write.table(t(data.frame(gentoland.dist.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",
row.names=TRUE,col.names=FALSE)
write.table(t(data.frame(gentoland.dist.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",
row.names=TRUE,col.names=FALSE)
write.table(t(data.frame(gentoland.dist.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",
row.names=TRUE,col.names=FALSE)
write.table(t(data.frame(gentoland.dist.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",
row.names=TRUE,col.names=FALSE)
# Store lag intervals for plotting
gentoland.dist.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))
}
}
# Partial genetic ~ landscape|barrier
if (gentoland.barr.ans=='Y')
{
# Storage vectors
gentoland.barr.mr.mean <- c()
gentoland.barr.mr.sd <- c()
# Read in
filename <- "MRMCgentoland.barr.csv"
mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)
# New filename to write to.
filename <- "MRMCgentoland.barr.analysis.csv"
# Loop through the length of the mantel r vectors
for (i in 1:((length(mrmcoutput)/4)-1))
{
# Create temp variable
meantemp <- c()
# Loop through the number of samples to average over and grab and append
for (j in 1:(mcrunno*batchno))
{
meantemp <- append(meantemp,mrmcoutput[j,(i+1)])
}
# Get the mean and sd
gentoland.barr.mr.mean <- append(gentoland.barr.mr.mean,mean(meantemp))
gentoland.barr.mr.sd <- append(gentoland.barr.mr.sd,sd(meantemp))
}
# Calculate error and left and right error bars
gentoland.barr.mr.error <- qnorm(0.975)*gentoland.barr.mr.sd/sqrt((mcrunno*batchno))
gentoland.barr.mr.left <- gentoland.barr.mr.mean - gentoland.barr.mr.error
gentoland.barr.mr.right <- gentoland.barr.mr.mean + gentoland.barr.mr.error
# Write information back to file
write.table(t(data.frame(gentoland.barr.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",
row.names=TRUE,col.names=FALSE)
write.table(t(data.frame(gentoland.barr.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",
row.names=TRUE,col.names=FALSE)
write.table(t(data.frame(gentoland.barr.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",
row.names=TRUE,col.names=FALSE)
write.table(t(data.frame(gentoland.barr.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",
row.names=TRUE,col.names=FALSE)
write.table(t(data.frame(gentoland.barr.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",
row.names=TRUE,col.names=FALSE)
# Mantel correlogram averaging...
if (mgram.gentoland.barr.ans == 'Y')
{
# Storage vectors
gentoland.barr.mg.mean <- c()
gentoland.barr.mg.sd <- c()
# Read in
filename <- "MgramMCgentoland.barr.csv"
mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)
# New filename to write to.
filename <- "MgramMCgentoland.barr.analysis.csv"
# Loop through the length of the mgram vectors
for (i in 1:((length(mgmcoutput)/3)-1))
{
# Create temp variable
meantemp <- c()
# Loop through the number of samples to average over and grab and append
for (j in 1:(mcrunno*batchno))
{
meantemp <- append(meantemp,mgmcoutput[j,(i+1)])
}
# Get the mean and sd
gentoland.barr.mg.mean <- append(gentoland.barr.mg.mean,mean(meantemp))
gentoland.barr.mg.sd <- append(gentoland.barr.mg.sd,sd(meantemp))
}
# Calculate error and left and right error bars
gentoland.barr.mg.error <- qnorm(0.975)*gentoland.barr.mg.sd/sqrt((mcrunno*batchno))
gentoland.barr.mg.left <- gentoland.barr.mg.mean - gentoland.barr.mg.error
gentoland.barr.mg.right <- gentoland.barr.mg.mean + gentoland.barr.mg.error
# Write information back to file
write.table(t(data.frame(gentoland.barr.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",
row.names=TRUE,col.names=FALSE)
write.table(t(data.frame(gentoland.barr.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",
row.names=TRUE,col.names=FALSE)
write.table(t(data.frame(gentoland.barr.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",
row.names=TRUE,col.names=FALSE)
write.table(t(data.frame(gentoland.barr.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",
row.names=TRUE,col.names=FALSE)
write.table(t(data.frame(gentoland.barr.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",
row.names=TRUE,col.names=FALSE)
# Store lag intervals for plotting
gentoland.barr.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))
}
}
#Return values
list(gentodist.mr.mean=gentodist.mr.mean,
gentodist.mr.left=gentodist.mr.left,
gentodist.mr.right=gentodist.mr.right,
gentodist.mg.mean=gentodist.mg.mean,
gentodist.mg.left=gentodist.mg.left,
gentodist.mg.right=gentodist.mg.right,
gentodist.mg.lag=gentodist.mg.lag,
gentobarr.mr.mean=gentobarr.mr.mean,
gentobarr.mr.left=gentobarr.mr.left,
gentobarr.mr.right=gentobarr.mr.right,
gentobarr.mg.mean=gentobarr.mg.mean,
gentobarr.mg.left=gentobarr.mg.left,
gentobarr.mg.right=gentobarr.mg.right,
gentobarr.mg.lag=gentobarr.mg.lag,
gentoland.mr.mean=gentoland.mr.mean,
gentoland.mr.left=gentoland.mr.left,
gentoland.mr.right=gentoland.mr.right,
gentoland.mg.mean=gentoland.mg.mean,
gentoland.mg.left=gentoland.mg.left,
gentoland.mg.right=gentoland.mg.right,
gentoland.mg.lag=gentoland.mg.lag,
gentodist.barr.mr.mean=gentodist.barr.mr.mean,
gentodist.barr.mr.left=gentodist.barr.mr.left,
gentodist.barr.mr.right=gentodist.barr.mr.right,
gentodist.barr.mg.mean=gentodist.barr.mg.mean,
gentodist.barr.mg.left=gentodist.barr.mg.left,
gentodist.barr.mg.right=gentodist.barr.mg.right,
gentodist.barr.mg.lag=gentodist.barr.mg.lag,
gentobarr.dist.mr.mean=gentobarr.dist.mr.mean,
gentobarr.dist.mr.left=gentobarr.dist.mr.left,
gentobarr.dist.mr.right=gentobarr.dist.mr.right,
gentobarr.dist.mg.mean=gentobarr.dist.mg.mean,
gentobarr.dist.mg.left=gentobarr.dist.mg.left,
gentobarr.dist.mg.right=gentobarr.dist.mg.right,
gentobarr.dist.mg.lag=gentobarr.dist.mg.lag,
gentoland.barr.mr.mean=gentoland.barr.mr.mean,
gentoland.barr.mr.left=gentoland.barr.mr.left,
gentoland.barr.mr.right=gentoland.barr.mr.right,
gentoland.barr.mg.mean=gentoland.barr.mg.mean,
gentoland.barr.mg.left=gentoland.barr.mg.left,
gentoland.barr.mg.right=gentoland.barr.mg.right,
gentoland.barr.mg.lag=gentoland.barr.mg.lag,
gentodist.land.mr.mean=gentodist.land.mr.mean,
gentodist.land.mr.left=gentodist.land.mr.left,
gentodist.land.mr.right=gentodist.land.mr.right,
gentodist.land.mg.mean=gentodist.land.mg.mean,
gentodist.land.mg.left=gentodist.land.mg.left,
gentodist.land.mg.right=gentodist.land.mg.right,
gentodist.land.mg.lag=gentodist.land.mg.lag,
gentobarr.land.mr.mean=gentobarr.land.mr.mean,
gentobarr.land.mr.left=gentobarr.land.mr.left,
gentobarr.land.mr.right=gentobarr.land.mr.right,
gentobarr.land.mg.mean=gentobarr.land.mg.mean,
gentobarr.land.mg.left=gentobarr.land.mg.left,
gentobarr.land.mg.right=gentobarr.land.mg.right,
gentobarr.land.mg.lag=gentobarr.land.mg.lag,
gentoland.dist.mr.mean=gentoland.dist.mr.mean,
gentoland.dist.mr.left=gentoland.dist.mr.left,
gentoland.dist.mr.right=gentoland.dist.mr.right,
gentoland.dist.mg.mean=gentoland.dist.mg.mean,
gentoland.dist.mg.left=gentoland.dist.mg.left,
gentoland.dist.mg.right=gentoland.dist.mg.right,
gentoland.dist.mg.lag=gentoland.dist.mg.lag)
}
###########################################################################
## Erin L. Landguth
## MRMCRun.R
##   Project Description: an example script to run  the function mantel.mc
## Libraries Needed:
##	1. Spatial
##	2. Ecodist
## Project Input:
##	1. Function parameter inputs...
##	2. MRMCFun.R must be loaded into workspace before this script is ran.
## Project Steps:
##	1. User input function parameters
##	2. mantel.mc function run call
##	3. mantel.mc.analysis function run call
##	4. Some plotting commands for mantel.mc.analysis returned values
## Project Date: December 10, 2008
###########################################################################
###################
## Load Library
###################
library(spatial)
library(ecodist)
###############################
## 1. Function parameter inputs
###############################
batchstring <- '1339566994'
# Specify the number of batch runs used
batchno <- 1
# Specify the number of Monte Carlo runs used
mcrunno <- 1
# The total individuals in each file
N <- 1000
# Total runtime length
looptime <- 1
# Uncomment one of these styles for nthfile analysis
#nthfile <- 0	# The incremental nthfile, e.g. 0,5,10,15...
nthfile <- c(0,1,20,50,100)
#nthfile <- c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,50,60,70,80,90,100,150,200,250,299)
#nthfile <- seq(0,looptime-1,1)
# Genetic distance file location and names and number of
gddir <- "~/Documents/_Sim_Mort/results_20120612/"
gdfilename <- 'Gdmatrix'
# Barrier distance file location and names and answer if you want to test barrier model
barrdir <- "~/Documents/_Sim_Mort/results_20120612/"
barrfilename <- c("CDpanbar01.csv")
barrans <- 'Y'
# Euclidean distance file location and names and answer if you want to test distanc model
distdir <- "~/Documents/_Sim_Mort/results_20120612/"
distfilename <- c("CDdisbar01.csv")
distans <- 'Y'
# Landscape distance file location and names and answer if you want to test landscape model
landdir <- "~/Documents/_Sim_Mort/results_20120508_sstest/mantels/"
landfilename <- c("CDr20_1b1.csv")
landans <- 'Y'
# Now specify the sample style to use:
#	known = a known set of indeces to be read from a file
#	random = a random n draw from the total
#	all = run analysis on all points
samplestyle <- 'all'
# If samplestyle = 'random'
sampleno <- 200
# Else if samplestyle = 'known'
sampledir <- "C:/CDGridModel/ModelRuns/SelectedIndexesForNoEdge/xy1248_noedge.csv"
# Here specify Mantel Test run information 9 of them:
#	Y or N to the specific simple and partial Mantel Tests
#	Define number of permutations for significance test
gentodist.ans <- 'Y'			# Simple genetic ~ distancee
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier
gentoland.ans <- 'Y'			# Simple genetic ~ landscape
gentodist.barr.ans <- 'N'		# Partial genetic ~ distance|barrier
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape
gentobarr.dist.ans <- 'N'		# Partial genetic ~ barrier|distance
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier
mperms <- 199				# Mantel permutations
# Here specifiy Mantel Correlogram to run
#	Y or N to the specific Mantel correlogram
#	Define year to run test at
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier
mgramruntime <- 100
###################
## Function code
###################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,
distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,
gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,
gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,
mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,
mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)
results <- mantel.mc.analysis(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,
distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,
gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,
gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,
mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,
mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)
###################################################
## Plot returned information from mantel.mc.anlysis
###################################################
# If nthfile has a length of 1, then create a vector
if (length(nthfile) == 1)
{
nthfile <- seq(0,looptime,as.integer(nthfile))
}
# Simple Mantel genetic~distance
if (gentodist.ans=='Y')
{
dev.new()
time <- seq(1,length(nthfile),1)
plot(time,results$gentodist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)
lines(time,results$gentodist.mr.left,lty="dashed")
lines(time,results$gentodist.mr.right,lty="dashed")
title("Mantel Test (genetic~distance)")
axis(1,1:(length(nthfile)),nthfile)
}
# Simple Mantel genetic~barrier
if (gentobarr.ans=='Y')
{
dev.new()
time <- seq(1,length(nthfile),1)
plot(time,results$gentobarr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)
lines(time,results$gentobarr.mr.left,lty="dashed")
lines(time,results$gentobarr.mr.right,lty="dashed")
title("Mantel Test (genetic~barrier)")
axis(1,1:(length(nthfile)),nthfile)
}
# Simple Mantel genetic~landscape
if (gentoland.ans=='Y')
{
dev.new()
time <- seq(1,length(nthfile),1)
plot(time,results$gentoland.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)
lines(time,results$gentoland.mr.left,lty="dashed")
lines(time,results$gentoland.mr.right,lty="dashed")
title("Mantel Test (genetic~landscape)")
axis(1,1:(length(nthfile)),nthfile)
}
# Simple Mantel genetic~distance|barrier
if (gentodist.barr.ans=='Y')
{
dev.new()
time <- seq(1,length(nthfile),1)
plot(time,results$gentodist.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)
lines(time,results$gentodist.barr.mr.left,lty="dashed")
lines(time,results$gentodist.barr.mr.right,lty="dashed")
title("Mantel Test (genetic~distance|barrier)")
axis(1,1:(length(nthfile)),nthfile)
}
# Simple Mantel genetic~distance|landscape
if (gentodist.land.ans=='Y')
{
dev.new()
time <- seq(1,length(nthfile),1)
plot(time,results$gentodist.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)
lines(time,results$gentodist.land.mr.left,lty="dashed")
lines(time,results$gentodist.land.mr.right,lty="dashed")
title("Mantel Test (genetic~distance|landscape)")
axis(1,1:(length(nthfile)),nthfile)
}
# Simple Mantel genetic~barrier|distance
if (gentobarr.dist.ans=='Y')
{
dev.new()
time <- seq(1,length(nthfile),1)
plot(time,results$gentobarr.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)
lines(time,results$gentobarr.dist.mr.left,lty="dashed")
lines(time,results$gentobarr.dist.mr.right,lty="dashed")
title("Mantel Test (genetic~barrier|distance)")
axis(1,1:(length(nthfile)),nthfile)
}
# Simple Mantel genetic~barrier|landscape
if (gentobarr.land.ans=='Y')
{
dev.new()
time <- seq(1,length(nthfile),1)
plot(time,results$gentobarr.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)
lines(time,results$gentobarr.land.mr.left,lty="dashed")
lines(time,results$gentobarr.land.mr.right,lty="dashed")
title("Mantel Test (genetic~barrier|landscape)")
axis(1,1:(length(nthfile)),nthfile)
}
# Simple Mantel genetic~landscape|barrier
if (gentoland.barr.ans=='Y')
{
dev.new()
time <- seq(1,length(nthfile),1)
plot(time,results$gentoland.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)
lines(time,results$gentoland.barr.mr.left,lty="dashed")
lines(time,results$gentoland.barr.mr.right,lty="dashed")
title("Mantel Test (genetic~landscape|barrier)")
axis(1,1:(length(nthfile)),nthfile)
}
# Simple Mantel genetic~landscape|distance
if (gentoland.dist.ans=='Y')
{
dev.new()
time <- seq(1,length(nthfile),1)
plot(time,results$gentoland.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)
lines(time,results$gentoland.dist.mr.left,lty="dashed")
lines(time,results$gentoland.dist.mr.right,lty="dashed")
title("Mantel Test (genetic~landscape|distance)")
axis(1,1:(length(nthfile)),nthfile)
}
# Simple Mgram genetic~distance
if (mgram.gentodist.ans=='Y')
{
dev.new()
plot(results$gentodist.mg.lag,results$gentodist.mg.mean,type="b",ylab="Mantel r",xlab="Distance",las=1)
lines(results$gentodist.mg.lag,results$gentodist.mg.left,lty="dashed")
lines(results$gentodist.mg.lag,results$gentodist.mg.right,lty="dashed")
title("Mantel Test (genetic~distance)")
}
# Simple Mgram genetic~barrier
if (mgram.gentobarr.ans=='Y')
{
dev.new()
plot(results$gentobarr.mg.lag,results$gentobarr.mg.mean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)
lines(results$gentobarr.mg.lag,results$gentobarr.mg.left,lty="dashed")
lines(results$gentobarr.mg.lag,results$gentobarr.mg.right,lty="dashed")
title("Mantel Correlogram (genetic~barrier)")
}
# Simple Mgram genetic~landscape
if (mgram.gentoland.ans=='Y')
{
dev.new()
lag <- results$gentoland.mg.lag
mgmean <- results$gentoland.mg.mean
mgright <- results$gentoland.mg.right
mgleft <- results$gentoland.mg.left
plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)
lines(lag,mgleft,lty="dashed")
lines(lag,mgright,lty="dashed")
title("Mantel Correlogram (genetic~landscape)")
}
# Simple Mgram genetic~distance|barrier
if (mgram.gentodist.barr.ans=='Y')
{
dev.new()
lag <- results$gentodist.barr.mg.lag
mgmean <- results$gentodist.barr.mg.mean
mgright <- results$gentodist.barr.mg.right
mgleft <- results$gentodist.barr.mg.left
plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)
lines(lag,mgleft,lty="dashed")
lines(lag,mgright,lty="dashed")
title("Mantel Correlogram (genetic~distance|barrier)")
}
# Simple Mgram genetic~distance|landscape
if (mgram.gentodist.land.ans=='Y')
{
dev.new()
lag <- results$gentodist.land.mg.lag
mgmean <- results$gentodist.land.mg.mean
mgright <- results$gentodist.land.mg.right
mgleft <- results$gentodist.land.mg.left
plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)
lines(lag,mgleft,lty="dashed")
lines(lag,mgright,lty="dashed")
title("Mantel Correlogram (genetic~distance|landscape)")
}
# Simple Mgram genetic~barrier|distance
if (mgram.gentobarr.dist.ans=='Y')
{
dev.new()
lag <- results$gentobarr.dist.mg.lag
mgmean <- results$gentobarr.dist.mg.mean
mgright <- results$gentobarr.dist.mg.right
mgleft <- results$gentobarr.dist.mg.left
plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)
lines(lag,mgleft,lty="dashed")
lines(lag,mgright,lty="dashed")
title("Mantel Correlogram (genetic~barrier|distance)")
}
# Simple Mgram genetic~barrier|landscape
if (mgram.gentobarr.land.ans=='Y')
{
dev.new()
lag <- results$gentobarr.land.mg.lag
mgmean <- results$gentobarr.land.mg.mean
mgright <- results$gentobarr.land.mg.right
mgleft <- results$gentobarr.land.mg.left
plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)
lines(lag,mgleft,lty="dashed")
lines(lag,mgright,lty="dashed")
title("Mantel Correlogram (genetic~barrier|landscape)")
}
# Simple Mgram genetic~landscape|distance
if (mgram.gentoland.dist.ans=='Y')
{
dev.new()
lag <- results$gentoland.dist.mg.lag
mgmean <- results$gentoland.dist.mg.mean
mgright <- results$gentoland.dist.mg.right
mgleft <- results$gentoland.dist.mg.left
plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)
lines(lag,mgleft,lty="dashed")
lines(lag,mgright,lty="dashed")
title("Mantel Correlogram (genetic~landscape|distance)")
}
# Simple Mgram genetic~landscape|barrier
if (mgram.gentoland.barr.ans=='Y')
{
dev.new()
lag <- results$gentoland.barr.mg.lag
mgmean <- results$gentoland.barr.mg.mean
mgright <- results$gentoland.barr.mg.right
mgleft <- results$gentoland.barr.mg.left
plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)
lines(lag,mgleft,lty="dashed")
lines(lag,mgright,lty="dashed")
title("Mantel Correlogram (genetic~landscape|barrier)")
}
