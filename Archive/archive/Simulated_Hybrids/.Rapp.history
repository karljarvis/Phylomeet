Summary$x123[1,1]
Summary$x1234[1,1]
Summary$x12345[1,1]
x<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])
x
plot(c(1:3), x, type="b", main="AIC N=100",
plot(c(1:3), x, type="b", main="AIC N=100", axes=FALSE, xlab="", ylab="x1", pch="0")
)
plot(c(1:3), x, type="b", main="AIC N=100", axes=FALSE, xlab="", ylab="x1", pch="0")
plot(x,c(1:5), type="b", main="AIC N=100", axes=FALSE, xlab="", ylab="x1")
plot(c(1:5),x, type="b", main="AIC N=100", axes=FALSE, xlab="", ylab="x1")
plot(c(1:5),x, type="b", main="AIC N=100", axes=FALSE, xlab="", ylab="x1")            #
#
for(i in 1:30)#
{#
	x <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1])#
	points(c(1:5),x, type="b")#
}
plot(c(1:5),x, type="b", main="AIC N=100", xlab="", ylab="x1")            #
#
for(i in 1:30)#
{#
	x <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1])#
	points(c(1:5),x, type="b")#
}
plot(c(1:5),x, type="b", main="AIC N=100", xlab="", ylab="x1")
x=NA#
for(i in 1:30)#
{#
    plot(c(1:5),x, type="b", main="AIC N=100", xlab="", ylab="x1")#
	x <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1])#
	points(c(1:5),x, type="b")#
}
x<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5),x, type="b", main="AIC N=100", xlab="", ylab="x1")#
x=NA#
for(i in 1:30)#
{#
	x <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1])#
	points(c(1:5),x, type="b")#
}
x
x<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5),x, type="b", main="AIC N=100", xlab="", ylab="x1")#
x=NA#
for(i in 1:30)#
{#
	x <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1])#
	points(c(1:5),x, type="b")#
}
x<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5),x, type="b", main="AIC N=100", xlab="", ylab="x1")#
#
pts=NA#
for(i in 1:30)#
{#
	pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1])#
	points(c(1:5), pts, type="b")#
}
x<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5),x, type="b", main="AIC N=100", xlab="", ylab="x1")
plot(c(1:5),x, type="b", main="AIC N=100", xlab="", ylab="x1", ylim=c(0,220))
x<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5),x, type="b", main="AIC N=100", xlab="", ylab="x1", ylim=c(0,220))#
#
pts=NA#
for(i in 1:30)#
{#
	pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1])#
	points(c(1:5), pts, type="b")#
}
x<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5),x, type="b", main="AIC N=100", xlab="", ylab="x1", ylim=c(0,220))#
#
for(i in 1:10)#
{#
	pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1])#
	points(c(1:5), pts, type="b")#
}#
for(i in 11:20)#
{#
	pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1])#
	points(c(1:5), pts, type="b", col="red")#
}#
for(i in 21:30)#
{#
	pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1])#
	points(c(1:5), pts, type="b", col="blue")#
}
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="x1", ylim=c(0,220))#
#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="red")}#
#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="blue")}
dev.new()              #
par(mfrow=c(1,2))       #
#
x<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5),x, type="b", main="AIC node-based", xlab="", ylab="x1", ylim=c(0,220))#
#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="red")}#
#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="blue")}#
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="x1", ylim=c(0,220))#
#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="red")}#
#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="blue")}
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="x1", ylim=c(0,220), pch="0")#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", pch="i")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="red")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="blue")}
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="x1", ylim=c(0,220), pch="0")#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", pch=i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="red")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="blue")}
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="x1", ylim=c(0,220))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="x1", ylim=c(0,220))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}
dev.new()              #
par(mfrow=c(1,2))       #
#
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}
dev.new()              #
par(mfrow=c(1,3))       #
#
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5),x, type="b", main="AIC node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}
Summary
dev.new()              #
par(mfrow=c(3,3))       #
#
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5),x, type="b", main="AICd dist-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5),x, type="b", main="AICcd dist-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5),x, type="b", main="AIC dist-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5),x, type="b", main="AICc dist-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5),x, type="b", main="BIC node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5),x, type="b", main="BIC dist-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5),x, type="b", main="BICd dist-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}
Summary[,5]
Summary$x1[,5]
dev.new()              #
par(mfrow=c(3,3))       #
#
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5),x, type="b", main="AICd dist-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5),x, type="b", main="AICcd dist-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5),x, type="b", main="AIC dist-based", xlab="", ylab="x1", ylim=c(0,1e5))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5),x, type="b", main="AICc dist-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5),x, type="b", main="BIC node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5),x, type="b", main="BIC dist-based", xlab="", ylab="x1", ylim=c(0,1e5))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5),x, type="b", main="BICd dist-based", xlab="", ylab="x1", ylim=c(0,1e5))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}
dev.new()              #
par(mfrow=c(3,3))       #
#
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5),x, type="b", main="AICd dist-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5),x, type="b", main="AICcd dist-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5),x, type="b", main="AIC dist-based", xlab="", ylab="x1", ylim=c(0,1e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5),x, type="b", main="AICc dist-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5),x, type="b", main="BIC node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5),x, type="b", main="BIC dist-based", xlab="", ylab="x1", ylim=c(0,1e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5),x, type="b", main="BICd dist-based", xlab="", ylab="x1", ylim=c(0,1e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}
dev.new()              #
par(mfrow=c(3,3))       #
#
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5),x, type="b", main="AICd dist-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5),x, type="b", main="AICcd dist-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5),x, type="b", main="AIC dist-based", xlab="", ylab="x1", ylim=c(0,2e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5),x, type="b", main="AICc dist-based", xlab="", ylab="x1", ylim=c(0,2e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5),x, type="b", main="BIC node-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5),x, type="b", main="BIC dist-based", xlab="", ylab="x1", ylim=c(0,2e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5),x, type="b", main="BICd dist-based", xlab="", ylab="x1", ylim=c(0,225))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}
dev.new()              #
par(mfrow=c(3,3))       #
#
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="x1", ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="x1", ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5),x, type="b", main="AICd dist-based", xlab="", ylab="x1", ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5),x, type="b", main="AICcd dist-based", xlab="", ylab="x1", ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5),x, type="b", main="AIC dist-based", xlab="", ylab="x1", ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5),x, type="b", main="AICc dist-based", xlab="", ylab="x1", ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5),x, type="b", main="BIC node-based", xlab="", ylab="x1", ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5),x, type="b", main="BIC dist-based", xlab="", ylab="x1", ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5),x, type="b", main="BICd dist-based", xlab="", ylab="x1", ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}
dev.new()              #
par(mfrow=c(3,3))       #
#
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c("x1","x12","x123","x1234","x12345"), pts, type="b", main="AIC node-based", xlab="", ylab="x1", ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c("x1","x12","x123","x1234","x12345"),x, type="b", main="AICc node-based", xlab="", ylab="x1", ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c("x1","x12","x123","x1234","x12345"),x, type="b", main="AICd dist-based", xlab="", ylab="x1", ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c("x1","x12","x123","x1234","x12345"),x, type="b", main="AICcd dist-based", xlab="", ylab="x1", ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c("x1","x12","x123","x1234","x12345"),x, type="b", main="AIC dist-based", xlab="", ylab="x1", ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c("x1","x12","x123","x1234","x12345"),x, type="b", main="AICc dist-based", xlab="", ylab="x1", ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c("x1","x12","x123","x1234","x12345"),x, type="b", main="BIC node-based", xlab="", ylab="x1", ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c("x1","x12","x123","x1234","x12345"),x, type="b", main="BIC dist-based", xlab="", ylab="x1", ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="2")}#
#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c("x1","x12","x123","x1234","x12345"),x, type="b", main="BICd dist-based", xlab="", ylab="x1", ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c("x1","x12","x123","x1234","x12345"), pts, type="b", col="2")}
?plot
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="x1", ylim=c(0,250), axes=FALSE)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))
dev.new()              #
par(mfrow=c(3,3))       #
#
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="x1", axes=FALSE, ylim=c(0,250), axes=FALSE)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))                   box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))                     #
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="x1", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))                   #
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5),x, type="b", main="AICd dist-based", xlab="", ylab="x1", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))                   #
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5),x, type="b", main="AICcd dist-based", xlab="", ylab="x1", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))                   #
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5),x, type="b", main="AIC dist-based", xlab="", ylab="x1", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))                   #
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5),x, type="b", main="AICc dist-based", xlab="", ylab="x1", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))                   #
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5),x, type="b", main="BIC node-based", xlab="", ylab="x1", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))                   #
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5),x, type="b", main="BIC dist-based", xlab="", ylab="x1", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))                   #
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5),x, type="b", main="BICd dist-based", xlab="", ylab="x1", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))
dev.new()              #
par(mfrow=c(3,3))       #
#
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250), axes=FALSE)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))                   #
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5),x, type="b", main="AICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5),x, type="b", main="AICcd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5),x, type="b", main="AIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))  #
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5),x, type="b", main="AICc dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))   #
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5),x, type="b", main="BIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))        #
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5),x, type="b", main="BIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))    #
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5),x, type="b", main="BICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))
dev.new()              #
par(mfrow=c(3,3))       #
#
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250), axes=FALSE)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))                   #
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5),x, type="b", main="BIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))        #
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5),x, type="b", main="AICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5),x, type="b", main="AICcd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5),x, type="b", main="BICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))                   #
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5),x, type="b", main="AIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))  #
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5),x, type="b", main="AICc dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))   #
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5),x, type="b", main="BIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))
dev.new()              #
par(mfrow=c(3,3))       #
#
pts<-c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250), axes=FALSE)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                   #
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5),x, type="b", main="BIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))        #
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5),x, type="b", main="AICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5),x, type="b", main="AICcd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5),x, type="b", main="BICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))                   #
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5),x, type="b", main="AIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))  #
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5),x, type="b", main="AICc dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))   #
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5),x, type="b", main="BIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("x1","x12","x123","x1234","x12345"))
dev.new()              #
par(mfrow=c(3,3))       #
#
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                 #
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5),x, type="b", main="BIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))        #
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5),x, type="b", main="AICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5),x, type="b", main="AICcd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5),x, type="b", main="BICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                   #
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5),x, type="b", main="AIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))  #
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5),x, type="b", main="AICc dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))   #
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5),x, type="b", main="BIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
?axis
dev.new()              #
par(mfrow=c(3,3))       #
#
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5),x, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                 #
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5),x, type="b", main="BIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))        #
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5),x, type="b", main="AICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5),x, type="b", main="AICcd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5),x, type="b", main="BICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                   #
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5),x, type="b", main="AIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))  #
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5),x, type="b", main="AICc dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))   #
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5),x, type="b", main="BIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
Summary
b1<- Summary$x12345[,9]
b1
b1<- Summary$x1[,9]
b12<- Summary$x12[,9]
b1 <- Summary$x1[,9]#
b12 <- Summary$x12[,9]#
b123 <- Summary$x123[,9]#
b1234 <- Summary$x1234[,9]#
b12345 <- Summary$x12345[,9]
b <- cbind(b1,b12,b123,b1234,b12345)
b
b1[1,1]-b1[1,2]
class(b)
b[1,1]-b[1,2]
apply(b,2,[,1]-[,2])
sub <- function(x){[x,1]-[1,2]}#
apply(b,2,sub)
sub <- function(x){[x,1]-[1,2]}
sub <- function(x){b[x,1]-b[x,2]}
apply(b,2,sub)
b[1,1]
sub <- matrix(NA,0,1)#
for(i in 1:nrow(b))#
{#
	sub <- b[i,1]-b[i,2]#
}
sub
sub <- matrix(NA,0,1)#
for(i in 1:nrow(b))#
{#
	sub[i] <- b[i,1]-b[i,2]#
}
sub
max(sub)
dev.new()              #
par(mfrow=c(3,3))       #
#
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5),x, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                 #
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5),x, type="b", main="BIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))        #
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5),x, type="b", main="AICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5),x, type="b", main="AICcd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5),x, type="b", main="BICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                   #
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5),x, type="b", main="AIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))  #
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5),x, type="b", main="AICc dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))   #
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5),x, type="b", main="BIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))    #
b1 <- Summary$x1[,9]#
b12 <- Summary$x12[,9]#
b123 <- Summary$x123[,9]#
b1234 <- Summary$x1234[,9]#
b12345 <- Summary$x12345[,9]#
b <- cbind(b1,b12,b123,b1234,b12345)#
#
sub <- matrix(NA,0,1)#
for(i in 1:nrow(b))#
{#
	sub[i] <- b[i,1]-b[i,2]#
}#
max(sub)
sub
sub12 <- matrix(NA,0,1)#
sub23 <- matrix(NA,0,1)#
for(i in 1:nrow(b))#
{#
	sub12[i] <- b[i,1]-b[i,2]#
	sub23[i] <- b[i,2]-b[i,3]#
}#
sub12#
sub23
Code for simulating data with varying levels of correlation ##
# and for calculating AICd, AICcd, BICd                       ##
################################################################
	rm(list=ls())      #
	library(MASS)#
  #########################################################
  # Function to simulate data and calculate all measures ##
  # for node- and distance-based analyses                ##
  #########################################################
 sim.AIC <- function(N, rho, weights=c(0.35, 0.25, 0.15, 0,0,0.25))#
 {#
   # Define covariance matrix#
   covmat <- matrix(rho, 6, 6)#
   covmat[,6] <- covmat[6,] <- 0#
   diag(covmat) <- 1#
   # Simulate predictors x1-x5 and noise e, scale        #
   df <- mvrnorm(N, mu = rep(0,6), Sigma = covmat)#
   df <- apply(df, 2, scale)#
   colnames(df) <- c(paste("x", c(1:5), sep=""), "e")#
   X <- data.frame(df[,-6])#
   # Simulate response y#
   y <- apply(matrix(weights, N, 6, byrow=TRUE) * df,1,sum)#
   y <- scale(y)#
   Data <- data.frame(y, X)#
   # Node-based analysis#
     # regressions of all subsets of predictor variables#
     m1 <- lm(y~X$x1)     #
     m2 <- lm(y~X$x2)     #
     m3 <- lm(y~X$x3)     #
     m4 <- lm(y~X$x4)     #
     m5 <- lm(y~X$x5)     #
     m12 <- lm(y~X$x1 + X$x2)     #
     m13 <- lm(y~X$x1 + X$x3)     #
     m14 <- lm(y~X$x1 + X$x4)     #
     m15 <- lm(y~X$x1 + X$x5)     #
     m23 <- lm(y~X$x2 + X$x3)     #
     m24 <- lm(y~X$x2 + X$x4)     #
     m25 <- lm(y~X$x2 + X$x5)     #
     m34 <- lm(y~X$x3 + X$x4)     #
     m35 <- lm(y~X$x3 + X$x5)     #
     m45 <- lm(y~X$x4 + X$x5)     #
     m123 <- lm(y~X$x1 + X$x2 + X$x3)     #
     m124 <- lm(y~X$x1 + X$x2 + X$x4)     #
     m125 <- lm(y~X$x1 + X$x2 + X$x5)     #
     m134 <- lm(y~X$x1 + X$x3 + X$x4)     #
     m135 <- lm(y~X$x1 + X$x3 + X$x5)     #
     m145 <- lm(y~X$x1 + X$x4 + X$x5)     #
     m234 <- lm(y~X$x2 + X$x3 + X$x4)     #
     m235 <- lm(y~X$x2 + X$x3 + X$x5)     #
     m245 <- lm(y~X$x2 + X$x4 + X$x5)     #
     m345 <- lm(y~X$x3 + X$x4 + X$x5)     #
     m1234 <- lm(y~X$x1 + X$x2 + X$x3 + X$x4)     #
     m1235 <- lm(y~X$x1 + X$x2 + X$x3 + X$x5)     #
     m1245 <- lm(y~X$x1 + X$x2 + X$x4 + X$x5)     #
     m1345 <- lm(y~X$x1 + X$x3 + X$x4 + X$x5)     #
     m2345 <- lm(y~X$x2 + X$x3 + X$x4 + X$x5)     #
     m12345 <- lm(y~X$x1 + X$x2 + X$x3 + X$x4 + X$x5)     #
#
     # find RSS for each subset#
     mres <- data.frame(m1$residuals, m2$residuals, m3$residuals, m4$residuals, #
     m5$residuals, m12$residuals, m13$residuals, m14$residuals, m15$residuals, #
     m23$residuals, m24$residuals, m25$residuals, m34$residuals, m35$residuals, #
     m45$residuals, m123$residuals, m124$residuals, m125$residuals, m134$residuals, #
     m135$residuals, m145$residuals, m234$residuals, m235$residuals, m245$residuals, #
     m345$residuals, m1234$residuals, m1235$residuals, m1245$residuals, #
     m1345$residuals, m2345$residuals, m12345$residuals)#
     RSSfun <- function(x) {sum(x^2)}#
     RSS <- apply(mres,2,RSSfun)#
#
     # k for each subset#
     kfun <- function(x) {length(x$coefficients)+1}#
     k <- c(kfun(m1), kfun(m2), kfun(m3), kfun(m4), kfun(m5), kfun(m12), kfun(m13), #
     kfun(m14), kfun(m15), kfun(m23), kfun(m24), kfun(m25), kfun(m34), kfun(m35), kfun(m45), #
     kfun(m123), kfun(m124), kfun(m125), kfun(m134), kfun(m135), kfun(m145), kfun(m234), #
     kfun(m235), kfun(m245), kfun(m345), kfun(m1234), kfun(m1235), kfun(m1245), kfun(m1345), #
     kfun(m2345), kfun(m12345))#
#
     # set n#
     n <- N#
#
     # find node-based info theory metrics#
     AIC.calc <- AICc.calc <- BIC.calc <- rep(NA,length(RSS))#
     for(i in 1:length(k))#
     {#
       AIC.calc[i] <- n + n*log(2*pi) + n*log(RSS[i]/n) + 2*k[i]#
       AICc.calc[i] <- n + n*log(2*pi) + n*log(RSS[i]/n) + 2*k[i]*(n/(n-k[i]-1))#
       BIC.calc[i] <- n + n*log(2*pi) + n*log(RSS[i]/n) + log(n)*k[i]        #
     }#
   # Convert to distance matrices#
     D.y <- dist(Data$y)#
     D.X <- matrix(NA, length(D.y), ncol(X))#
     for(i in 1:ncol(X)) {D.X[,i] <- dist(X[,i])}#
     D.X <- data.frame(D.X)#
     names(D.X) <- names(X)#
   # Distance-based analysis#
     # regressions of distance matrices based on subsets#
     m1 <- lm(D.y~D.X$x1)     #
     m2 <- lm(D.y~D.X$x2)     #
     m3 <- lm(D.y~D.X$x3)     #
     m4 <- lm(D.y~D.X$x4)     #
     m5 <- lm(D.y~D.X$x5)     #
     m12 <- lm(D.y~D.X$x1 + D.X$x2)     #
     m13 <- lm(D.y~D.X$x1 + D.X$x3)     #
     m14 <- lm(D.y~D.X$x1 + D.X$x4)     #
     m15 <- lm(D.y~D.X$x1 + D.X$x5)     #
     m23 <- lm(D.y~D.X$x2 + D.X$x3)     #
     m24 <- lm(D.y~D.X$x2 + D.X$x4)     #
     m25 <- lm(D.y~D.X$x2 + D.X$x5)     #
     m34 <- lm(D.y~D.X$x3 + D.X$x4)     #
     m35 <- lm(D.y~D.X$x3 + D.X$x5)     #
     m45 <- lm(D.y~D.X$x4 + D.X$x5)     #
     m123 <- lm(D.y~D.X$x1 + D.X$x2 + D.X$x3)     #
     m124 <- lm(D.y~D.X$x1 + D.X$x2 + D.X$x4)     #
     m125 <- lm(D.y~D.X$x1 + D.X$x2 + D.X$x5)     #
     m134 <- lm(D.y~D.X$x1 + D.X$x3 + D.X$x4)     #
     m135 <- lm(D.y~D.X$x1 + D.X$x3 + D.X$x5)     #
     m145 <- lm(D.y~D.X$x1 + D.X$x4 + D.X$x5)     #
     m234 <- lm(D.y~D.X$x2 + D.X$x3 + D.X$x4)     #
     m235 <- lm(D.y~D.X$x2 + D.X$x3 + D.X$x5)     #
     m245 <- lm(D.y~D.X$x2 + D.X$x4 + D.X$x5)     #
     m345 <- lm(D.y~D.X$x3 + D.X$x4 + D.X$x5)     #
     m1234 <- lm(D.y~D.X$x1 + D.X$x2 + D.X$x3 + D.X$x4)     #
     m1235 <- lm(D.y~D.X$x1 + D.X$x2 + D.X$x3 + D.X$x5)     #
     m1245 <- lm(D.y~D.X$x1 + D.X$x2 + D.X$x4 + D.X$x5)     #
     m1345 <- lm(D.y~D.X$x1 + D.X$x3 + D.X$x4 + D.X$x5)     #
     m2345 <- lm(D.y~D.X$x2 + D.X$x3 + D.X$x4 + D.X$x5)     #
     m12345 <- lm(D.y~D.X$x1 + D.X$x2 + D.X$x3 + D.X$x4 + D.X$x5)     #
#
   	 # find RSS of each dist-converted subset#
     resfun <- function(x) {matrix(x$residuals)}#
     mres <- data.frame(resfun(m1), resfun(m2), resfun(m3), resfun(m4), resfun(m5), #
     resfun(m12), resfun(m13), resfun(m14), resfun(m15), resfun(m23), resfun(m24), #
     resfun(m25), resfun(m34), resfun(m35), resfun(m45), resfun(m123), resfun(m124), #
     resfun(m125), resfun(m134), resfun(m135), resfun(m145), resfun(m234), resfun(m235), #
     resfun(m245), resfun(m345), resfun(m1234), resfun(m1235), resfun(m1245), resfun(m1345), #
     resfun(m2345), resfun(m12345))#
     RSSfun <- function(x) {sum(x^2)}#
     RSS <- apply(mres,2,RSSfun)#
#
     # k for each subset#
     kfun <- function(x) {length(x$coefficients)+1}#
     k <- c(kfun(m1), kfun(m2), kfun(m3), kfun(m4), kfun(m5), kfun(m12), kfun(m13), #
     kfun(m14), kfun(m15), kfun(m23), kfun(m24), kfun(m25), kfun(m34), kfun(m35), kfun(m45), #
     kfun(m123), kfun(m124), kfun(m125), kfun(m134), kfun(m135), kfun(m145), kfun(m234), #
     kfun(m235), kfun(m245), kfun(m345), kfun(m1234), kfun(m1235), kfun(m1245), kfun(m1345), #
     kfun(m2345), kfun(m12345))#
#
     # distance-corrected n#
   	 n <- N * (N-1) / 2#
#
     # find distance-based info theory metrics#
     AIC.calc.dist <- AICc.calc.dist <- AIC.corr1.dist <- AICc.corr1.dist <-#
     BIC.calc.dist <- BIC.corr1.dist <- NA#
     for(i in 1:length(RSS))#
     {#
       AIC.calc.dist[i] <- n + n*log(2*pi) + n*log(RSS[i]/n) + 2*k[i]	#
       AIC.corr1.dist[i] <- N + N*log(2*pi) + N*log(RSS[i]/n) + 2*k[i]#
       AICc.calc.dist[i] <- n + n*log(2*pi) + n*log(RSS[i]/n) + 2*k[i]*(n/(n-k[i]-1))#
       AICc.corr1.dist[i] <- N + N*log(2*pi) + N*log(RSS[i]/n) + 2*k[i]*(N/(N-k[i]-1))#
       BIC.calc.dist[i] <- n + n*log(2*pi) + n*log(RSS[i]/n) + log(n)*k[i]#
       BIC.corr1.dist[i] <- N + N*log(2*pi) + N*log(RSS[i]/n) + log(N)*k[i]#
     }#
   test <- data.frame(AIC.calc, AICc.calc, AIC.corr1.dist, AICc.corr1.dist,#
   AIC.calc.dist, AICc.calc.dist, BIC.calc, BIC.calc.dist, BIC.corr1.dist)#
#
   test#
 }#
  ##################################################
  # Extract information required for a single run ##
  ##################################################
  test <- sim.AIC(100,0.6)#
#
  # Number1: Is the full correct model (x1,x2,x3) the number 1 model?  #
  Number1 <- apply(test,2,rank)[16,] == 1#
#
  # Prop.increases: Proportion of the time when there are increases in AIC when non-correlated variables are added to the subsets of the correlated variables#
  uncor <- c(8,9,21,11,12,24,13,14,25,17,18,28,19,20,29,22,23,30,26,27,31)#
  cor <- c(1,1,1,2,2,2,3,3,3,6,6,6,7,7,7,10,10,10,16,16,16)#
  Prop.increases <- colMeans(test[uncor,] - test[cor,] > 0)#
   # View of the matrix that the above means are based on#
   Prop.inc.mat <- test[uncor,] - test[cor,] > 0#
   rownames(Prop.inc.mat) <- c("1_14","1_15","1_145","2_24","2_25","2_245","3_34",#
   "3_35","3_345","12_124","12_125","12_1245","13_134","13_135","13_1345",#
   "23_234","23_235","23_2345","123_1234","123_1235","123_12345")#
#
  # Mean.var: plot that shows x1,x1+x2,x1+x2+x3,x1+x2+x3+x4,x1+x2+x3+x4+x5 AIC, should end up with v-shape. Run all reps, calculate the mean and variance.#
#
   Means.var <- test[c(1,6,16,26,31),]#
   plot(Means.var[,1], type="b")#
   lines(Means.var[,2], type="b",col="red")#
  # look at model 31: are the regression coefficients on average similar to the weights under which the data was simulated? work on both node and dist based analyses#
  ##################################################
  # Run replicate simulations and compile results ##
  ##################################################
#
  uncor <- c(8,9,21,11,12,24,13,14,25,17,18,28,19,20,29,22,23,30,26,27,31)#
  cor <- c(1,1,1,2,2,2,3,3,3,6,6,6,7,7,7,10,10,10,16,16,16)#
  run.replicates <- function(R = 10, N = 100, rho = 0.6)#
  {#
    res <- list(#
     Number1 = matrix(NA,0,9), #
     Prop.increases = matrix(NA,0,9),#
     x1 = matrix(NA,0,9),#
     x12 = matrix(NA,0,9),#
     x123 = matrix(NA,0,9),#
     x1234 = matrix(NA,0,9),#
     x12345 = matrix(NA,0,9))#
    for(i in 1:R)#
    {#
        test <- sim.AIC(N, rho)#
        res$Number1 <- rbind(res$Number1, apply(test,2,rank)[16,] == 1)#
        res$Prop.increases <- rbind(res$Prop.increases, colMeans(test[uncor,] - test[cor,] > 0))#
        res$x1 <- rbind(res$x1,test[1,])#
        res$x12 <- rbind(res$x12,test[6,])#
        res$x123 <- rbind(res$x123,test[16,])#
        res$x1234 <- rbind(res$x1234,test[26,])#
        res$x12345 <- rbind(res$x12345,test[31,])#
    }#
    res#
  }#
#
  res.100.00 <- run.replicates(N=100, rho=0, R=10)#
  res.100.01 <- run.replicates(N=100, rho=0.1, R=10)#
  res.100.02 <- run.replicates(N=100, rho=0.2, R=10)#
  res.100.03 <- run.replicates(N=100, rho=0.3, R=10)#
  res.100.04 <- run.replicates(N=100, rho=0.4, R=10)#
  res.100.05 <- run.replicates(N=100, rho=0.5, R=10)#
  res.100.06 <- run.replicates(N=100, rho=0.6, R=10)#
  res.100.07 <- run.replicates(N=100, rho=0.7, R=10)#
  res.100.08 <- run.replicates(N=100, rho=0.8, R=10)#
  res.100.09 <- run.replicates(N=100, rho=0.9, R=10)#
  res.50.00 <- run.replicates(N=50, rho=0, R=10)#
  res.50.01 <- run.replicates(N=50, rho=0.1, R=10)#
  res.50.02 <- run.replicates(N=50, rho=0.2, R=10)#
  res.50.03 <- run.replicates(N=50, rho=0.3, R=10)#
  res.50.04 <- run.replicates(N=50, rho=0.4, R=10)#
  res.50.05 <- run.replicates(N=50, rho=0.5, R=10)#
  res.50.06 <- run.replicates(N=50, rho=0.6, R=10)#
  res.50.07 <- run.replicates(N=50, rho=0.7, R=10)#
  res.50.08 <- run.replicates(N=50, rho=0.8, R=10)#
  res.50.09 <- run.replicates(N=50, rho=0.9, R=10)#
  res.30.00 <- run.replicates(N=30, rho=0, R=10)#
  res.30.01 <- run.replicates(N=30, rho=0.1, R=10)#
  res.30.02 <- run.replicates(N=30, rho=0.2, R=10)#
  res.30.03 <- run.replicates(N=30, rho=0.3, R=10)#
  res.30.04 <- run.replicates(N=30, rho=0.4, R=10)#
  res.30.05 <- run.replicates(N=30, rho=0.5, R=10)#
  res.30.06 <- run.replicates(N=30, rho=0.6, R=10)#
  res.30.07 <- run.replicates(N=30, rho=0.7, R=10)#
  res.30.08 <- run.replicates(N=30, rho=0.8, R=10)#
  res.30.09 <- run.replicates(N=30, rho=0.9, R=10)#
  ############################################
  # Summarize results across replicate runs ##
  ###########################################  #
#
  Scenarios <- list(res.100.00, res.100.01, res.100.02, res.100.03, res.100.04, res.100.05, res.100.06, res.100.07, res.100.08, res.100.09, res.50.00, res.50.01, res.50.02, res.50.03, res.50.04, res.50.05, res.50.06, res.50.07, res.50.08, res.50.09, res.30.00, res.30.01, res.30.02, res.30.03, res.30.04, res.30.05, res.30.06, res.30.07, res.30.08, res.30.09)#
  names(Scenarios) <-  c("res.100.00", "res.100.01", "res.100.02", "res.100.03", "res.100.04", "res.100.05", "res.100.06", "res.100.07", "res.100.08", "res.100.09", "res.50.00", "res.50.01", "res.50.02", "res.50.03", "res.50.04", "res.50.05", "res.50.06", "res.50.07", "res.50.08", "res.50.09", "res.30.00", "res.30.01", "res.30.02", "res.30.03", "res.30.04", "res.30.05", "res.30.06", "res.30.07", "res.30.08", "res.30.09")  #
  Measures <- colnames(res.100.00$Number1)  #
  Summary <- list(#
  Number1 = matrix(NA,30,9,dimnames=list(names(Scenarios), Measures)), #
  Prop.increases = matrix(NA,30,9, dimnames=list(names(Scenarios), Measures)), #
  x1 = matrix(NA,30,9, dimnames=list(names(Scenarios), Measures)), #
  x12 = matrix(NA,30,9, dimnames=list(names(Scenarios), Measures)), #
  x123 = matrix(NA,30,9, dimnames=list(names(Scenarios), Measures)), #
  x1234 = matrix(NA,30,9, dimnames=list(names(Scenarios), Measures)), #
  x12345 = matrix(NA,30,9, dimnames=list(names(Scenarios), Measures)))#
  for(s in 1:length(Scenarios))#
  {#
     Res <- Scenarios[[s]]#
     Summary$Number1[s,] <- apply(Res$Number1,2,mean)#
     Summary$Prop.increases[s,] <- apply(Res$Prop.increases,2,mean)#
     Summary$x1[s,] <- apply(Res$x1,2,mean)#
     Summary$x12[s,] <- apply(Res$x12,2,mean)#
     Summary$x123[s,] <- apply(Res$x123,2,mean)#
     Summary$x1234[s,] <- apply(Res$x1234,2,mean)#
     Summary$x12345[s,] <- apply(Res$x12345,2,mean)#
  }#
  #######################################################################
  # Plot of proportion of replicates where correct model was ranked #1 ##
  #######################################################################
dev.new()              #
par(mfrow=c(3,3))              #
plot(c(1:3), Summary$Number1[1,c(1,3,5)], type="b", ylim=c(0,1), main="AIC N=100",          #
axes=FALSE, xlab="", ylab="Number1", pch="0")            #
lines(c(1:3), Summary$Number1[2,c(1,3,5)], type="b", col=1, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[3,c(1,3,5)], type="b", col=1, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[4,c(1,3,5)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[5,c(1,3,5)], type="b", col=1, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[6,c(1,3,5)], type="b", col=1, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[7,c(1,3,5)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[8,c(1,3,5)], type="b", col=1, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[9,c(1,3,5)], type="b", col=1, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[10,c(1,3,5)], type="b", col=1, lty=1, pch="9") #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
plot(c(1:3), Summary$Number1[11,c(1,3,5)], type="b", ylim=c(0,1), main="AIC N=50", axes=FALSE, xlab="", ylab="Number1", col=4, pch="0")                     #
lines(c(1:3), Summary$Number1[12,c(1,3,5)], type="b", col=4, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[13,c(1,3,5)], type="b", col=4, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[14,c(1,3,5)], type="b", col=4, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[15,c(1,3,5)], type="b", col=4, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[16,c(1,3,5)], type="b", col=4, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[17,c(1,3,5)], type="b", col=4, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[18,c(1,3,5)], type="b", col=4, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[19,c(1,3,5)], type="b", col=4, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[20,c(1,3,5)], type="b", col=4, lty=1, pch="9") #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
#
plot(c(1:3), Summary$Number1[21,c(1,3,5)], type="b", ylim=c(0,1), main="AIC N=30",          #
axes=FALSE, xlab="", ylab="Number1", col=2, pch="0")                   #
lines(c(1:3), Summary$Number1[22,c(1,3,5)], type="b", col=2, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[23,c(1,3,5)], type="b", col=2, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[24,c(1,3,5)], type="b", col=2, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[25,c(1,3,5)], type="b", col=2, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[26,c(1,3,5)], type="b", col=2, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[27,c(1,3,5)], type="b", col=2, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[28,c(1,3,5)], type="b", col=2, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[29,c(1,3,5)], type="b", col=2, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[30,c(1,3,5)], type="b", col=2, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
plot(c(1:3), Summary$Number1[1,c(2,4,6)], type="b", ylim=c(0,1), main="AICc N=100", axes=FALSE, xlab="", ylab="Number1", pch="0")           #
lines(c(1:3), Summary$Number1[2,c(2,4,6)], type="b", col=1, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[3,c(2,4,6)], type="b", col=1, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[4,c(2,4,6)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[5,c(2,4,6)], type="b", col=1, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[6,c(2,4,6)], type="b", col=1, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[7,c(2,4,6)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[8,c(2,4,6)], type="b", col=1, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[9,c(2,4,6)], type="b", col=1, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[10,c(2,4,6)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
#
plot(c(1:3), Summary$Number1[11,c(2,4,6)], type="b", ylim=c(0,1), main="AICc N=50",          #
axes=FALSE, xlab="", ylab="Number1", col=4, pch="0")           #
lines(c(1:3), Summary$Number1[12,c(2,4,6)], type="b", col=4, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[13,c(2,4,6)], type="b", col=4, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[14,c(2,4,6)], type="b", col=4, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[15,c(2,4,6)], type="b", col=4, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[16,c(2,4,6)], type="b", col=4, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[17,c(2,4,6)], type="b", col=4, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[18,c(2,4,6)], type="b", col=4, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[19,c(2,4,6)], type="b", col=4, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[20,c(2,4,6)], type="b", col=4, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
#
plot(c(1:3), Summary$Number1[21,c(2,4,6)], type="b", ylim=c(0,1), main="AICc N=30",          #
axes=FALSE, xlab="", ylab="Number1", col=2, pch="0")           #
lines(c(1:3), Summary$Number1[22,c(2,4,6)], type="b", col=2, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[23,c(2,4,6)], type="b", col=2, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[24,c(2,4,6)], type="b", col=2, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[25,c(2,4,6)], type="b", col=2, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[26,c(2,4,6)], type="b", col=2, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[27,c(2,4,6)], type="b", col=2, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[28,c(2,4,6)], type="b", col=2, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[29,c(2,4,6)], type="b", col=2, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[30,c(2,4,6)], type="b", col=2, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
plot(c(1:3), Summary$Number1[1,c(7,9,8)], type="b", ylim=c(0,1), main="BIC N=100",          #
axes=FALSE, xlab="", ylab="Number1", pch="0")            #
lines(c(1:3), Summary$Number1[2,c(7,9,8)], type="b", col=1, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[3,c(7,9,8)], type="b", col=1, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[4,c(7,9,8)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[5,c(7,9,8)], type="b", col=1, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[6,c(7,9,8)], type="b", col=1, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[7,c(7,9,8)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[8,c(7,9,8)], type="b", col=1, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[9,c(7,9,8)], type="b", col=1, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[10,c(7,9,8)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
#
plot(c(1:3), Summary$Number1[11,c(7,9,8)], type="b", ylim=c(0,1), main="BIC N=50",          #
axes=FALSE, xlab="", ylab="Number1", col=4, pch="0")            #
lines(c(1:3), Summary$Number1[12,c(7,9,8)], type="b", col=4, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[13,c(7,9,8)], type="b", col=4, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[14,c(7,9,8)], type="b", col=4, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[15,c(7,9,8)], type="b", col=4, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[16,c(7,9,8)], type="b", col=4, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[17,c(7,9,8)], type="b", col=4, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[18,c(7,9,8)], type="b", col=4, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[19,c(7,9,8)], type="b", col=4, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[20,c(7,9,8)], type="b", col=4, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
#
plot(c(1:3), Summary$Number1[21,c(7,9,8)], type="b", ylim=c(0,1), main="BIC N=30",          #
axes=FALSE, xlab="", ylab="Number1", col=2, pch="0")            #
lines(c(1:3), Summary$Number1[22,c(7,9,8)], type="b", col=2, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[23,c(7,9,8)], type="b", col=2, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[24,c(7,9,8)], type="b", col=2, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[25,c(7,9,8)], type="b", col=2, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[26,c(7,9,8)], type="b", col=2, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[27,c(7,9,8)], type="b", col=2, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[28,c(7,9,8)], type="b", col=2, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[29,c(7,9,8)], type="b", col=2, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[30,c(7,9,8)], type="b", col=2, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
########################################################################              #
# Plot of mean proportion of increases of AIC when a variable is added ##
########################################################################                        #
dev.new()              #
par(mfrow=c(3,3))              #
plot(c(1:3), Summary$Prop.increases[1,c(1,3,5)], type="b", ylim=c(0,1), main="AIC N=100",          #
axes=FALSE, xlab="", ylab="Prop.increases", pch="0")            #
lines(c(1:3), Summary$Prop.increases[4,c(1,3,5)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[7,c(1,3,5)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[10,c(1,3,5)], type="b", col=1, lty=1, pch="9")#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
plot(c(1:3), Summary$Prop.increases[11,c(1,3,5)], type="b", ylim=c(0,1), main="AIC N=50",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")            #
lines(c(1:3), Summary$Prop.increases[14,c(1,3,5)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[17,c(1,3,5)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[20,c(1,3,5)], type="b", col=1, lty=1, pch="9") #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
#
plot(c(1:3), Summary$Prop.increases[1,c(1,3,5)], type="b", ylim=c(0,1), main="AIC N=30",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")            #
lines(c(1:3), Summary$Prop.increases[24,c(1,3,5)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[27,c(1,3,5)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[30,c(1,3,5)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
plot(c(1:3), Summary$Prop.increases[1,c(2,4,6)], type="b", ylim=c(0,1), main="AICc",          #
axes=FALSE, xlab="", ylab="Prop.increases", pch="0")            #
lines(c(1:3), Summary$Prop.increases[4,c(2,4,6)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[7,c(2,4,6)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[10,c(2,4,6)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
#
plot(c(1:3), Summary$Prop.increases[11,c(2,4,6)], type="b", ylim=c(0,1), main="AICc",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")            #
lines(c(1:3), Summary$Prop.increases[14,c(2,4,6)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[17,c(2,4,6)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[20,c(2,4,6)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
#
plot(c(1:3), Summary$Prop.increases[21,c(2,4,6)], type="b", ylim=c(0,1), main="AICc",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")            #
lines(c(1:3), Summary$Prop.increases[24,c(2,4,6)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[27,c(2,4,6)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[30,c(2,4,6)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
plot(c(1:3), Summary$Prop.increases[1,c(7,9,8)], type="b", ylim=c(0,1), main="BIC",          #
axes=FALSE, xlab="", ylab="Prop.increases", pch="0")            #
lines(c(1:3), Summary$Prop.increases[4,c(7,9,8)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[7,c(7,9,8)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[10,c(7,9,8)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
#
plot(c(1:3), Summary$Prop.increases[11,c(7,9,8)], type="b", ylim=c(0,1), main="BIC",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")  #
lines(c(1:3), Summary$Prop.increases[14,c(7,9,8)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[17,c(7,9,8)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[20,c(7,9,8)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
#
plot(c(1:3), Summary$Prop.increases[21,c(7,9,8)], type="b", ylim=c(0,1), main="BIC",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")  #
lines(c(1:3), Summary$Prop.increases[24,c(7,9,8)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[27,c(7,9,8)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[30,c(7,9,8)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))                     #
#############################################################
# Plot of mean values of x1, x1+x2, x1+x2+x3, x1+x2+x3+x4, ##
# and x1+x2+x3+x4+x5                                       ##
############################################################                 #
dev.new()              #
par(mfrow=c(3,3))       #
#
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5),x, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                 #
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5),x, type="b", main="BIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))        #
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5),x, type="b", main="AICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5),x, type="b", main="AICcd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5),x, type="b", main="BICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                   #
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5),x, type="b", main="AIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))  #
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5),x, type="b", main="AICc dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))   #
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5),x, type="b", main="BIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))    #
b1 <- Summary$x1[,9]#
b12 <- Summary$x12[,9]#
b123 <- Summary$x123[,9]#
b1234 <- Summary$x1234[,9]#
b12345 <- Summary$x12345[,9]#
b <- cbind(b1,b12,b123,b1234,b12345)#
#
sub12 <- matrix(NA,0,1)#
sub23 <- matrix(NA,0,1)#
for(i in 1:nrow(b))#
{#
	sub12[i] <- b[i,1]-b[i,2]#
	sub23[i] <- b[i,2]-b[i,3]#
}#
sub12#
sub23
dev.new()              #
par(mfrow=c(3,3))       #
#
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5),x, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                 #
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5),x, type="b", main="AICc node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5),x, type="b", main="BIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))        #
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5),x, type="b", main="AICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5),x, type="b", main="AICcd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5),x, type="b", main="BICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                   #
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5),x, type="b", main="AIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))  #
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5),x, type="b", main="AICc dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))   #
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5),x, type="b", main="BIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
dev.new()              #
par(mfrow=c(3,3))       #
#
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                 #
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5), pts, type="b", main="AICc node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5), pts, type="b", main="BIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))        #
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5), pts, type="b", main="AICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5), pts, type="b", main="AICcd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5), pts, type="b", main="BICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                   #
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5), pts, type="b", main="AIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))  #
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5), pts, type="b", main="AICc dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))   #
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5), pts, type="b", main="BIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
dev.new()              #
par(mfrow=c(3,3))              #
plot(c(1:3), Summary$Prop.increases[1,c(1,3,5)], type="b", ylim=c(0,1), main="AIC N=100",          #
axes=FALSE, xlab="", ylab="Prop.increases", pch="0")            #
lines(c(1:3), Summary$Prop.increases[4,c(1,3,5)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[7,c(1,3,5)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[10,c(1,3,5)], type="b", col=1, lty=1, pch="9")#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
plot(c(1:3), Summary$Prop.increases[11,c(1,3,5)], type="b", ylim=c(0,1), main="AIC N=50",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")            #
lines(c(1:3), Summary$Prop.increases[14,c(1,3,5)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[17,c(1,3,5)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[20,c(1,3,5)], type="b", col=1, lty=1, pch="9") #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
#
plot(c(1:3), Summary$Prop.increases[1,c(1,3,5)], type="b", ylim=c(0,1), main="AIC N=30",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")            #
lines(c(1:3), Summary$Prop.increases[24,c(1,3,5)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[27,c(1,3,5)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[30,c(1,3,5)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
plot(c(1:3), Summary$Prop.increases[1,c(2,4,6)], type="b", ylim=c(0,1), main="AICc",          #
axes=FALSE, xlab="", ylab="Prop.increases", pch="0")            #
lines(c(1:3), Summary$Prop.increases[4,c(2,4,6)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[7,c(2,4,6)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[10,c(2,4,6)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
#
plot(c(1:3), Summary$Prop.increases[11,c(2,4,6)], type="b", ylim=c(0,1), main="AICc",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")            #
lines(c(1:3), Summary$Prop.increases[14,c(2,4,6)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[17,c(2,4,6)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[20,c(2,4,6)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
#
plot(c(1:3), Summary$Prop.increases[21,c(2,4,6)], type="b", ylim=c(0,1), main="AICc",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")            #
lines(c(1:3), Summary$Prop.increases[24,c(2,4,6)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[27,c(2,4,6)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[30,c(2,4,6)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
plot(c(1:3), Summary$Prop.increases[1,c(7,9,8)], type="b", ylim=c(0,1), main="BIC",          #
axes=FALSE, xlab="", ylab="Prop.increases", pch="0")            #
lines(c(1:3), Summary$Prop.increases[4,c(7,9,8)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[7,c(7,9,8)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[10,c(7,9,8)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
#
plot(c(1:3), Summary$Prop.increases[11,c(7,9,8)], type="b", ylim=c(0,1), main="BIC",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")  #
lines(c(1:3), Summary$Prop.increases[14,c(7,9,8)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[17,c(7,9,8)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[20,c(7,9,8)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
#
plot(c(1:3), Summary$Prop.increases[21,c(7,9,8)], type="b", ylim=c(0,1), main="BIC",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")  #
lines(c(1:3), Summary$Prop.increases[24,c(7,9,8)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[27,c(7,9,8)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[30,c(7,9,8)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))
dev.new()              #
par(mfrow=c(1,3))       #
#
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                 #
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5), pts, type="b", main="AICc node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5), pts, type="b", main="BIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))        #
dev.new()              #
par(mfrow=c(1,3))       #
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5), pts, type="b", main="AICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5), pts, type="b", main="AICcd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5), pts, type="b", main="BICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                   #
dev.new()              #
par(mfrow=c(1,3))       #
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5), pts, type="b", main="AIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))  #
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5), pts, type="b", main="AICc dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))   #
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5), pts, type="b", main="BIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b")}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
Code for simulating data with varying levels of correlation ##
# and for calculating AICd, AICcd, BICd                       ##
################################################################
	rm(list=ls())      #
	library(MASS)#
  #########################################################
  # Function to simulate data and calculate all measures ##
  # for node- and distance-based analyses                ##
  #########################################################
 sim.AIC <- function(N, rho, weights=c(0.35, 0.25, 0.15, 0,0,0.25))#
 {#
   # Define covariance matrix#
   covmat <- matrix(rho, 6, 6)#
   covmat[,6] <- covmat[6,] <- 0#
   diag(covmat) <- 1#
   # Simulate predictors x1-x5 and noise e, scale        #
   df <- mvrnorm(N, mu = rep(0,6), Sigma = covmat)#
   df <- apply(df, 2, scale)#
   colnames(df) <- c(paste("x", c(1:5), sep=""), "e")#
   X <- data.frame(df[,-6])#
   # Simulate response y#
   y <- apply(matrix(weights, N, 6, byrow=TRUE) * df,1,sum)#
   y <- scale(y)#
   Data <- data.frame(y, X)#
   # Node-based analysis#
     # regressions of all subsets of predictor variables#
     m1 <- lm(y~X$x1)     #
     m2 <- lm(y~X$x2)     #
     m3 <- lm(y~X$x3)     #
     m4 <- lm(y~X$x4)     #
     m5 <- lm(y~X$x5)     #
     m12 <- lm(y~X$x1 + X$x2)     #
     m13 <- lm(y~X$x1 + X$x3)     #
     m14 <- lm(y~X$x1 + X$x4)     #
     m15 <- lm(y~X$x1 + X$x5)     #
     m23 <- lm(y~X$x2 + X$x3)     #
     m24 <- lm(y~X$x2 + X$x4)     #
     m25 <- lm(y~X$x2 + X$x5)     #
     m34 <- lm(y~X$x3 + X$x4)     #
     m35 <- lm(y~X$x3 + X$x5)     #
     m45 <- lm(y~X$x4 + X$x5)     #
     m123 <- lm(y~X$x1 + X$x2 + X$x3)     #
     m124 <- lm(y~X$x1 + X$x2 + X$x4)     #
     m125 <- lm(y~X$x1 + X$x2 + X$x5)     #
     m134 <- lm(y~X$x1 + X$x3 + X$x4)     #
     m135 <- lm(y~X$x1 + X$x3 + X$x5)     #
     m145 <- lm(y~X$x1 + X$x4 + X$x5)     #
     m234 <- lm(y~X$x2 + X$x3 + X$x4)     #
     m235 <- lm(y~X$x2 + X$x3 + X$x5)     #
     m245 <- lm(y~X$x2 + X$x4 + X$x5)     #
     m345 <- lm(y~X$x3 + X$x4 + X$x5)     #
     m1234 <- lm(y~X$x1 + X$x2 + X$x3 + X$x4)     #
     m1235 <- lm(y~X$x1 + X$x2 + X$x3 + X$x5)     #
     m1245 <- lm(y~X$x1 + X$x2 + X$x4 + X$x5)     #
     m1345 <- lm(y~X$x1 + X$x3 + X$x4 + X$x5)     #
     m2345 <- lm(y~X$x2 + X$x3 + X$x4 + X$x5)     #
     m12345 <- lm(y~X$x1 + X$x2 + X$x3 + X$x4 + X$x5)     #
#
     # find RSS for each subset#
     mres <- data.frame(m1$residuals, m2$residuals, m3$residuals, m4$residuals, #
     m5$residuals, m12$residuals, m13$residuals, m14$residuals, m15$residuals, #
     m23$residuals, m24$residuals, m25$residuals, m34$residuals, m35$residuals, #
     m45$residuals, m123$residuals, m124$residuals, m125$residuals, m134$residuals, #
     m135$residuals, m145$residuals, m234$residuals, m235$residuals, m245$residuals, #
     m345$residuals, m1234$residuals, m1235$residuals, m1245$residuals, #
     m1345$residuals, m2345$residuals, m12345$residuals)#
     RSSfun <- function(x) {sum(x^2)}#
     RSS <- apply(mres,2,RSSfun)#
#
     # k for each subset#
     kfun <- function(x) {length(x$coefficients)+1}#
     k <- c(kfun(m1), kfun(m2), kfun(m3), kfun(m4), kfun(m5), kfun(m12), kfun(m13), #
     kfun(m14), kfun(m15), kfun(m23), kfun(m24), kfun(m25), kfun(m34), kfun(m35), kfun(m45), #
     kfun(m123), kfun(m124), kfun(m125), kfun(m134), kfun(m135), kfun(m145), kfun(m234), #
     kfun(m235), kfun(m245), kfun(m345), kfun(m1234), kfun(m1235), kfun(m1245), kfun(m1345), #
     kfun(m2345), kfun(m12345))#
#
     # set n#
     n <- N#
#
     # find node-based info theory metrics#
     AIC.calc <- AICc.calc <- BIC.calc <- rep(NA,length(RSS))#
     for(i in 1:length(k))#
     {#
       AIC.calc[i] <- n + n*log(2*pi) + n*log(RSS[i]/n) + 2*k[i]#
       AICc.calc[i] <- n + n*log(2*pi) + n*log(RSS[i]/n) + 2*k[i]*(n/(n-k[i]-1))#
       BIC.calc[i] <- n + n*log(2*pi) + n*log(RSS[i]/n) + log(n)*k[i]        #
     }#
   # Convert to distance matrices#
     D.y <- dist(Data$y)#
     D.X <- matrix(NA, length(D.y), ncol(X))#
     for(i in 1:ncol(X)) {D.X[,i] <- dist(X[,i])}#
     D.X <- data.frame(D.X)#
     names(D.X) <- names(X)#
   # Distance-based analysis#
     # regressions of distance matrices based on subsets#
     m1 <- lm(D.y~D.X$x1)     #
     m2 <- lm(D.y~D.X$x2)     #
     m3 <- lm(D.y~D.X$x3)     #
     m4 <- lm(D.y~D.X$x4)     #
     m5 <- lm(D.y~D.X$x5)     #
     m12 <- lm(D.y~D.X$x1 + D.X$x2)     #
     m13 <- lm(D.y~D.X$x1 + D.X$x3)     #
     m14 <- lm(D.y~D.X$x1 + D.X$x4)     #
     m15 <- lm(D.y~D.X$x1 + D.X$x5)     #
     m23 <- lm(D.y~D.X$x2 + D.X$x3)     #
     m24 <- lm(D.y~D.X$x2 + D.X$x4)     #
     m25 <- lm(D.y~D.X$x2 + D.X$x5)     #
     m34 <- lm(D.y~D.X$x3 + D.X$x4)     #
     m35 <- lm(D.y~D.X$x3 + D.X$x5)     #
     m45 <- lm(D.y~D.X$x4 + D.X$x5)     #
     m123 <- lm(D.y~D.X$x1 + D.X$x2 + D.X$x3)     #
     m124 <- lm(D.y~D.X$x1 + D.X$x2 + D.X$x4)     #
     m125 <- lm(D.y~D.X$x1 + D.X$x2 + D.X$x5)     #
     m134 <- lm(D.y~D.X$x1 + D.X$x3 + D.X$x4)     #
     m135 <- lm(D.y~D.X$x1 + D.X$x3 + D.X$x5)     #
     m145 <- lm(D.y~D.X$x1 + D.X$x4 + D.X$x5)     #
     m234 <- lm(D.y~D.X$x2 + D.X$x3 + D.X$x4)     #
     m235 <- lm(D.y~D.X$x2 + D.X$x3 + D.X$x5)     #
     m245 <- lm(D.y~D.X$x2 + D.X$x4 + D.X$x5)     #
     m345 <- lm(D.y~D.X$x3 + D.X$x4 + D.X$x5)     #
     m1234 <- lm(D.y~D.X$x1 + D.X$x2 + D.X$x3 + D.X$x4)     #
     m1235 <- lm(D.y~D.X$x1 + D.X$x2 + D.X$x3 + D.X$x5)     #
     m1245 <- lm(D.y~D.X$x1 + D.X$x2 + D.X$x4 + D.X$x5)     #
     m1345 <- lm(D.y~D.X$x1 + D.X$x3 + D.X$x4 + D.X$x5)     #
     m2345 <- lm(D.y~D.X$x2 + D.X$x3 + D.X$x4 + D.X$x5)     #
     m12345 <- lm(D.y~D.X$x1 + D.X$x2 + D.X$x3 + D.X$x4 + D.X$x5)     #
#
   	 # find RSS of each dist-converted subset#
     resfun <- function(x) {matrix(x$residuals)}#
     mres <- data.frame(resfun(m1), resfun(m2), resfun(m3), resfun(m4), resfun(m5), #
     resfun(m12), resfun(m13), resfun(m14), resfun(m15), resfun(m23), resfun(m24), #
     resfun(m25), resfun(m34), resfun(m35), resfun(m45), resfun(m123), resfun(m124), #
     resfun(m125), resfun(m134), resfun(m135), resfun(m145), resfun(m234), resfun(m235), #
     resfun(m245), resfun(m345), resfun(m1234), resfun(m1235), resfun(m1245), resfun(m1345), #
     resfun(m2345), resfun(m12345))#
     RSSfun <- function(x) {sum(x^2)}#
     RSS <- apply(mres,2,RSSfun)#
#
     # k for each subset#
     kfun <- function(x) {length(x$coefficients)+1}#
     k <- c(kfun(m1), kfun(m2), kfun(m3), kfun(m4), kfun(m5), kfun(m12), kfun(m13), #
     kfun(m14), kfun(m15), kfun(m23), kfun(m24), kfun(m25), kfun(m34), kfun(m35), kfun(m45), #
     kfun(m123), kfun(m124), kfun(m125), kfun(m134), kfun(m135), kfun(m145), kfun(m234), #
     kfun(m235), kfun(m245), kfun(m345), kfun(m1234), kfun(m1235), kfun(m1245), kfun(m1345), #
     kfun(m2345), kfun(m12345))#
#
     # distance-corrected n#
   	 n <- N * (N-1) / 2#
#
     # find distance-based info theory metrics#
     AIC.calc.dist <- AICc.calc.dist <- AIC.corr1.dist <- AICc.corr1.dist <-#
     BIC.calc.dist <- BIC.corr1.dist <- NA#
     for(i in 1:length(RSS))#
     {#
       AIC.calc.dist[i] <- n + n*log(2*pi) + n*log(RSS[i]/n) + 2*k[i]	#
       AIC.corr1.dist[i] <- N + N*log(2*pi) + N*log(RSS[i]/n) + 2*k[i]#
       AICc.calc.dist[i] <- n + n*log(2*pi) + n*log(RSS[i]/n) + 2*k[i]*(n/(n-k[i]-1))#
       AICc.corr1.dist[i] <- N + N*log(2*pi) + N*log(RSS[i]/n) + 2*k[i]*(N/(N-k[i]-1))#
       BIC.calc.dist[i] <- n + n*log(2*pi) + n*log(RSS[i]/n) + log(n)*k[i]#
       BIC.corr1.dist[i] <- N + N*log(2*pi) + N*log(RSS[i]/n) + log(N)*k[i]#
     }#
   test <- data.frame(AIC.calc, AICc.calc, AIC.corr1.dist, AICc.corr1.dist,#
   AIC.calc.dist, AICc.calc.dist, BIC.calc, BIC.calc.dist, BIC.corr1.dist)#
#
   test#
 }#
  ##################################################
  # Extract information required for a single run ##
  ##################################################
  test <- sim.AIC(100,0.6)#
#
  # Number1: Is the full correct model (x1,x2,x3) the number 1 model?  #
  Number1 <- apply(test,2,rank)[16,] == 1#
#
  # Prop.increases: Proportion of the time when there are increases in AIC when non-correlated variables are added to the subsets of the correlated variables#
  uncor <- c(8,9,21,11,12,24,13,14,25,17,18,28,19,20,29,22,23,30,26,27,31)#
  cor <- c(1,1,1,2,2,2,3,3,3,6,6,6,7,7,7,10,10,10,16,16,16)#
  Prop.increases <- colMeans(test[uncor,] - test[cor,] > 0)#
   # View of the matrix that the above means are based on#
   Prop.inc.mat <- test[uncor,] - test[cor,] > 0#
   rownames(Prop.inc.mat) <- c("1_14","1_15","1_145","2_24","2_25","2_245","3_34",#
   "3_35","3_345","12_124","12_125","12_1245","13_134","13_135","13_1345",#
   "23_234","23_235","23_2345","123_1234","123_1235","123_12345")#
#
  # Mean.var: plot that shows x1,x1+x2,x1+x2+x3,x1+x2+x3+x4,x1+x2+x3+x4+x5 AIC, should end up with v-shape. Run all reps, calculate the mean and variance.#
#
   Means.var <- test[c(1,6,16,26,31),]#
   plot(Means.var[,1], type="b")#
   lines(Means.var[,2], type="b",col="red")#
  # look at model 31: are the regression coefficients on average similar to the weights under which the data was simulated? work on both node and dist based analyses#
  ##################################################
  # Run replicate simulations and compile results ##
  ##################################################
#
  uncor <- c(8,9,21,11,12,24,13,14,25,17,18,28,19,20,29,22,23,30,26,27,31)#
  cor <- c(1,1,1,2,2,2,3,3,3,6,6,6,7,7,7,10,10,10,16,16,16)#
  run.replicates <- function(R = 10, N = 100, rho = 0.6)#
  {#
    res <- list(#
     Number1 = matrix(NA,0,9), #
     Prop.increases = matrix(NA,0,9),#
     x1 = matrix(NA,0,9),#
     x12 = matrix(NA,0,9),#
     x123 = matrix(NA,0,9),#
     x1234 = matrix(NA,0,9),#
     x12345 = matrix(NA,0,9))#
    for(i in 1:R)#
    {#
        test <- sim.AIC(N, rho)#
        res$Number1 <- rbind(res$Number1, apply(test,2,rank)[16,] == 1)#
        res$Prop.increases <- rbind(res$Prop.increases, colMeans(test[uncor,] - test[cor,] > 0))#
        res$x1 <- rbind(res$x1,test[1,])#
        res$x12 <- rbind(res$x12,test[6,])#
        res$x123 <- rbind(res$x123,test[16,])#
        res$x1234 <- rbind(res$x1234,test[26,])#
        res$x12345 <- rbind(res$x12345,test[31,])#
    }#
    res#
  }#
#
  res.100.00 <- run.replicates(N=100, rho=0, R=10)#
  res.100.01 <- run.replicates(N=100, rho=0.1, R=10)#
  res.100.02 <- run.replicates(N=100, rho=0.2, R=10)#
  res.100.03 <- run.replicates(N=100, rho=0.3, R=10)#
  res.100.04 <- run.replicates(N=100, rho=0.4, R=10)#
  res.100.05 <- run.replicates(N=100, rho=0.5, R=10)#
  res.100.06 <- run.replicates(N=100, rho=0.6, R=10)#
  res.100.07 <- run.replicates(N=100, rho=0.7, R=10)#
  res.100.08 <- run.replicates(N=100, rho=0.8, R=10)#
  res.100.09 <- run.replicates(N=100, rho=0.9, R=10)#
  res.50.00 <- run.replicates(N=50, rho=0, R=10)#
  res.50.01 <- run.replicates(N=50, rho=0.1, R=10)#
  res.50.02 <- run.replicates(N=50, rho=0.2, R=10)#
  res.50.03 <- run.replicates(N=50, rho=0.3, R=10)#
  res.50.04 <- run.replicates(N=50, rho=0.4, R=10)#
  res.50.05 <- run.replicates(N=50, rho=0.5, R=10)#
  res.50.06 <- run.replicates(N=50, rho=0.6, R=10)#
  res.50.07 <- run.replicates(N=50, rho=0.7, R=10)#
  res.50.08 <- run.replicates(N=50, rho=0.8, R=10)#
  res.50.09 <- run.replicates(N=50, rho=0.9, R=10)#
  res.30.00 <- run.replicates(N=30, rho=0, R=10)#
  res.30.01 <- run.replicates(N=30, rho=0.1, R=10)#
  res.30.02 <- run.replicates(N=30, rho=0.2, R=10)#
  res.30.03 <- run.replicates(N=30, rho=0.3, R=10)#
  res.30.04 <- run.replicates(N=30, rho=0.4, R=10)#
  res.30.05 <- run.replicates(N=30, rho=0.5, R=10)#
  res.30.06 <- run.replicates(N=30, rho=0.6, R=10)#
  res.30.07 <- run.replicates(N=30, rho=0.7, R=10)#
  res.30.08 <- run.replicates(N=30, rho=0.8, R=10)#
  res.30.09 <- run.replicates(N=30, rho=0.9, R=10)#
  ############################################
  # Summarize results across replicate runs ##
  ###########################################  #
#
  Scenarios <- list(res.100.00, res.100.01, res.100.02, res.100.03, res.100.04, res.100.05, res.100.06, res.100.07, res.100.08, res.100.09, res.50.00, res.50.01, res.50.02, res.50.03, res.50.04, res.50.05, res.50.06, res.50.07, res.50.08, res.50.09, res.30.00, res.30.01, res.30.02, res.30.03, res.30.04, res.30.05, res.30.06, res.30.07, res.30.08, res.30.09)#
  names(Scenarios) <-  c("res.100.00", "res.100.01", "res.100.02", "res.100.03", "res.100.04", "res.100.05", "res.100.06", "res.100.07", "res.100.08", "res.100.09", "res.50.00", "res.50.01", "res.50.02", "res.50.03", "res.50.04", "res.50.05", "res.50.06", "res.50.07", "res.50.08", "res.50.09", "res.30.00", "res.30.01", "res.30.02", "res.30.03", "res.30.04", "res.30.05", "res.30.06", "res.30.07", "res.30.08", "res.30.09")  #
  Measures <- colnames(res.100.00$Number1)  #
  Summary <- list(#
  Number1 = matrix(NA,30,9,dimnames=list(names(Scenarios), Measures)), #
  Prop.increases = matrix(NA,30,9, dimnames=list(names(Scenarios), Measures)), #
  x1 = matrix(NA,30,9, dimnames=list(names(Scenarios), Measures)), #
  x12 = matrix(NA,30,9, dimnames=list(names(Scenarios), Measures)), #
  x123 = matrix(NA,30,9, dimnames=list(names(Scenarios), Measures)), #
  x1234 = matrix(NA,30,9, dimnames=list(names(Scenarios), Measures)), #
  x12345 = matrix(NA,30,9, dimnames=list(names(Scenarios), Measures)))#
  for(s in 1:length(Scenarios))#
  {#
     Res <- Scenarios[[s]]#
     Summary$Number1[s,] <- apply(Res$Number1,2,mean)#
     Summary$Prop.increases[s,] <- apply(Res$Prop.increases,2,mean)#
     Summary$x1[s,] <- apply(Res$x1,2,mean)#
     Summary$x12[s,] <- apply(Res$x12,2,mean)#
     Summary$x123[s,] <- apply(Res$x123,2,mean)#
     Summary$x1234[s,] <- apply(Res$x1234,2,mean)#
     Summary$x12345[s,] <- apply(Res$x12345,2,mean)#
  }#
  #######################################################################
  # Plot of proportion of replicates where correct model was ranked #1 ##
  #######################################################################
dev.new()              #
par(mfrow=c(3,3))              #
plot(c(1:3), Summary$Number1[1,c(1,3,5)], type="b", ylim=c(0,1), main="AIC N=100",          #
axes=FALSE, xlab="", ylab="Number1", pch="0")            #
lines(c(1:3), Summary$Number1[2,c(1,3,5)], type="b", col=1, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[3,c(1,3,5)], type="b", col=1, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[4,c(1,3,5)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[5,c(1,3,5)], type="b", col=1, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[6,c(1,3,5)], type="b", col=1, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[7,c(1,3,5)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[8,c(1,3,5)], type="b", col=1, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[9,c(1,3,5)], type="b", col=1, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[10,c(1,3,5)], type="b", col=1, lty=1, pch="9") #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
plot(c(1:3), Summary$Number1[11,c(1,3,5)], type="b", ylim=c(0,1), main="AIC N=50", axes=FALSE, xlab="", ylab="Number1", col=4, pch="0")                     #
lines(c(1:3), Summary$Number1[12,c(1,3,5)], type="b", col=4, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[13,c(1,3,5)], type="b", col=4, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[14,c(1,3,5)], type="b", col=4, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[15,c(1,3,5)], type="b", col=4, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[16,c(1,3,5)], type="b", col=4, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[17,c(1,3,5)], type="b", col=4, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[18,c(1,3,5)], type="b", col=4, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[19,c(1,3,5)], type="b", col=4, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[20,c(1,3,5)], type="b", col=4, lty=1, pch="9") #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
#
plot(c(1:3), Summary$Number1[21,c(1,3,5)], type="b", ylim=c(0,1), main="AIC N=30",          #
axes=FALSE, xlab="", ylab="Number1", col=2, pch="0")                   #
lines(c(1:3), Summary$Number1[22,c(1,3,5)], type="b", col=2, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[23,c(1,3,5)], type="b", col=2, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[24,c(1,3,5)], type="b", col=2, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[25,c(1,3,5)], type="b", col=2, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[26,c(1,3,5)], type="b", col=2, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[27,c(1,3,5)], type="b", col=2, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[28,c(1,3,5)], type="b", col=2, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[29,c(1,3,5)], type="b", col=2, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[30,c(1,3,5)], type="b", col=2, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
plot(c(1:3), Summary$Number1[1,c(2,4,6)], type="b", ylim=c(0,1), main="AICc N=100", axes=FALSE, xlab="", ylab="Number1", pch="0")           #
lines(c(1:3), Summary$Number1[2,c(2,4,6)], type="b", col=1, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[3,c(2,4,6)], type="b", col=1, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[4,c(2,4,6)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[5,c(2,4,6)], type="b", col=1, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[6,c(2,4,6)], type="b", col=1, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[7,c(2,4,6)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[8,c(2,4,6)], type="b", col=1, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[9,c(2,4,6)], type="b", col=1, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[10,c(2,4,6)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
#
plot(c(1:3), Summary$Number1[11,c(2,4,6)], type="b", ylim=c(0,1), main="AICc N=50",          #
axes=FALSE, xlab="", ylab="Number1", col=4, pch="0")           #
lines(c(1:3), Summary$Number1[12,c(2,4,6)], type="b", col=4, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[13,c(2,4,6)], type="b", col=4, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[14,c(2,4,6)], type="b", col=4, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[15,c(2,4,6)], type="b", col=4, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[16,c(2,4,6)], type="b", col=4, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[17,c(2,4,6)], type="b", col=4, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[18,c(2,4,6)], type="b", col=4, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[19,c(2,4,6)], type="b", col=4, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[20,c(2,4,6)], type="b", col=4, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
#
plot(c(1:3), Summary$Number1[21,c(2,4,6)], type="b", ylim=c(0,1), main="AICc N=30",          #
axes=FALSE, xlab="", ylab="Number1", col=2, pch="0")           #
lines(c(1:3), Summary$Number1[22,c(2,4,6)], type="b", col=2, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[23,c(2,4,6)], type="b", col=2, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[24,c(2,4,6)], type="b", col=2, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[25,c(2,4,6)], type="b", col=2, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[26,c(2,4,6)], type="b", col=2, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[27,c(2,4,6)], type="b", col=2, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[28,c(2,4,6)], type="b", col=2, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[29,c(2,4,6)], type="b", col=2, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[30,c(2,4,6)], type="b", col=2, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
plot(c(1:3), Summary$Number1[1,c(7,9,8)], type="b", ylim=c(0,1), main="BIC N=100",          #
axes=FALSE, xlab="", ylab="Number1", pch="0")            #
lines(c(1:3), Summary$Number1[2,c(7,9,8)], type="b", col=1, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[3,c(7,9,8)], type="b", col=1, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[4,c(7,9,8)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[5,c(7,9,8)], type="b", col=1, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[6,c(7,9,8)], type="b", col=1, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[7,c(7,9,8)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[8,c(7,9,8)], type="b", col=1, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[9,c(7,9,8)], type="b", col=1, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[10,c(7,9,8)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
#
plot(c(1:3), Summary$Number1[11,c(7,9,8)], type="b", ylim=c(0,1), main="BIC N=50",          #
axes=FALSE, xlab="", ylab="Number1", col=4, pch="0")            #
lines(c(1:3), Summary$Number1[12,c(7,9,8)], type="b", col=4, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[13,c(7,9,8)], type="b", col=4, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[14,c(7,9,8)], type="b", col=4, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[15,c(7,9,8)], type="b", col=4, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[16,c(7,9,8)], type="b", col=4, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[17,c(7,9,8)], type="b", col=4, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[18,c(7,9,8)], type="b", col=4, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[19,c(7,9,8)], type="b", col=4, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[20,c(7,9,8)], type="b", col=4, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
#
plot(c(1:3), Summary$Number1[21,c(7,9,8)], type="b", ylim=c(0,1), main="BIC N=30",          #
axes=FALSE, xlab="", ylab="Number1", col=2, pch="0")            #
lines(c(1:3), Summary$Number1[22,c(7,9,8)], type="b", col=2, lty=1, pch="1")         #
lines(c(1:3), Summary$Number1[23,c(7,9,8)], type="b", col=2, lty=1, pch="2")         #
lines(c(1:3), Summary$Number1[24,c(7,9,8)], type="b", col=2, lty=1, pch="3")         #
lines(c(1:3), Summary$Number1[25,c(7,9,8)], type="b", col=2, lty=1, pch="4")         #
lines(c(1:3), Summary$Number1[26,c(7,9,8)], type="b", col=2, lty=1, pch="5")         #
lines(c(1:3), Summary$Number1[27,c(7,9,8)], type="b", col=2, lty=1, pch="6")         #
lines(c(1:3), Summary$Number1[28,c(7,9,8)], type="b", col=2, lty=1, pch="7")         #
lines(c(1:3), Summary$Number1[29,c(7,9,8)], type="b", col=2, lty=1, pch="8")         #
lines(c(1:3), Summary$Number1[30,c(7,9,8)], type="b", col=2, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
########################################################################              #
# Plot of mean proportion of increases of AIC when a variable is added ##
########################################################################                        #
dev.new()              #
par(mfrow=c(3,3))              #
plot(c(1:3), Summary$Prop.increases[1,c(1,3,5)], type="b", ylim=c(0,1), main="AIC N=100",          #
axes=FALSE, xlab="", ylab="Prop.increases", pch="0")            #
lines(c(1:3), Summary$Prop.increases[4,c(1,3,5)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[7,c(1,3,5)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[10,c(1,3,5)], type="b", col=1, lty=1, pch="9")#
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
plot(c(1:3), Summary$Prop.increases[11,c(1,3,5)], type="b", ylim=c(0,1), main="AIC N=50",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")            #
lines(c(1:3), Summary$Prop.increases[14,c(1,3,5)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[17,c(1,3,5)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[20,c(1,3,5)], type="b", col=1, lty=1, pch="9") #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
#
plot(c(1:3), Summary$Prop.increases[1,c(1,3,5)], type="b", ylim=c(0,1), main="AIC N=30",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")            #
lines(c(1:3), Summary$Prop.increases[24,c(1,3,5)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[27,c(1,3,5)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[30,c(1,3,5)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
plot(c(1:3), Summary$Prop.increases[1,c(2,4,6)], type="b", ylim=c(0,1), main="AICc",          #
axes=FALSE, xlab="", ylab="Prop.increases", pch="0")            #
lines(c(1:3), Summary$Prop.increases[4,c(2,4,6)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[7,c(2,4,6)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[10,c(2,4,6)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
#
plot(c(1:3), Summary$Prop.increases[11,c(2,4,6)], type="b", ylim=c(0,1), main="AICc",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")            #
lines(c(1:3), Summary$Prop.increases[14,c(2,4,6)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[17,c(2,4,6)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[20,c(2,4,6)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
#
plot(c(1:3), Summary$Prop.increases[21,c(2,4,6)], type="b", ylim=c(0,1), main="AICc",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")            #
lines(c(1:3), Summary$Prop.increases[24,c(2,4,6)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[27,c(2,4,6)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[30,c(2,4,6)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))            #
plot(c(1:3), Summary$Prop.increases[1,c(7,9,8)], type="b", ylim=c(0,1), main="BIC",          #
axes=FALSE, xlab="", ylab="Prop.increases", pch="0")            #
lines(c(1:3), Summary$Prop.increases[4,c(7,9,8)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[7,c(7,9,8)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[10,c(7,9,8)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
#
plot(c(1:3), Summary$Prop.increases[11,c(7,9,8)], type="b", ylim=c(0,1), main="BIC",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")  #
lines(c(1:3), Summary$Prop.increases[14,c(7,9,8)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[17,c(7,9,8)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[20,c(7,9,8)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist")) #
#
plot(c(1:3), Summary$Prop.increases[21,c(7,9,8)], type="b", ylim=c(0,1), main="BIC",          #
axes=FALSE, xlab="", ylab="Prop.increases", col=1, pch="0")  #
lines(c(1:3), Summary$Prop.increases[24,c(7,9,8)], type="b", col=1, lty=1, pch="3")         #
lines(c(1:3), Summary$Prop.increases[27,c(7,9,8)], type="b", col=1, lty=1, pch="6")         #
lines(c(1:3), Summary$Prop.increases[30,c(7,9,8)], type="b", col=1, lty=1, pch="9")         #
box()              #
axis(2)              #
axis(1, at=c(1:3), labels=c("Node","Dist.corr","Dist"))
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=i)}
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}
dev.new()              #
par(mfrow=c(1,3))       #
#
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                 #
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5), pts, type="b", main="AICc node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5), pts, type="b", main="BIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))        #
dev.new()              #
par(mfrow=c(1,3))       #
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5), pts, type="b", main="AICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5), pts, type="b", main="AICcd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5), pts, type="b", main="BICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                   #
dev.new()              #
par(mfrow=c(1,3))       #
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5), pts, type="b", main="AIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))  #
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5), pts, type="b", main="AICc dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))   #
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5), pts, type="b", main="BIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4))#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
dev.new()              #
par(mfrow=c(1,3))       #
#
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                 #
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5), pts, type="b", main="AICc node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5), pts, type="b", main="BIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))        #
dev.new()              #
par(mfrow=c(1,3))       #
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5), pts, type="b", main="AICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5), pts, type="b", main="AICcd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250))#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5), pts, type="b", main="BICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                   #
dev.new()              #
par(mfrow=c(1,3))       #
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5), pts, type="b", main="AIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))  #
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5), pts, type="b", main="AICc dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))   #
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5), pts, type="b", main="BIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
dev.new()              #
par(mfrow=c(1,3))       #
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5), pts, type="b", main="AICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5), pts, type="b", main="AICcd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5), pts, type="b", main="BICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4")}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
dev.new()
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=0.1*10.05-i)}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2")}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=0.1*i-10.95)}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2",cex=0.1*i-10.95)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=(0.1*i-10.95))}
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=(0.1*i-10.95))}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2",cex=0.1*i-10.95)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=(0.1*i))}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2",cex=0.1*i-10.95)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=(0.1*i)-10)}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2",cex=0.1*i-10.95)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=(0.1*i)-5)}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2",cex=0.1*i-10.95)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=(0.1*i))}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2",cex=0.1*i-10.95)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=(i-10)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2",cex=0.1*i-10.95)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=(i-10)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2",cex=(i-10)*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=(i-10)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2",cex=(i-20)*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=(i-10.9)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2",cex=(i-20.9)*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
dev.new()              #
par(mfrow=c(1,3))       #
#
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=(i-10.9)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2",cex=(i-20.9)*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                 #
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5), pts, type="b", main="AICc node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4",cex=(i-10.9)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5), pts, type="b", main="BIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4",cex=(i-10.9)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))        #
dev.new()              #
par(mfrow=c(1,3))       #
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5), pts, type="b", main="AICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4", cex=(i-10.9*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5), pts, type="b", main="AICcd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4", cex=(i-10.9*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5), pts, type="b", main="BICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4", cex=(i-10.9*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                   #
dev.new()              #
par(mfrow=c(1,3))       #
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5), pts, type="b", main="AIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4", cex=(i-10.9*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))  #
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5), pts, type="b", main="AICc dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4", cex=(i-10.9*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))   #
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5), pts, type="b", main="BIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4", cex=(i-10.9*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
dev.new()              #
par(mfrow=c(1,3))       #
#
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=(i-10.9)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2",cex=(i-20.9)*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                 #
#
pts <- c(Summary$x1[1,2], Summary$x12[1,2], Summary$x123[1,2], Summary$x1234[1,2], Summary$x12345[1,2])#
plot(c(1:5), pts, type="b", main="AICc node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="4",cex=(i-10.9)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,2], Summary$x12[i,2], Summary$x123[i,2], Summary$x1234[i,2], Summary$x12345[i,2]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9)*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,7], Summary$x12[1,7], Summary$x123[1,7], Summary$x1234[1,7], Summary$x12345[1,7])#
plot(c(1:5), pts, type="b", main="BIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="4",cex=(i-10.9)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,7], Summary$x12[i,7], Summary$x123[i,7], Summary$x1234[i,7], Summary$x12345[i,7]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9)*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))        #
dev.new()              #
par(mfrow=c(1,3))       #
pts <- c(Summary$x1[1,3], Summary$x12[1,3], Summary$x123[1,3], Summary$x1234[1,3], Summary$x12345[1,3])#
plot(c(1:5), pts, type="b", main="AICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="4", cex=(i-10.9)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,3], Summary$x12[i,3], Summary$x123[i,3], Summary$x1234[i,3], Summary$x12345[i,3]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9)*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,4], Summary$x12[1,4], Summary$x123[1,4], Summary$x1234[1,4], Summary$x12345[1,4])#
plot(c(1:5), pts, type="b", main="AICcd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="4", cex=(i-10.9)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,4], Summary$x12[i,4], Summary$x123[i,4], Summary$x1234[i,4], Summary$x12345[i,4]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9)*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))#
pts <- c(Summary$x1[1,9], Summary$x12[1,9], Summary$x123[1,9], Summary$x1234[1,9], Summary$x12345[1,9])#
plot(c(1:5), pts, type="b", main="BICd dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="4", cex=(i-10.9)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,9], Summary$x12[i,9], Summary$x123[i,9], Summary$x1234[i,9], Summary$x12345[i,9]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9)*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))                   #
dev.new()              #
par(mfrow=c(1,3))       #
#
pts <- c(Summary$x1[1,5], Summary$x12[1,5], Summary$x123[1,5], Summary$x1234[1,5], Summary$x12345[1,5])#
plot(c(1:5), pts, type="b", main="AIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="4", cex=(i-10.9)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,5], Summary$x12[i,5], Summary$x123[i,5], Summary$x1234[i,5], Summary$x12345[i,5]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9)*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))  #
pts <- c(Summary$x1[1,6], Summary$x12[1,6], Summary$x123[1,6], Summary$x1234[1,6], Summary$x12345[1,6])#
plot(c(1:5), pts, type="b", main="AICc dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="4", cex=(i-10.9)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,6], Summary$x12[i,6], Summary$x123[i,6], Summary$x1234[i,6], Summary$x12345[i,6]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9)*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))   #
pts <- c(Summary$x1[1,8], Summary$x12[1,8], Summary$x123[1,8], Summary$x1234[1,8], Summary$x12345[1,8])#
plot(c(1:5), pts, type="b", main="BIC dist-based", xlab="", ylab="", axes=FALSE, ylim=c(0,1.5e4),cex=0.05)#
for(i in 2:10) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="4", cex=(i-10.9)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,8], Summary$x12[i,8], Summary$x123[i,8], Summary$x1234[i,8], Summary$x12345[i,8]); points(c(1:5), pts, type="b", col="2", cex=(i-20.9)*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
?legend
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250), cex=0.05, legend=TRUE)
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250), cex=0.05)
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250), cex=0.05)
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250), cex=0.05)#
legend = #
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=(i-10.9)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2",cex=(i-20.9)*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
legend = (5,5,legend="rho")
legend = (5,250,legend="rho")
legend = (x=5, y=250,legend="rho")
legend = (legend="rho")
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250), cex=0.05)#
legend = (legend="rho")
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250), cex=0.05)#
legend = (legend="rho")
pts <- c(Summary$x1[1,1], Summary$x12[1,1], Summary$x123[1,1], Summary$x1234[1,1], Summary$x12345[1,1])#
plot(c(1:5), pts, type="b", main="AIC node-based", xlab="", ylab="", axes=FALSE, ylim=c(0,250), cex=0.05)#
legend = (legend="rho")#
for(i in 2:10) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b",cex=0.1*i)}#
for(i in 11:20) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="4",cex=(i-10.9)*0.1)}#
for(i in 21:30) {pts <- c(Summary$x1[i,1], Summary$x12[i,1], Summary$x123[i,1], Summary$x1234[i,1], Summary$x12345[i,1]); points(c(1:5), pts, type="b", col="2",cex=(i-20.9)*0.1)}#
box()              #
axis(2)              #
axis(1, at=c(1:5), labels=c("x1","x12","x123","x1234","x12345"))
Erin L. Landguth#
## MRMCFun.R											#
##   Project Description: #
##	1. mantel.mc: Function to run simple and partial mantel test on #
##   	distance, barrier, and genetic matrices extracting information from #
##   	mutliple folders that were created through a batch or Monte Carlo #
##   	process.  Results outputted to MRMCgentoXXXXXX.csv - the correspond-#
#	ing Mantel test.#
##	2. mantel.mc.analysis: Function to read in MRMCgentoXXX.csv, calculate#
##	mean, sd, confidence intervals and plot these results.#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs... 								#
## MRMCRun.R is an example script to run this function 																	#
## Project Date: December 10, 2008								#
############################################################################
##################################
## Function code for Mantel tests#
##################################
mantel.mc <- function(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)#
{#
	#################################
	## 1. Read in sample information#
	#################################
	# Random draw#
	if (samplestyle == 'random')#
	{#
		sampledraw <- runif(sampleno,1,N)#
	}#
	# Known points draw#
	if (samplestyle == 'known')#
	{#
		sampledraw <- read.table(paste(sampledir,sep=""),sep=",",header=TRUE)#
		sampledraw <- sampledraw$SelectedID#
	}#
	# All points draw#
	if (samplestyle == 'all')#
	{#
		sampledraw <- seq(1,N)#
	}#
	# If nthfile has a length of 1, then create a vector#
	if (length(nthfile) == 1 && nthfile !=0)#
	{#
		nthfile <- seq(0,looptime,as.integer(nthfile))	#
	}#
	#######################
	## 2. Batch Loop Begin#
	#######################
	for (i in 1:batchno)#
	{#
		############################################
		## 3. Read in Data - Cost Distance Matrices#
		############################################
		# Read in barrier matrix#
		if (barrans == 'Y')#
		{#
			if (length(barrfilename) == 1)#
			{#
				barrier <- read.table(paste(barrdir,barrfilename[1],sep=""),sep=",",header=FALSE)#
			}#
			if (length(barrfilename) != 1)#
			{#
				barrier <- read.table(paste(barrdir,barrfilename[i],sep=""),sep=",",header=FALSE)#
			}#
			barrier <- as.matrix(barrier[,1:N])#
			barrier <- lower(barrier[sampledraw,sampledraw])#
		}#
		# Read in distance matrix	#
		if (distans == 'Y')#
		{#
			if (length(distfilename) == 1)#
			{#
				distance <- read.table(paste(distdir,distfilename[1],sep=""),sep=",",header=FALSE)#
			}#
			if (length(distfilename) != 1)#
			{#
				distance <- read.table(paste(distdir,distfilename[i],sep=""),sep=",",header=FALSE)#
			}#
			distance <- as.matrix(distance[,1:N])#
			distance <- lower(distance[sampledraw,sampledraw])#
		}#
		# Read in landscape matrix#
		if (landans == 'Y')#
		{#
			if (length(landfilename) == 1)#
			{#
				landscape <- read.table(paste(landdir,landfilename[1],sep=""),sep=",",header=FALSE)#
			}#
			if (length(landfilename) != 1)#
			{#
				landscape <- read.table(paste(landdir,landfilename[i],sep=""),sep=",",header=FALSE)#
			}#
			landscape <- as.matrix(landscape[,1:N])#
			landscape <- lower(landscape[sampledraw,sampledraw])#
		}#
		# Create batch directory string#
		batchfiledir <- paste(batchstring,'batchrun',as.character(i-1),sep="")		#
		#batchfiledir <- paste(batchstring,'batchrun',as.character(9),sep="")		#
		print(batchfiledir)		#
		#############################
		## 4. Monte Carlo Loop Begin#
		#############################
		for (j in 1:mcrunno)#
		{#
			# Create Monte Carlo directory string#
			mcfiledir <- paste('mcrun',as.character(j-1),'/',sep="")#
			print(mcfiledir)#
			######################################
			## 5. Preliminary vector storage work#
			######################################
			# Create empty vectors to append to for mantelr,pval1,llim,ulim: check all cases#
			# Simple genetic ~ distance#
			if (gentodist.ans=='Y')#
			{#
				gentodist.mr <- c()#
				gentodist.pv1 <- c()#
				gentodist.pv2 <- c()#
				gentodist.pv3 <- c()#
			}#
			# Simple genetic ~ barrier#
			if (gentobarr.ans=='Y')#
			{#
				gentobarr.mr <- c()#
				gentobarr.pv1 <- c()#
				gentobarr.pv2 <- c()#
				gentobarr.pv3 <- c()#
			}#
			# Simple genetic ~ landscape#
			if (gentoland.ans=='Y')#
			{#
				gentoland.mr <- c()#
				gentoland.pv1 <- c()#
				gentoland.pv2 <- c()#
				gentoland.pv3 <- c()#
			}#
			# Partial genetic ~ distance|barrier#
			if (gentodist.barr.ans=='Y')#
			{#
				gentodist.barr.mr <- c()#
				gentodist.barr.pv1 <- c()#
				gentodist.barr.pv2 <- c()#
				gentodist.barr.pv3 <- c()#
			}#
			# Partial genetic ~ distance|landscape#
			if (gentodist.land.ans=='Y')#
			{#
				gentodist.land.mr <- c()#
				gentodist.land.pv1 <- c()#
				gentodist.land.pv2 <- c()#
				gentodist.land.pv3 <- c()#
			}#
			# Partial genetic ~ barrier|landscape#
			if (gentobarr.land.ans=='Y')#
			{#
				gentobarr.land.mr <- c()#
				gentobarr.land.pv1 <- c()#
				gentobarr.land.pv2 <- c()#
				gentobarr.land.pv3 <- c()#
			}#
			# Partial genetic ~ barrier|distance#
			if (gentobarr.dist.ans=='Y')#
			{#
				gentobarr.dist.mr <- c()#
				gentobarr.dist.pv1 <- c()#
				gentobarr.dist.pv2 <- c()#
				gentobarr.dist.pv3 <- c()#
			}#
			# Partial genetic ~ landscape|distance#
			if (gentoland.dist.ans=='Y')#
			{#
				gentoland.dist.mr <- c()#
				gentoland.dist.pv1 <- c()#
				gentoland.dist.pv2 <- c()#
				gentoland.dist.pv3 <- c()#
			}#
			# Partial genetic ~ landscape|barrier#
			if (gentoland.barr.ans=='Y')#
			{#
				gentoland.barr.mr <- c()#
				gentoland.barr.pv1 <- c()#
				gentoland.barr.pv2 <- c()#
				gentoland.barr.pv3 <- c()#
			}#
			####################################################################
			## 6. Mantel Test: #
			##	Simple: genetic ~ distance#
			##	Simple: genetic ~ barrier#
			##	Partial: genetic ~ distance|barrier#
			##	Partial: genetic ~ barrier|distance#
			##	Partial: genetic ~ distance|distance#
			##	Mantel Correlogram for each of the above or specified.#
			####################################################################
			# Start for loop through each Gdmatrix#
			for (k in 1:length(nthfile))#
			{#
				# Read in genetic distance matrix - piece it up for character read#
				file1 <- as.character(nthfile[k])		# For specified nthfile#
				file2 <- ".csv"#
				genetic <- read.table(paste(gddir,batchfiledir,mcfiledir,gdfilename,file1,file2,sep=""),sep=",",header=FALSE)#
				genetic <- as.matrix(genetic[,1:N])#
				print(nthfile[k])#
				# Make matrices lower#
				genetic <- lower(genetic[sampledraw,sampledraw])#
				# Run Mantel appending results to empty vector: distance#
				if (gentodist.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~distance, nperm=mperms, nboot=0)#
					# Append loop information#
					gentodist.mr <- append(gentodist.mr,mantelrun[1])#
					gentodist.pv1 <- append(gentodist.pv1,mantelrun[2])#
					gentodist.pv2 <- append(gentodist.pv2,mantelrun[3])#
					gentodist.pv3 <- append(gentodist.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentodist.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentodist.mgram <- mgram(genetic,distance,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: barrier#
				if (gentobarr.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~barrier, nperm=mperms, nboot=0)#
					# Append loop information#
					gentobarr.mr <- append(gentobarr.mr,mantelrun[1])#
					gentobarr.pv1 <- append(gentobarr.pv1,mantelrun[2])#
					gentobarr.pv2 <- append(gentobarr.pv2,mantelrun[3])#
					gentobarr.pv3 <- append(gentobarr.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentobarr.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentobarr.mgram <- mgram(genetic,barrier,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: landscape#
				if (gentoland.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~landscape, nperm=mperms, nboot=0)#
					# Append loop information#
					gentoland.mr <- append(gentoland.mr,mantelrun[1])#
					gentoland.pv1 <- append(gentoland.pv1,mantelrun[2])#
					gentoland.pv2 <- append(gentoland.pv2,mantelrun[3])#
					gentoland.pv3 <- append(gentoland.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentoland.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentoland.mgram <- mgram(genetic,landscape,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: distance|barrier#
				if (gentodist.barr.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~distance+barrier, nperm=mperms, nboot=0)#
					# Append loop information#
					gentodist.barr.mr <- append(gentodist.barr.mr,mantelrun[1])#
					gentodist.barr.pv1 <- append(gentodist.barr.pv1,mantelrun[2])#
					gentodist.barr.pv2 <- append(gentodist.barr.pv2,mantelrun[3])#
					gentodist.barr.pv3 <- append(gentodist.barr.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentodist.barr.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentodist.barr.mgram <- mgram(genetic,distance+barrier,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: distance|landscape#
				if (gentodist.land.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~distance+landscape, nperm=mperms, nboot=0)#
					# Append loop information#
					gentodist.land.mr <- append(gentodist.land.mr,mantelrun[1])#
					gentodist.land.pv1 <- append(gentodist.land.pv1,mantelrun[2])#
					gentodist.land.pv2 <- append(gentodist.land.pv2,mantelrun[3])#
					gentodist.land.pv3 <- append(gentodist.land.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentodist.land.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentodist.land.mgram <- mgram(genetic,distance+landscape,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: barrier|distance#
				if (gentobarr.dist.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~barrier+distance, nperm=mperms, nboot=0)#
					# Append loop information#
					gentobarr.dist.mr <- append(gentobarr.dist.mr,mantelrun[1])#
					gentobarr.dist.pv1 <- append(gentobarr.dist.pv1,mantelrun[2])#
					gentobarr.dist.pv2 <- append(gentobarr.dist.pv2,mantelrun[3])#
					gentobarr.dist.pv3 <- append(gentobarr.dist.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentobarr.dist.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentobarr.dist.mgram <- mgram(genetic,barrier+distance,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: barrier|landscape#
				if (gentobarr.land.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~barrier+landscape, nperm=mperms, nboot=0)#
					# Append loop information#
					gentobarr.land.mr <- append(gentobarr.land.mr,mantelrun[1])#
					gentobarr.land.pv1 <- append(gentobarr.land.pv1,mantelrun[2])#
					gentobarr.land.pv2 <- append(gentobarr.land.pv2,mantelrun[3])#
					gentobarr.land.pv3 <- append(gentobarr.land.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentobarr.land.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentobarr.land.mgram <- mgram(genetic,barrier+landscape,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: landscape|distance#
				if (gentoland.dist.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~landscape+distance, nperm=mperms, nboot=0)#
					# Append loop information#
					gentoland.dist.mr <- append(gentoland.dist.mr,mantelrun[1])#
					gentoland.dist.pv1 <- append(gentoland.dist.pv1,mantelrun[2])#
					gentoland.dist.pv2 <- append(gentoland.dist.pv2,mantelrun[3])#
					gentoland.dist.pv3 <- append(gentoland.dist.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentoland.dist.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentoland.dist.mgram <- mgram(genetic,landscape+distance,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: landscape|barrier#
				if (gentoland.barr.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~landscape+barrier, nperm=mperms, nboot=0)#
					# Append loop information#
					gentoland.barr.mr <- append(gentoland.barr.mr,mantelrun[1])#
					gentoland.barr.pv1 <- append(gentoland.barr.pv1,mantelrun[2])#
					gentoland.barr.pv2 <- append(gentoland.barr.pv2,mantelrun[3])#
					gentoland.barr.pv3 <- append(gentoland.barr.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentoland.barr.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentoland.barr.mgram <- mgram(genetic,landscape+barrier,nperm=mperms)#
						}#
					}#
				}# Last Mantel Run End#
			}# Mantel Loop End#
			########################################
			## 7. Output mantel information to file#
			#######################################				#
			## Transpose and data.frame vectors and then print and write to file#
			if (gentodist.ans=='Y')#
			{#
				gentodist.mr <- t(data.frame(gentodist.mr))#
				gentodist.pv1 <- t(data.frame(gentodist.pv1))#
				gentodist.pv2 <- t(data.frame(gentodist.pv2))#
				gentodist.pv3 <- t(data.frame(gentodist.pv3))#
				# File name#
				fileoutputname <- "MRMCgentodist.csv"#
				write.table(gentodist.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentodist.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentodist.csv"#
					write.table(t(data.frame(gentodist.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}			#
			}#
			# Simple genetic ~ barrier#
			if (gentobarr.ans=='Y')#
			{#
				gentobarr.mr <- t(data.frame(gentobarr.mr))#
				gentobarr.pv1 <- t(data.frame(gentobarr.pv1))#
				gentobarr.pv2 <- t(data.frame(gentobarr.pv2))#
				gentobarr.pv3 <- t(data.frame(gentobarr.pv3))#
				# File name#
				fileoutputname <- "MRMCgentobarr.csv"#
				write.table(gentobarr.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentobarr.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentobarr.csv"#
					write.table(t(data.frame(gentobarr.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Simple genetic ~ landscape#
			if (gentoland.ans=='Y')#
			{#
				gentoland.mr <- t(data.frame(gentoland.mr))#
				gentoland.pv1 <- t(data.frame(gentoland.pv1))#
				gentoland.pv2 <- t(data.frame(gentoland.pv2))#
				gentoland.pv3 <- t(data.frame(gentoland.pv3))#
				# File name#
				fileoutputname <- "MRMCgentoland.csv"#
				write.table(gentoland.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentoland.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentoland.csv"#
					write.table(t(data.frame(gentoland.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ distance|barrier#
			if (gentodist.barr.ans=='Y')#
			{#
				gentodist.barr.mr <- t(data.frame(gentodist.barr.mr))#
				gentodist.barr.pv1 <- t(data.frame(gentodist.barr.pv1))#
				gentodist.barr.pv2 <- t(data.frame(gentodist.barr.pv2))#
				gentodist.barr.pv3 <- t(data.frame(gentodist.barr.pv3))#
				# File name#
				fileoutputname <- "MRMCgentodist.barr.csv"#
				write.table(gentodist.barr.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.barr.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.barr.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.barr.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentodist.barr.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentodist.barr.csv"#
					write.table(t(data.frame(gentodist.barr.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.barr.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.barr.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ distance|landscape#
			if (gentodist.land.ans=='Y')#
			{#
				gentodist.land.mr <- t(data.frame(gentodist.land.mr))#
				gentodist.land.pv1 <- t(data.frame(gentodist.land.pv1))#
				gentodist.land.pv2 <- t(data.frame(gentodist.land.pv2))#
				gentodist.land.pv3 <- t(data.frame(gentodist.land.pv3))#
				# File name#
				fileoutputname <- "MRMCgentodist.land.csv"#
				write.table(gentodist.land.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.land.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.land.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.land.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentodist.land.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentodist.land.csv"#
					write.table(t(data.frame(gentodist.land.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.land.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.land.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ barrier|landscape#
			if (gentobarr.land.ans=='Y')#
			{#
				gentobarr.land.mr <- t(data.frame(gentobarr.land.mr))#
				gentobarr.land.pv1 <- t(data.frame(gentobarr.land.pv1))#
				gentobarr.land.pv2 <- t(data.frame(gentobarr.land.pv2))#
				gentobarr.land.pv3 <- t(data.frame(gentobarr.land.pv3))#
				# File name#
				fileoutputname <- "MRMCgentobarr.land.csv"#
				write.table(gentobarr.land.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.land.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.land.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.land.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentobarr.land.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentobarr.land.csv"#
					write.table(t(data.frame(gentobarr.land.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.land.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.land.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ barrier|distance#
			if (gentobarr.dist.ans=='Y')#
			{#
				gentobarr.dist.mr <- t(data.frame(gentobarr.dist.mr))#
				gentobarr.dist.pv1 <- t(data.frame(gentobarr.dist.pv1))#
				gentobarr.dist.pv2 <- t(data.frame(gentobarr.dist.pv2))#
				gentobarr.dist.pv3 <- t(data.frame(gentobarr.dist.pv3))#
				# File name#
				fileoutputname <- "MRMCgentobarr.dist.csv"#
				write.table(gentobarr.dist.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.dist.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.dist.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.dist.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentobarr.dist.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentobarr.dist.csv"#
					write.table(t(data.frame(gentobarr.dist.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.dist.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.dist.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ landscape|distance#
			if (gentoland.dist.ans=='Y')#
			{#
				gentoland.dist.mr <- t(data.frame(gentoland.dist.mr))#
				gentoland.dist.pv1 <- t(data.frame(gentoland.dist.pv1))#
				gentoland.dist.pv2 <- t(data.frame(gentoland.dist.pv2))#
				gentoland.dist.pv3 <- t(data.frame(gentoland.dist.pv3))#
				# File name#
				fileoutputname <- "MRMCgentoland.dist.csv"#
				write.table(gentoland.dist.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.dist.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.dist.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.dist.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentoland.dist.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentoland.dist.csv"#
					write.table(t(data.frame(gentoland.dist.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.dist.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.dist.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ landscape|barrier#
			if (gentoland.barr.ans=='Y')#
			{#
				gentoland.barr.mr <- t(data.frame(gentoland.barr.mr))#
				gentoland.barr.pv1 <- t(data.frame(gentoland.barr.pv1))#
				gentoland.barr.pv2 <- t(data.frame(gentoland.barr.pv2))#
				gentoland.barr.pv3 <- t(data.frame(gentoland.barr.pv3))#
				# File name#
				fileoutputname <- "MRMCgentoland.barr.csv"#
				write.table(gentoland.barr.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.barr.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.barr.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.barr.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentoland.barr.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentoland.barr.csv"#
					write.table(t(data.frame(gentoland.barr.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.barr.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.barr.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
		}# Monte Carlo Loop End		#
	}# Batch Loop End#
}# Function End#
##################################################
## Function code for Mantel analysis and plotting#
##################################################
mantel.mc.analysis <- function(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)#
{#
	###########################################################################
	## For specified Mantel analysis (must be a file allready created for it):#
	##	1. Create storage mean and sd vectors#
	##	2. Read in file#
	##	3. Loop the file, storing and then take the mean and sd and error.#
	##	4. Calculate the SE, and left and right bars#
	##	5. Write information back to file...appending mean,sd,error,left,right#
	##	6. Plot results if specified.#
	###########################################################################
	# Storage vectors to be return by function#
	gentodist.mr.mean <- c()#
	gentodist.mr.left <- c()#
	gentodist.mr.right <- c()#
	gentodist.mg.mean <- c()#
	gentodist.mg.left <- c()#
	gentodist.mg.right <- c()#
	gentodist.mg.lag <- c()#
	gentobarr.mr.mean <- c()#
	gentobarr.mr.left <- c()#
	gentobarr.mr.right <- c()#
	gentobarr.mg.mean <- c()#
	gentobarr.mg.left <- c()#
	gentobarr.mg.right <- c()#
	gentobarr.mg.lag <- c()#
	gentoland.mr.mean <- c()#
	gentoland.mr.left <- c()#
	gentoland.mr.right <- c()#
	gentoland.mg.mean <- c()#
	gentoland.mg.left <- c()#
	gentoland.mg.right <- c()#
	gentoland.mg.lag <- c()#
	gentodist.barr.mr.mean <- c()#
	gentodist.barr.mr.left <- c()#
	gentodist.barr.mr.right <- c()#
	gentodist.barr.mg.mean <- c()#
	gentodist.barr.mg.left <- c()#
	gentodist.barr.mg.right <- c()#
	gentodist.barr.mg.lag <- c()#
	gentobarr.dist.mr.mean <- c()#
	gentobarr.dist.mr.left <- c()#
	gentobarr.dist.mr.right <- c()#
	gentobarr.dist.mg.mean <- c()#
	gentobarr.dist.mg.left <- c()#
	gentobarr.dist.mg.right <- c()#
	gentobarr.dist.mg.lag <- c()#
	gentoland.barr.mr.mean <- c()#
	gentoland.barr.mr.left <- c()#
	gentoland.barr.mr.right <- c()#
	gentoland.barr.mg.mean <- c()#
	gentoland.barr.mg.left <- c()#
	gentoland.barr.mg.right <- c()#
	gentoland.barr.mg.lag <- c()#
	gentodist.land.mr.mean <- c()#
	gentodist.land.mr.left <- c()#
	gentodist.land.mr.right <- c()#
	gentodist.land.mg.mean <- c()#
	gentodist.land.mg.left <- c()#
	gentodist.land.mg.right <- c()#
	gentodist.land.mg.lag <- c()#
	gentobarr.land.mr.mean <- c()#
	gentobarr.land.mr.left <- c()#
	gentobarr.land.mr.right <- c()#
	gentobarr.land.mg.mean <- c()#
	gentobarr.land.mg.left <- c()#
	gentobarr.land.mg.right <- c()#
	gentobarr.land.mg.lag <- c()#
	gentoland.dist.mr.mean <- c()#
	gentoland.dist.mr.left <- c()#
	gentoland.dist.mr.right <- c()#
	gentoland.dist.mg.mean <- c()#
	gentoland.dist.mg.left <- c()#
	gentoland.dist.mg.right <- c()#
	gentoland.dist.mg.lag <- c()	#
	# Create mean and sd storage vectors and open file#
	# Simple genetic ~ distance#
	if (gentodist.ans=='Y')#
	{#
		# Storage vectors#
		gentodist.mr.mean <- c()#
		gentodist.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentodist.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentodist.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentodist.mr.mean <- append(gentodist.mr.mean,mean(meantemp))#
			gentodist.mr.sd <- append(gentodist.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentodist.mr.error <- qnorm(0.975)*gentodist.mr.sd/sqrt((mcrunno*batchno))#
		gentodist.mr.left <- gentodist.mr.mean - gentodist.mr.error#
		gentodist.mr.right <- gentodist.mr.mean + gentodist.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentodist.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentodist.ans == 'Y')#
		{#
			# Storage vectors#
			gentodist.mg.mean <- c()#
			gentodist.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentodist.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentodist.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentodist.mg.mean <- append(gentodist.mg.mean,mean(meantemp))#
				gentodist.mg.sd <- append(gentodist.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentodist.mg.error <- qnorm(0.975)*gentodist.mg.sd/sqrt((mcrunno*batchno))#
			gentodist.mg.left <- gentodist.mg.mean - gentodist.mg.error#
			gentodist.mg.right <- gentodist.mg.mean + gentodist.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentodist.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentodist.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Simple genetic ~ barrier#
	if (gentobarr.ans=='Y')#
	{#
		# Storage vectors#
		gentobarr.mr.mean <- c()#
		gentobarr.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentobarr.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentobarr.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentobarr.mr.mean <- append(gentobarr.mr.mean,mean(meantemp))#
			gentobarr.mr.sd <- append(gentobarr.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentobarr.mr.error <- qnorm(0.975)*gentobarr.mr.sd/sqrt((mcrunno*batchno))#
		gentobarr.mr.left <- gentobarr.mr.mean - gentobarr.mr.error#
		gentobarr.mr.right <- gentobarr.mr.mean + gentobarr.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentobarr.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentobarr.ans == 'Y')#
		{#
			# Storage vectors#
			gentobarr.mg.mean <- c()#
			gentobarr.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentobarr.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentobarr.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentobarr.mg.mean <- append(gentobarr.mg.mean,mean(meantemp))#
				gentobarr.mg.sd <- append(gentobarr.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentobarr.mg.error <- qnorm(0.975)*gentobarr.mg.sd/sqrt((mcrunno*batchno))#
			gentobarr.mg.left <- gentobarr.mg.mean - gentobarr.mg.error#
			gentobarr.mg.right <- gentobarr.mg.mean + gentobarr.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentobarr.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentobarr.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Simple genetic ~ landscape#
	if (gentoland.ans=='Y')#
	{#
		# Storage vectors#
		gentoland.mr.mean <- c()#
		gentoland.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentoland.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentoland.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentoland.mr.mean <- append(gentoland.mr.mean,mean(meantemp))#
			gentoland.mr.sd <- append(gentoland.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentoland.mr.error <- qnorm(0.975)*gentoland.mr.sd/sqrt((mcrunno*batchno))#
		gentoland.mr.left <- gentoland.mr.mean - gentoland.mr.error#
		gentoland.mr.right <- gentoland.mr.mean + gentoland.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentoland.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentoland.ans == 'Y')#
		{#
			# Storage vectors#
			gentoland.mg.mean <- c()#
			gentoland.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentoland.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentoland.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentoland.mg.mean <- append(gentoland.mg.mean,mean(meantemp))#
				gentoland.mg.sd <- append(gentoland.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentoland.mg.error <- qnorm(0.975)*gentoland.mg.sd/sqrt((mcrunno*batchno))#
			gentoland.mg.left <- gentoland.mg.mean - gentoland.mg.error#
			gentoland.mg.right <- gentoland.mg.mean + gentoland.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentoland.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentoland.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ distance|barrier#
	if (gentodist.barr.ans=='Y')#
	{#
		# Storage vectors#
		gentodist.barr.mr.mean <- c()#
		gentodist.barr.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentodist.barr.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentodist.barr.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentodist.barr.mr.mean <- append(gentodist.barr.mr.mean,mean(meantemp))#
			gentodist.barr.mr.sd <- append(gentodist.barr.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentodist.barr.mr.error <- qnorm(0.975)*gentodist.barr.mr.sd/sqrt((mcrunno*batchno))#
		gentodist.barr.mr.left <- gentodist.barr.mr.mean - gentodist.barr.mr.error#
		gentodist.barr.mr.right <- gentodist.barr.mr.mean + gentodist.barr.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentodist.barr.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentodist.barr.ans == 'Y')#
		{#
			# Storage vectors#
			gentodist.barr.mg.mean <- c()#
			gentodist.barr.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentodist.barr.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentodist.barr.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentodist.barr.mg.mean <- append(gentodist.barr.mg.mean,mean(meantemp))#
				gentodist.barr.mg.sd <- append(gentodist.barr.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentodist.barr.mg.error <- qnorm(0.975)*gentodist.barr.mg.sd/sqrt((mcrunno*batchno))#
			gentodist.barr.mg.left <- gentodist.barr.mg.mean - gentodist.barr.mg.error#
			gentodist.barr.mg.right <- gentodist.barr.mg.mean + gentodist.barr.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentodist.barr.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentodist.barr.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ distance|landscape#
	if (gentodist.land.ans=='Y')#
	{#
		# Storage vectors#
		gentodist.land.mr.mean <- c()#
		gentodist.land.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentodist.land.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentodist.land.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentodist.land.mr.mean <- append(gentodist.land.mr.mean,mean(meantemp))#
			gentodist.land.mr.sd <- append(gentodist.land.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentodist.land.mr.error <- qnorm(0.975)*gentodist.land.mr.sd/sqrt((mcrunno*batchno))#
		gentodist.land.mr.left <- gentodist.land.mr.mean - gentodist.land.mr.error#
		gentodist.land.mr.right <- gentodist.land.mr.mean + gentodist.land.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentodist.land.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentodist.land.ans == 'Y')#
		{#
			# Storage vectors#
			gentodist.land.mg.mean <- c()#
			gentodist.land.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentodist.land.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentodist.land.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentodist.land.mg.mean <- append(gentodist.land.mg.mean,mean(meantemp))#
				gentodist.land.mg.sd <- append(gentodist.land.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentodist.land.mg.error <- qnorm(0.975)*gentodist.land.mg.sd/sqrt((mcrunno*batchno))#
			gentodist.land.mg.left <- gentodist.land.mg.mean - gentodist.land.mg.error#
			gentodist.land.mg.right <- gentodist.land.mg.mean + gentodist.land.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentodist.land.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentodist.land.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ barrier|landscape#
	if (gentobarr.land.ans=='Y')#
	{#
		# Storage vectors#
		gentobarr.land.mr.mean <- c()#
		gentobarr.land.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentobarr.land.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentobarr.land.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentobarr.land.mr.mean <- append(gentobarr.land.mr.mean,mean(meantemp))#
			gentobarr.land.mr.sd <- append(gentobarr.land.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentobarr.land.mr.error <- qnorm(0.975)*gentobarr.land.mr.sd/sqrt((mcrunno*batchno))#
		gentobarr.land.mr.left <- gentobarr.land.mr.mean - gentobarr.land.mr.error#
		gentobarr.land.mr.right <- gentobarr.land.mr.mean + gentobarr.land.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentobarr.land.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentobarr.land.ans == 'Y')#
		{#
			# Storage vectors#
			gentobarr.land.mg.mean <- c()#
			gentobarr.land.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentobarr.land.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentobarr.land.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentobarr.land.mg.mean <- append(gentobarr.land.mg.mean,mean(meantemp))#
				gentobarr.land.mg.sd <- append(gentobarr.land.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentobarr.land.mg.error <- qnorm(0.975)*gentobarr.land.mg.sd/sqrt((mcrunno*batchno))#
			gentobarr.land.mg.left <- gentobarr.land.mg.mean - gentobarr.land.mg.error#
			gentobarr.land.mg.right <- gentobarr.land.mg.mean + gentobarr.land.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentobarr.land.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentobarr.land.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ barrier|distance#
	if (gentobarr.dist.ans=='Y')#
	{#
		# Storage vectors#
		gentobarr.dist.mr.mean <- c()#
		gentobarr.dist.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentobarr.dist.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentobarr.dist.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentobarr.dist.mr.mean <- append(gentobarr.dist.mr.mean,mean(meantemp))#
			gentobarr.dist.mr.sd <- append(gentobarr.dist.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentobarr.dist.mr.error <- qnorm(0.975)*gentobarr.dist.mr.sd/sqrt((mcrunno*batchno))#
		gentobarr.dist.mr.left <- gentobarr.dist.mr.mean - gentobarr.dist.mr.error#
		gentobarr.dist.mr.right <- gentobarr.dist.mr.mean + gentobarr.dist.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentobarr.dist.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentobarr.dist.ans == 'Y')#
		{#
			# Storage vectors#
			gentobarr.dist.mg.mean <- c()#
			gentobarr.dist.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentobarr.dist.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentobarr.dist.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentobarr.dist.mg.mean <- append(gentobarr.dist.mg.mean,mean(meantemp))#
				gentobarr.dist.mg.sd <- append(gentobarr.dist.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentobarr.dist.mg.error <- qnorm(0.975)*gentobarr.dist.mg.sd/sqrt((mcrunno*batchno))#
			gentobarr.dist.mg.left <- gentobarr.dist.mg.mean - gentobarr.dist.mg.error#
			gentobarr.dist.mg.right <- gentobarr.dist.mg.mean + gentobarr.dist.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentobarr.dist.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentobarr.dist.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ landscape|distance#
	if (gentoland.dist.ans=='Y')#
	{#
		# Storage vectors#
		gentoland.dist.mr.mean <- c()#
		gentoland.dist.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentoland.dist.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentoland.dist.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentoland.dist.mr.mean <- append(gentoland.dist.mr.mean,mean(meantemp))#
			gentoland.dist.mr.sd <- append(gentoland.dist.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentoland.dist.mr.error <- qnorm(0.975)*gentoland.dist.mr.sd/sqrt((mcrunno*batchno))#
		gentoland.dist.mr.left <- gentoland.dist.mr.mean - gentoland.dist.mr.error#
		gentoland.dist.mr.right <- gentoland.dist.mr.mean + gentoland.dist.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentoland.dist.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentoland.dist.ans == 'Y')#
		{#
			# Storage vectors#
			gentoland.dist.mg.mean <- c()#
			gentoland.dist.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentoland.dist.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentoland.dist.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentoland.dist.mg.mean <- append(gentoland.dist.mg.mean,mean(meantemp))#
				gentoland.dist.mg.sd <- append(gentoland.dist.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentoland.dist.mg.error <- qnorm(0.975)*gentoland.dist.mg.sd/sqrt((mcrunno*batchno))#
			gentoland.dist.mg.left <- gentoland.dist.mg.mean - gentoland.dist.mg.error#
			gentoland.dist.mg.right <- gentoland.dist.mg.mean + gentoland.dist.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentoland.dist.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentoland.dist.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ landscape|barrier#
	if (gentoland.barr.ans=='Y')#
	{#
		# Storage vectors#
		gentoland.barr.mr.mean <- c()#
		gentoland.barr.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentoland.barr.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentoland.barr.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentoland.barr.mr.mean <- append(gentoland.barr.mr.mean,mean(meantemp))#
			gentoland.barr.mr.sd <- append(gentoland.barr.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentoland.barr.mr.error <- qnorm(0.975)*gentoland.barr.mr.sd/sqrt((mcrunno*batchno))#
		gentoland.barr.mr.left <- gentoland.barr.mr.mean - gentoland.barr.mr.error#
		gentoland.barr.mr.right <- gentoland.barr.mr.mean + gentoland.barr.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentoland.barr.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentoland.barr.ans == 'Y')#
		{#
			# Storage vectors#
			gentoland.barr.mg.mean <- c()#
			gentoland.barr.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentoland.barr.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentoland.barr.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentoland.barr.mg.mean <- append(gentoland.barr.mg.mean,mean(meantemp))#
				gentoland.barr.mg.sd <- append(gentoland.barr.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentoland.barr.mg.error <- qnorm(0.975)*gentoland.barr.mg.sd/sqrt((mcrunno*batchno))#
			gentoland.barr.mg.left <- gentoland.barr.mg.mean - gentoland.barr.mg.error#
			gentoland.barr.mg.right <- gentoland.barr.mg.mean + gentoland.barr.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentoland.barr.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentoland.barr.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
#Return values#
list(gentodist.mr.mean=gentodist.mr.mean,#
	gentodist.mr.left=gentodist.mr.left,#
	gentodist.mr.right=gentodist.mr.right,#
	gentodist.mg.mean=gentodist.mg.mean,#
	gentodist.mg.left=gentodist.mg.left,#
	gentodist.mg.right=gentodist.mg.right,#
	gentodist.mg.lag=gentodist.mg.lag,#
	gentobarr.mr.mean=gentobarr.mr.mean,#
	gentobarr.mr.left=gentobarr.mr.left,#
	gentobarr.mr.right=gentobarr.mr.right,#
	gentobarr.mg.mean=gentobarr.mg.mean,#
	gentobarr.mg.left=gentobarr.mg.left,#
	gentobarr.mg.right=gentobarr.mg.right,#
	gentobarr.mg.lag=gentobarr.mg.lag,#
	gentoland.mr.mean=gentoland.mr.mean,#
	gentoland.mr.left=gentoland.mr.left,#
	gentoland.mr.right=gentoland.mr.right,#
	gentoland.mg.mean=gentoland.mg.mean,#
	gentoland.mg.left=gentoland.mg.left,#
	gentoland.mg.right=gentoland.mg.right,#
	gentoland.mg.lag=gentoland.mg.lag,#
	gentodist.barr.mr.mean=gentodist.barr.mr.mean,#
	gentodist.barr.mr.left=gentodist.barr.mr.left,#
	gentodist.barr.mr.right=gentodist.barr.mr.right,#
	gentodist.barr.mg.mean=gentodist.barr.mg.mean,#
	gentodist.barr.mg.left=gentodist.barr.mg.left,#
	gentodist.barr.mg.right=gentodist.barr.mg.right,#
	gentodist.barr.mg.lag=gentodist.barr.mg.lag,#
	gentobarr.dist.mr.mean=gentobarr.dist.mr.mean,#
	gentobarr.dist.mr.left=gentobarr.dist.mr.left,#
	gentobarr.dist.mr.right=gentobarr.dist.mr.right,#
	gentobarr.dist.mg.mean=gentobarr.dist.mg.mean,#
	gentobarr.dist.mg.left=gentobarr.dist.mg.left,#
	gentobarr.dist.mg.right=gentobarr.dist.mg.right,#
	gentobarr.dist.mg.lag=gentobarr.dist.mg.lag,#
	gentoland.barr.mr.mean=gentoland.barr.mr.mean,#
	gentoland.barr.mr.left=gentoland.barr.mr.left,#
	gentoland.barr.mr.right=gentoland.barr.mr.right,#
	gentoland.barr.mg.mean=gentoland.barr.mg.mean,#
	gentoland.barr.mg.left=gentoland.barr.mg.left,#
	gentoland.barr.mg.right=gentoland.barr.mg.right,#
	gentoland.barr.mg.lag=gentoland.barr.mg.lag,#
	gentodist.land.mr.mean=gentodist.land.mr.mean,#
	gentodist.land.mr.left=gentodist.land.mr.left,#
	gentodist.land.mr.right=gentodist.land.mr.right,#
	gentodist.land.mg.mean=gentodist.land.mg.mean,#
	gentodist.land.mg.left=gentodist.land.mg.left,#
	gentodist.land.mg.right=gentodist.land.mg.right,#
	gentodist.land.mg.lag=gentodist.land.mg.lag,#
	gentobarr.land.mr.mean=gentobarr.land.mr.mean,#
	gentobarr.land.mr.left=gentobarr.land.mr.left,#
	gentobarr.land.mr.right=gentobarr.land.mr.right,#
	gentobarr.land.mg.mean=gentobarr.land.mg.mean,#
	gentobarr.land.mg.left=gentobarr.land.mg.left,#
	gentobarr.land.mg.right=gentobarr.land.mg.right,#
	gentobarr.land.mg.lag=gentobarr.land.mg.lag,#
	gentoland.dist.mr.mean=gentoland.dist.mr.mean,#
	gentoland.dist.mr.left=gentoland.dist.mr.left,#
	gentoland.dist.mr.right=gentoland.dist.mr.right,#
	gentoland.dist.mg.mean=gentoland.dist.mg.mean,#
	gentoland.dist.mg.left=gentoland.dist.mg.left,#
	gentoland.dist.mg.right=gentoland.dist.mg.right,#
	gentoland.dist.mg.lag=gentoland.dist.mg.lag)	#
}
Erin L. Landguth#
## MRMCRun.R											#
##   Project Description: an example script to run  the function mantel.mc#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs...#
##	2. MRMCFun.R must be loaded into workspace before this script is ran. 								#
## Project Steps:										#
##	1. User input function parameters#
##	2. mantel.mc function run call#
##	3. mantel.mc.analysis function run call#
##	4. Some plotting commands for mantel.mc.analysis returned values	#
## Project Date: December 10, 2008								#
############################################################################
####################
## Load Library	#
####################
library(spatial)#
library(ecodist)#
################################
## 1. Function parameter inputs	#
################################
batchstring <- ''#
# Specify the number of batch runs used#
batchno <- 1#
# Specify the number of Monte Carlo runs used#
mcrunno <- 1#
# The total individuals in each file#
N <- 1000#
# Total runtime length#
looptime <- 1#
# Uncomment one of these styles for nthfile analysis#
nthfile <- 0	# The incremental nthfile, e.g. 0,5,10,15...#
nthfile <- c(0,5,20,50,100)#
#nthfile <- seq(0,looptime-1,1)#
# Genetic distance file location and names and number of#
gddir <- "~/CDPOP_v1.2.08_20120520/MortData/1345135252output_test/"#
gdfilename <- 'Gdmatrix'				 				#
# Barrier distance file location and names and answer if you want to test barrier model#
barrdir <- "~/CDPOP_v1.2.08_20120520/MortData/"			#
barrfilename <- c("CDpanbar01.csv")	#
barrans <- 'N'				#
# Euclidean distance file location and names and answer if you want to test distanc model#
distdir <- "~/CDPOP_v1.2.08_20120520/MortData/"		#
distfilename <- c("CDdisbar01.csv")#
distans <- 'Y'								#
# Landscape distance file location and names and answer if you want to test landscape model#
landdir <- "~/CDPOP_v1.2.08_20120520/MortData/"	#
landfilename <- c(".csv")		#
landans <- 'N'					#
# Now specify the sample style to use: #
#	known = a known set of indeces to be read from a file#
#	random = a random n draw from the total#
#	all = run analysis on all points#
samplestyle <- 'all'#
# If samplestyle = 'random'#
sampleno <- 200#
# Else if samplestyle = 'known'#
sampledir <- "C:/CDGridModel/ModelRuns/SelectedIndexesForNoEdge/xy1248_noedge.csv" #
# Here specify Mantel Test run information 9 of them:#
#	Y or N to the specific simple and partial Mantel Tests#
#	Define number of permutations for significance test#
gentodist.ans <- 'Y'			# Simple genetic ~ distancee#
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier#
gentoland.ans <- 'N'			# Simple genetic ~ landscape#
gentodist.barr.ans <- 'Y'		# Partial genetic ~ distance|barrier#
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape#
gentobarr.dist.ans <- 'Y'		# Partial genetic ~ barrier|distance#
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape#
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance#
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier#
mperms <- 199				# Mantel permutations#
# Here specifiy Mantel Correlogram to run#
#	Y or N to the specific Mantel correlogram#
#	Define year to run test at#
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance#
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier#
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape#
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier#
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape#
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance#
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape#
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance#
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier#
mgramruntime <- 100#
####################
## Function code#
####################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)#
results <- mantel.mc.analysis(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)
Erin L. Landguth#
## MRMCRun.R											#
##   Project Description: an example script to run  the function mantel.mc#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs...#
##	2. MRMCFun.R must be loaded into workspace before this script is ran. 								#
## Project Steps:										#
##	1. User input function parameters#
##	2. mantel.mc function run call#
##	3. mantel.mc.analysis function run call#
##	4. Some plotting commands for mantel.mc.analysis returned values	#
## Project Date: December 10, 2008								#
############################################################################
####################
## Load Library	#
####################
library(spatial)#
library(ecodist)#
################################
## 1. Function parameter inputs	#
################################
batchstring <- ''#
# Specify the number of batch runs used#
batchno <- 1#
# Specify the number of Monte Carlo runs used#
mcrunno <- 1#
# The total individuals in each file#
N <- 1000#
# Total runtime length#
looptime <- 1#
# Uncomment one of these styles for nthfile analysis#
nthfile <- 0	# The incremental nthfile, e.g. 0,5,10,15...#
nthfile <- c(0,5,20,50,100)#
#nthfile <- seq(0,looptime-1,1)#
# Genetic distance file location and names and number of#
gddir <- "~/CDPOP_v1.2.08_20120520/MortData/"#
gdfilename <- 'Gdmatrix'				 				#
# Barrier distance file location and names and answer if you want to test barrier model#
barrdir <- "~/CDPOP_v1.2.08_20120520/MortData/"			#
barrfilename <- c("CDpanbar01.csv")	#
barrans <- 'N'				#
# Euclidean distance file location and names and answer if you want to test distanc model#
distdir <- "~/CDPOP_v1.2.08_20120520/MortData/"		#
distfilename <- c("CDdisbar01.csv")#
distans <- 'Y'								#
# Landscape distance file location and names and answer if you want to test landscape model#
landdir <- "~/CDPOP_v1.2.08_20120520/MortData/"	#
landfilename <- c(".csv")		#
landans <- 'N'					#
# Now specify the sample style to use: #
#	known = a known set of indeces to be read from a file#
#	random = a random n draw from the total#
#	all = run analysis on all points#
samplestyle <- 'all'#
# If samplestyle = 'random'#
sampleno <- 200#
# Else if samplestyle = 'known'#
sampledir <- "C:/CDGridModel/ModelRuns/SelectedIndexesForNoEdge/xy1248_noedge.csv" #
# Here specify Mantel Test run information 9 of them:#
#	Y or N to the specific simple and partial Mantel Tests#
#	Define number of permutations for significance test#
gentodist.ans <- 'Y'			# Simple genetic ~ distancee#
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier#
gentoland.ans <- 'N'			# Simple genetic ~ landscape#
gentodist.barr.ans <- 'Y'		# Partial genetic ~ distance|barrier#
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape#
gentobarr.dist.ans <- 'Y'		# Partial genetic ~ barrier|distance#
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape#
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance#
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier#
mperms <- 199				# Mantel permutations#
# Here specifiy Mantel Correlogram to run#
#	Y or N to the specific Mantel correlogram#
#	Define year to run test at#
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance#
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier#
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape#
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier#
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape#
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance#
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape#
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance#
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier#
mgramruntime <- 100#
####################
## Function code#
####################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)#
results <- mantel.mc.analysis(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)
Erin L. Landguth#
## MRMCFun.R											#
##   Project Description: #
##	1. mantel.mc: Function to run simple and partial mantel test on #
##   	distance, barrier, and genetic matrices extracting information from #
##   	mutliple folders that were created through a batch or Monte Carlo #
##   	process.  Results outputted to MRMCgentoXXXXXX.csv - the correspond-#
#	ing Mantel test.#
##	2. mantel.mc.analysis: Function to read in MRMCgentoXXX.csv, calculate#
##	mean, sd, confidence intervals and plot these results.#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs... 								#
## MRMCRun.R is an example script to run this function 																	#
## Project Date: December 10, 2008								#
############################################################################
##################################
## Function code for Mantel tests#
##################################
mantel.mc <- function(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)#
{#
	#################################
	## 1. Read in sample information#
	#################################
	# Random draw#
	if (samplestyle == 'random')#
	{#
		sampledraw <- runif(sampleno,1,N)#
	}#
	# Known points draw#
	if (samplestyle == 'known')#
	{#
		sampledraw <- read.table(paste(sampledir,sep=""),sep=",",header=TRUE)#
		sampledraw <- sampledraw$SelectedID#
	}#
	# All points draw#
	if (samplestyle == 'all')#
	{#
		sampledraw <- seq(1,N)#
	}#
	# If nthfile has a length of 1, then create a vector#
	if (length(nthfile) == 1 && nthfile !=0)#
	{#
		nthfile <- seq(0,looptime,as.integer(nthfile))	#
	}#
	#######################
	## 2. Batch Loop Begin#
	#######################
	for (i in 1:batchno)#
	{#
		############################################
		## 3. Read in Data - Cost Distance Matrices#
		############################################
		# Read in barrier matrix#
		if (barrans == 'Y')#
		{#
			if (length(barrfilename) == 1)#
			{#
				barrier <- read.table(paste(barrdir,barrfilename[1],sep=""),sep=",",header=FALSE)#
			}#
			if (length(barrfilename) != 1)#
			{#
				barrier <- read.table(paste(barrdir,barrfilename[i],sep=""),sep=",",header=FALSE)#
			}#
			barrier <- as.matrix(barrier[,1:N])#
			barrier <- lower(barrier[sampledraw,sampledraw])#
		}#
		# Read in distance matrix	#
		if (distans == 'Y')#
		{#
			if (length(distfilename) == 1)#
			{#
				distance <- read.table(paste(distdir,distfilename[1],sep=""),sep=",",header=FALSE)#
			}#
			if (length(distfilename) != 1)#
			{#
				distance <- read.table(paste(distdir,distfilename[i],sep=""),sep=",",header=FALSE)#
			}#
			distance <- as.matrix(distance[,1:N])#
			distance <- lower(distance[sampledraw,sampledraw])#
		}#
		# Read in landscape matrix#
		if (landans == 'Y')#
		{#
			if (length(landfilename) == 1)#
			{#
				landscape <- read.table(paste(landdir,landfilename[1],sep=""),sep=",",header=FALSE)#
			}#
			if (length(landfilename) != 1)#
			{#
				landscape <- read.table(paste(landdir,landfilename[i],sep=""),sep=",",header=FALSE)#
			}#
			landscape <- as.matrix(landscape[,1:N])#
			landscape <- lower(landscape[sampledraw,sampledraw])#
		}#
		# Create batch directory string#
		batchfiledir <- paste(batchstring,'batchrun',as.character(i-1),sep="")		#
		#batchfiledir <- paste(batchstring,'batchrun',as.character(9),sep="")		#
		print(batchfiledir)		#
		#############################
		## 4. Monte Carlo Loop Begin#
		#############################
		for (j in 1:mcrunno)#
		{#
			# Create Monte Carlo directory string#
			mcfiledir <- paste('mcrun',as.character(j-1),'/',sep="")#
			print(mcfiledir)#
			######################################
			## 5. Preliminary vector storage work#
			######################################
			# Create empty vectors to append to for mantelr,pval1,llim,ulim: check all cases#
			# Simple genetic ~ distance#
			if (gentodist.ans=='Y')#
			{#
				gentodist.mr <- c()#
				gentodist.pv1 <- c()#
				gentodist.pv2 <- c()#
				gentodist.pv3 <- c()#
			}#
			# Simple genetic ~ barrier#
			if (gentobarr.ans=='Y')#
			{#
				gentobarr.mr <- c()#
				gentobarr.pv1 <- c()#
				gentobarr.pv2 <- c()#
				gentobarr.pv3 <- c()#
			}#
			# Simple genetic ~ landscape#
			if (gentoland.ans=='Y')#
			{#
				gentoland.mr <- c()#
				gentoland.pv1 <- c()#
				gentoland.pv2 <- c()#
				gentoland.pv3 <- c()#
			}#
			# Partial genetic ~ distance|barrier#
			if (gentodist.barr.ans=='Y')#
			{#
				gentodist.barr.mr <- c()#
				gentodist.barr.pv1 <- c()#
				gentodist.barr.pv2 <- c()#
				gentodist.barr.pv3 <- c()#
			}#
			# Partial genetic ~ distance|landscape#
			if (gentodist.land.ans=='Y')#
			{#
				gentodist.land.mr <- c()#
				gentodist.land.pv1 <- c()#
				gentodist.land.pv2 <- c()#
				gentodist.land.pv3 <- c()#
			}#
			# Partial genetic ~ barrier|landscape#
			if (gentobarr.land.ans=='Y')#
			{#
				gentobarr.land.mr <- c()#
				gentobarr.land.pv1 <- c()#
				gentobarr.land.pv2 <- c()#
				gentobarr.land.pv3 <- c()#
			}#
			# Partial genetic ~ barrier|distance#
			if (gentobarr.dist.ans=='Y')#
			{#
				gentobarr.dist.mr <- c()#
				gentobarr.dist.pv1 <- c()#
				gentobarr.dist.pv2 <- c()#
				gentobarr.dist.pv3 <- c()#
			}#
			# Partial genetic ~ landscape|distance#
			if (gentoland.dist.ans=='Y')#
			{#
				gentoland.dist.mr <- c()#
				gentoland.dist.pv1 <- c()#
				gentoland.dist.pv2 <- c()#
				gentoland.dist.pv3 <- c()#
			}#
			# Partial genetic ~ landscape|barrier#
			if (gentoland.barr.ans=='Y')#
			{#
				gentoland.barr.mr <- c()#
				gentoland.barr.pv1 <- c()#
				gentoland.barr.pv2 <- c()#
				gentoland.barr.pv3 <- c()#
			}#
			####################################################################
			## 6. Mantel Test: #
			##	Simple: genetic ~ distance#
			##	Simple: genetic ~ barrier#
			##	Partial: genetic ~ distance|barrier#
			##	Partial: genetic ~ barrier|distance#
			##	Partial: genetic ~ distance|distance#
			##	Mantel Correlogram for each of the above or specified.#
			####################################################################
			# Start for loop through each Gdmatrix#
			for (k in 1:length(nthfile))#
			{#
				# Read in genetic distance matrix - piece it up for character read#
				file1 <- as.character(nthfile[k])		# For specified nthfile#
				file2 <- ".csv"#
				genetic <- read.table(paste(gddir,batchfiledir,mcfiledir,gdfilename,file1,file2,sep=""),sep=",",header=FALSE)#
				genetic <- as.matrix(genetic[,1:N])#
				print(nthfile[k])#
				# Make matrices lower#
				genetic <- lower(genetic[sampledraw,sampledraw])#
				# Run Mantel appending results to empty vector: distance#
				if (gentodist.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~distance, nperm=mperms, nboot=0)#
					# Append loop information#
					gentodist.mr <- append(gentodist.mr,mantelrun[1])#
					gentodist.pv1 <- append(gentodist.pv1,mantelrun[2])#
					gentodist.pv2 <- append(gentodist.pv2,mantelrun[3])#
					gentodist.pv3 <- append(gentodist.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentodist.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentodist.mgram <- mgram(genetic,distance,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: barrier#
				if (gentobarr.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~barrier, nperm=mperms, nboot=0)#
					# Append loop information#
					gentobarr.mr <- append(gentobarr.mr,mantelrun[1])#
					gentobarr.pv1 <- append(gentobarr.pv1,mantelrun[2])#
					gentobarr.pv2 <- append(gentobarr.pv2,mantelrun[3])#
					gentobarr.pv3 <- append(gentobarr.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentobarr.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentobarr.mgram <- mgram(genetic,barrier,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: landscape#
				if (gentoland.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~landscape, nperm=mperms, nboot=0)#
					# Append loop information#
					gentoland.mr <- append(gentoland.mr,mantelrun[1])#
					gentoland.pv1 <- append(gentoland.pv1,mantelrun[2])#
					gentoland.pv2 <- append(gentoland.pv2,mantelrun[3])#
					gentoland.pv3 <- append(gentoland.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentoland.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentoland.mgram <- mgram(genetic,landscape,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: distance|barrier#
				if (gentodist.barr.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~distance+barrier, nperm=mperms, nboot=0)#
					# Append loop information#
					gentodist.barr.mr <- append(gentodist.barr.mr,mantelrun[1])#
					gentodist.barr.pv1 <- append(gentodist.barr.pv1,mantelrun[2])#
					gentodist.barr.pv2 <- append(gentodist.barr.pv2,mantelrun[3])#
					gentodist.barr.pv3 <- append(gentodist.barr.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentodist.barr.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentodist.barr.mgram <- mgram(genetic,distance+barrier,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: distance|landscape#
				if (gentodist.land.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~distance+landscape, nperm=mperms, nboot=0)#
					# Append loop information#
					gentodist.land.mr <- append(gentodist.land.mr,mantelrun[1])#
					gentodist.land.pv1 <- append(gentodist.land.pv1,mantelrun[2])#
					gentodist.land.pv2 <- append(gentodist.land.pv2,mantelrun[3])#
					gentodist.land.pv3 <- append(gentodist.land.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentodist.land.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentodist.land.mgram <- mgram(genetic,distance+landscape,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: barrier|distance#
				if (gentobarr.dist.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~barrier+distance, nperm=mperms, nboot=0)#
					# Append loop information#
					gentobarr.dist.mr <- append(gentobarr.dist.mr,mantelrun[1])#
					gentobarr.dist.pv1 <- append(gentobarr.dist.pv1,mantelrun[2])#
					gentobarr.dist.pv2 <- append(gentobarr.dist.pv2,mantelrun[3])#
					gentobarr.dist.pv3 <- append(gentobarr.dist.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentobarr.dist.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentobarr.dist.mgram <- mgram(genetic,barrier+distance,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: barrier|landscape#
				if (gentobarr.land.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~barrier+landscape, nperm=mperms, nboot=0)#
					# Append loop information#
					gentobarr.land.mr <- append(gentobarr.land.mr,mantelrun[1])#
					gentobarr.land.pv1 <- append(gentobarr.land.pv1,mantelrun[2])#
					gentobarr.land.pv2 <- append(gentobarr.land.pv2,mantelrun[3])#
					gentobarr.land.pv3 <- append(gentobarr.land.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentobarr.land.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentobarr.land.mgram <- mgram(genetic,barrier+landscape,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: landscape|distance#
				if (gentoland.dist.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~landscape+distance, nperm=mperms, nboot=0)#
					# Append loop information#
					gentoland.dist.mr <- append(gentoland.dist.mr,mantelrun[1])#
					gentoland.dist.pv1 <- append(gentoland.dist.pv1,mantelrun[2])#
					gentoland.dist.pv2 <- append(gentoland.dist.pv2,mantelrun[3])#
					gentoland.dist.pv3 <- append(gentoland.dist.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentoland.dist.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentoland.dist.mgram <- mgram(genetic,landscape+distance,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: landscape|barrier#
				if (gentoland.barr.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~landscape+barrier, nperm=mperms, nboot=0)#
					# Append loop information#
					gentoland.barr.mr <- append(gentoland.barr.mr,mantelrun[1])#
					gentoland.barr.pv1 <- append(gentoland.barr.pv1,mantelrun[2])#
					gentoland.barr.pv2 <- append(gentoland.barr.pv2,mantelrun[3])#
					gentoland.barr.pv3 <- append(gentoland.barr.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentoland.barr.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentoland.barr.mgram <- mgram(genetic,landscape+barrier,nperm=mperms)#
						}#
					}#
				}# Last Mantel Run End#
			}# Mantel Loop End#
			########################################
			## 7. Output mantel information to file#
			#######################################				#
			## Transpose and data.frame vectors and then print and write to file#
			if (gentodist.ans=='Y')#
			{#
				gentodist.mr <- t(data.frame(gentodist.mr))#
				gentodist.pv1 <- t(data.frame(gentodist.pv1))#
				gentodist.pv2 <- t(data.frame(gentodist.pv2))#
				gentodist.pv3 <- t(data.frame(gentodist.pv3))#
				# File name#
				fileoutputname <- "MRMCgentodist.csv"#
				write.table(gentodist.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentodist.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentodist.csv"#
					write.table(t(data.frame(gentodist.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}			#
			}#
			# Simple genetic ~ barrier#
			if (gentobarr.ans=='Y')#
			{#
				gentobarr.mr <- t(data.frame(gentobarr.mr))#
				gentobarr.pv1 <- t(data.frame(gentobarr.pv1))#
				gentobarr.pv2 <- t(data.frame(gentobarr.pv2))#
				gentobarr.pv3 <- t(data.frame(gentobarr.pv3))#
				# File name#
				fileoutputname <- "MRMCgentobarr.csv"#
				write.table(gentobarr.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentobarr.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentobarr.csv"#
					write.table(t(data.frame(gentobarr.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Simple genetic ~ landscape#
			if (gentoland.ans=='Y')#
			{#
				gentoland.mr <- t(data.frame(gentoland.mr))#
				gentoland.pv1 <- t(data.frame(gentoland.pv1))#
				gentoland.pv2 <- t(data.frame(gentoland.pv2))#
				gentoland.pv3 <- t(data.frame(gentoland.pv3))#
				# File name#
				fileoutputname <- "MRMCgentoland.csv"#
				write.table(gentoland.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentoland.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentoland.csv"#
					write.table(t(data.frame(gentoland.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ distance|barrier#
			if (gentodist.barr.ans=='Y')#
			{#
				gentodist.barr.mr <- t(data.frame(gentodist.barr.mr))#
				gentodist.barr.pv1 <- t(data.frame(gentodist.barr.pv1))#
				gentodist.barr.pv2 <- t(data.frame(gentodist.barr.pv2))#
				gentodist.barr.pv3 <- t(data.frame(gentodist.barr.pv3))#
				# File name#
				fileoutputname <- "MRMCgentodist.barr.csv"#
				write.table(gentodist.barr.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.barr.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.barr.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.barr.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentodist.barr.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentodist.barr.csv"#
					write.table(t(data.frame(gentodist.barr.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.barr.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.barr.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ distance|landscape#
			if (gentodist.land.ans=='Y')#
			{#
				gentodist.land.mr <- t(data.frame(gentodist.land.mr))#
				gentodist.land.pv1 <- t(data.frame(gentodist.land.pv1))#
				gentodist.land.pv2 <- t(data.frame(gentodist.land.pv2))#
				gentodist.land.pv3 <- t(data.frame(gentodist.land.pv3))#
				# File name#
				fileoutputname <- "MRMCgentodist.land.csv"#
				write.table(gentodist.land.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.land.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.land.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.land.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentodist.land.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentodist.land.csv"#
					write.table(t(data.frame(gentodist.land.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.land.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.land.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ barrier|landscape#
			if (gentobarr.land.ans=='Y')#
			{#
				gentobarr.land.mr <- t(data.frame(gentobarr.land.mr))#
				gentobarr.land.pv1 <- t(data.frame(gentobarr.land.pv1))#
				gentobarr.land.pv2 <- t(data.frame(gentobarr.land.pv2))#
				gentobarr.land.pv3 <- t(data.frame(gentobarr.land.pv3))#
				# File name#
				fileoutputname <- "MRMCgentobarr.land.csv"#
				write.table(gentobarr.land.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.land.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.land.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.land.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentobarr.land.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentobarr.land.csv"#
					write.table(t(data.frame(gentobarr.land.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.land.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.land.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ barrier|distance#
			if (gentobarr.dist.ans=='Y')#
			{#
				gentobarr.dist.mr <- t(data.frame(gentobarr.dist.mr))#
				gentobarr.dist.pv1 <- t(data.frame(gentobarr.dist.pv1))#
				gentobarr.dist.pv2 <- t(data.frame(gentobarr.dist.pv2))#
				gentobarr.dist.pv3 <- t(data.frame(gentobarr.dist.pv3))#
				# File name#
				fileoutputname <- "MRMCgentobarr.dist.csv"#
				write.table(gentobarr.dist.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.dist.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.dist.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.dist.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentobarr.dist.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentobarr.dist.csv"#
					write.table(t(data.frame(gentobarr.dist.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.dist.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.dist.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ landscape|distance#
			if (gentoland.dist.ans=='Y')#
			{#
				gentoland.dist.mr <- t(data.frame(gentoland.dist.mr))#
				gentoland.dist.pv1 <- t(data.frame(gentoland.dist.pv1))#
				gentoland.dist.pv2 <- t(data.frame(gentoland.dist.pv2))#
				gentoland.dist.pv3 <- t(data.frame(gentoland.dist.pv3))#
				# File name#
				fileoutputname <- "MRMCgentoland.dist.csv"#
				write.table(gentoland.dist.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.dist.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.dist.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.dist.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentoland.dist.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentoland.dist.csv"#
					write.table(t(data.frame(gentoland.dist.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.dist.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.dist.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ landscape|barrier#
			if (gentoland.barr.ans=='Y')#
			{#
				gentoland.barr.mr <- t(data.frame(gentoland.barr.mr))#
				gentoland.barr.pv1 <- t(data.frame(gentoland.barr.pv1))#
				gentoland.barr.pv2 <- t(data.frame(gentoland.barr.pv2))#
				gentoland.barr.pv3 <- t(data.frame(gentoland.barr.pv3))#
				# File name#
				fileoutputname <- "MRMCgentoland.barr.csv"#
				write.table(gentoland.barr.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.barr.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.barr.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.barr.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentoland.barr.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentoland.barr.csv"#
					write.table(t(data.frame(gentoland.barr.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.barr.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.barr.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
		}# Monte Carlo Loop End		#
	}# Batch Loop End#
}# Function End#
##################################################
## Function code for Mantel analysis and plotting#
##################################################
mantel.mc.analysis <- function(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)#
{#
	###########################################################################
	## For specified Mantel analysis (must be a file allready created for it):#
	##	1. Create storage mean and sd vectors#
	##	2. Read in file#
	##	3. Loop the file, storing and then take the mean and sd and error.#
	##	4. Calculate the SE, and left and right bars#
	##	5. Write information back to file...appending mean,sd,error,left,right#
	##	6. Plot results if specified.#
	###########################################################################
	# Storage vectors to be return by function#
	gentodist.mr.mean <- c()#
	gentodist.mr.left <- c()#
	gentodist.mr.right <- c()#
	gentodist.mg.mean <- c()#
	gentodist.mg.left <- c()#
	gentodist.mg.right <- c()#
	gentodist.mg.lag <- c()#
	gentobarr.mr.mean <- c()#
	gentobarr.mr.left <- c()#
	gentobarr.mr.right <- c()#
	gentobarr.mg.mean <- c()#
	gentobarr.mg.left <- c()#
	gentobarr.mg.right <- c()#
	gentobarr.mg.lag <- c()#
	gentoland.mr.mean <- c()#
	gentoland.mr.left <- c()#
	gentoland.mr.right <- c()#
	gentoland.mg.mean <- c()#
	gentoland.mg.left <- c()#
	gentoland.mg.right <- c()#
	gentoland.mg.lag <- c()#
	gentodist.barr.mr.mean <- c()#
	gentodist.barr.mr.left <- c()#
	gentodist.barr.mr.right <- c()#
	gentodist.barr.mg.mean <- c()#
	gentodist.barr.mg.left <- c()#
	gentodist.barr.mg.right <- c()#
	gentodist.barr.mg.lag <- c()#
	gentobarr.dist.mr.mean <- c()#
	gentobarr.dist.mr.left <- c()#
	gentobarr.dist.mr.right <- c()#
	gentobarr.dist.mg.mean <- c()#
	gentobarr.dist.mg.left <- c()#
	gentobarr.dist.mg.right <- c()#
	gentobarr.dist.mg.lag <- c()#
	gentoland.barr.mr.mean <- c()#
	gentoland.barr.mr.left <- c()#
	gentoland.barr.mr.right <- c()#
	gentoland.barr.mg.mean <- c()#
	gentoland.barr.mg.left <- c()#
	gentoland.barr.mg.right <- c()#
	gentoland.barr.mg.lag <- c()#
	gentodist.land.mr.mean <- c()#
	gentodist.land.mr.left <- c()#
	gentodist.land.mr.right <- c()#
	gentodist.land.mg.mean <- c()#
	gentodist.land.mg.left <- c()#
	gentodist.land.mg.right <- c()#
	gentodist.land.mg.lag <- c()#
	gentobarr.land.mr.mean <- c()#
	gentobarr.land.mr.left <- c()#
	gentobarr.land.mr.right <- c()#
	gentobarr.land.mg.mean <- c()#
	gentobarr.land.mg.left <- c()#
	gentobarr.land.mg.right <- c()#
	gentobarr.land.mg.lag <- c()#
	gentoland.dist.mr.mean <- c()#
	gentoland.dist.mr.left <- c()#
	gentoland.dist.mr.right <- c()#
	gentoland.dist.mg.mean <- c()#
	gentoland.dist.mg.left <- c()#
	gentoland.dist.mg.right <- c()#
	gentoland.dist.mg.lag <- c()	#
	# Create mean and sd storage vectors and open file#
	# Simple genetic ~ distance#
	if (gentodist.ans=='Y')#
	{#
		# Storage vectors#
		gentodist.mr.mean <- c()#
		gentodist.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentodist.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentodist.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentodist.mr.mean <- append(gentodist.mr.mean,mean(meantemp))#
			gentodist.mr.sd <- append(gentodist.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentodist.mr.error <- qnorm(0.975)*gentodist.mr.sd/sqrt((mcrunno*batchno))#
		gentodist.mr.left <- gentodist.mr.mean - gentodist.mr.error#
		gentodist.mr.right <- gentodist.mr.mean + gentodist.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentodist.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentodist.ans == 'Y')#
		{#
			# Storage vectors#
			gentodist.mg.mean <- c()#
			gentodist.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentodist.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentodist.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentodist.mg.mean <- append(gentodist.mg.mean,mean(meantemp))#
				gentodist.mg.sd <- append(gentodist.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentodist.mg.error <- qnorm(0.975)*gentodist.mg.sd/sqrt((mcrunno*batchno))#
			gentodist.mg.left <- gentodist.mg.mean - gentodist.mg.error#
			gentodist.mg.right <- gentodist.mg.mean + gentodist.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentodist.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentodist.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Simple genetic ~ barrier#
	if (gentobarr.ans=='Y')#
	{#
		# Storage vectors#
		gentobarr.mr.mean <- c()#
		gentobarr.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentobarr.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentobarr.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentobarr.mr.mean <- append(gentobarr.mr.mean,mean(meantemp))#
			gentobarr.mr.sd <- append(gentobarr.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentobarr.mr.error <- qnorm(0.975)*gentobarr.mr.sd/sqrt((mcrunno*batchno))#
		gentobarr.mr.left <- gentobarr.mr.mean - gentobarr.mr.error#
		gentobarr.mr.right <- gentobarr.mr.mean + gentobarr.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentobarr.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentobarr.ans == 'Y')#
		{#
			# Storage vectors#
			gentobarr.mg.mean <- c()#
			gentobarr.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentobarr.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentobarr.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentobarr.mg.mean <- append(gentobarr.mg.mean,mean(meantemp))#
				gentobarr.mg.sd <- append(gentobarr.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentobarr.mg.error <- qnorm(0.975)*gentobarr.mg.sd/sqrt((mcrunno*batchno))#
			gentobarr.mg.left <- gentobarr.mg.mean - gentobarr.mg.error#
			gentobarr.mg.right <- gentobarr.mg.mean + gentobarr.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentobarr.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentobarr.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Simple genetic ~ landscape#
	if (gentoland.ans=='Y')#
	{#
		# Storage vectors#
		gentoland.mr.mean <- c()#
		gentoland.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentoland.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentoland.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentoland.mr.mean <- append(gentoland.mr.mean,mean(meantemp))#
			gentoland.mr.sd <- append(gentoland.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentoland.mr.error <- qnorm(0.975)*gentoland.mr.sd/sqrt((mcrunno*batchno))#
		gentoland.mr.left <- gentoland.mr.mean - gentoland.mr.error#
		gentoland.mr.right <- gentoland.mr.mean + gentoland.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentoland.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentoland.ans == 'Y')#
		{#
			# Storage vectors#
			gentoland.mg.mean <- c()#
			gentoland.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentoland.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentoland.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentoland.mg.mean <- append(gentoland.mg.mean,mean(meantemp))#
				gentoland.mg.sd <- append(gentoland.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentoland.mg.error <- qnorm(0.975)*gentoland.mg.sd/sqrt((mcrunno*batchno))#
			gentoland.mg.left <- gentoland.mg.mean - gentoland.mg.error#
			gentoland.mg.right <- gentoland.mg.mean + gentoland.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentoland.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentoland.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ distance|barrier#
	if (gentodist.barr.ans=='Y')#
	{#
		# Storage vectors#
		gentodist.barr.mr.mean <- c()#
		gentodist.barr.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentodist.barr.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentodist.barr.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentodist.barr.mr.mean <- append(gentodist.barr.mr.mean,mean(meantemp))#
			gentodist.barr.mr.sd <- append(gentodist.barr.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentodist.barr.mr.error <- qnorm(0.975)*gentodist.barr.mr.sd/sqrt((mcrunno*batchno))#
		gentodist.barr.mr.left <- gentodist.barr.mr.mean - gentodist.barr.mr.error#
		gentodist.barr.mr.right <- gentodist.barr.mr.mean + gentodist.barr.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentodist.barr.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentodist.barr.ans == 'Y')#
		{#
			# Storage vectors#
			gentodist.barr.mg.mean <- c()#
			gentodist.barr.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentodist.barr.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentodist.barr.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentodist.barr.mg.mean <- append(gentodist.barr.mg.mean,mean(meantemp))#
				gentodist.barr.mg.sd <- append(gentodist.barr.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentodist.barr.mg.error <- qnorm(0.975)*gentodist.barr.mg.sd/sqrt((mcrunno*batchno))#
			gentodist.barr.mg.left <- gentodist.barr.mg.mean - gentodist.barr.mg.error#
			gentodist.barr.mg.right <- gentodist.barr.mg.mean + gentodist.barr.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentodist.barr.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentodist.barr.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ distance|landscape#
	if (gentodist.land.ans=='Y')#
	{#
		# Storage vectors#
		gentodist.land.mr.mean <- c()#
		gentodist.land.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentodist.land.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentodist.land.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentodist.land.mr.mean <- append(gentodist.land.mr.mean,mean(meantemp))#
			gentodist.land.mr.sd <- append(gentodist.land.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentodist.land.mr.error <- qnorm(0.975)*gentodist.land.mr.sd/sqrt((mcrunno*batchno))#
		gentodist.land.mr.left <- gentodist.land.mr.mean - gentodist.land.mr.error#
		gentodist.land.mr.right <- gentodist.land.mr.mean + gentodist.land.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentodist.land.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentodist.land.ans == 'Y')#
		{#
			# Storage vectors#
			gentodist.land.mg.mean <- c()#
			gentodist.land.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentodist.land.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentodist.land.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentodist.land.mg.mean <- append(gentodist.land.mg.mean,mean(meantemp))#
				gentodist.land.mg.sd <- append(gentodist.land.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentodist.land.mg.error <- qnorm(0.975)*gentodist.land.mg.sd/sqrt((mcrunno*batchno))#
			gentodist.land.mg.left <- gentodist.land.mg.mean - gentodist.land.mg.error#
			gentodist.land.mg.right <- gentodist.land.mg.mean + gentodist.land.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentodist.land.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentodist.land.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ barrier|landscape#
	if (gentobarr.land.ans=='Y')#
	{#
		# Storage vectors#
		gentobarr.land.mr.mean <- c()#
		gentobarr.land.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentobarr.land.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentobarr.land.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentobarr.land.mr.mean <- append(gentobarr.land.mr.mean,mean(meantemp))#
			gentobarr.land.mr.sd <- append(gentobarr.land.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentobarr.land.mr.error <- qnorm(0.975)*gentobarr.land.mr.sd/sqrt((mcrunno*batchno))#
		gentobarr.land.mr.left <- gentobarr.land.mr.mean - gentobarr.land.mr.error#
		gentobarr.land.mr.right <- gentobarr.land.mr.mean + gentobarr.land.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentobarr.land.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentobarr.land.ans == 'Y')#
		{#
			# Storage vectors#
			gentobarr.land.mg.mean <- c()#
			gentobarr.land.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentobarr.land.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentobarr.land.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentobarr.land.mg.mean <- append(gentobarr.land.mg.mean,mean(meantemp))#
				gentobarr.land.mg.sd <- append(gentobarr.land.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentobarr.land.mg.error <- qnorm(0.975)*gentobarr.land.mg.sd/sqrt((mcrunno*batchno))#
			gentobarr.land.mg.left <- gentobarr.land.mg.mean - gentobarr.land.mg.error#
			gentobarr.land.mg.right <- gentobarr.land.mg.mean + gentobarr.land.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentobarr.land.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentobarr.land.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ barrier|distance#
	if (gentobarr.dist.ans=='Y')#
	{#
		# Storage vectors#
		gentobarr.dist.mr.mean <- c()#
		gentobarr.dist.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentobarr.dist.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentobarr.dist.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentobarr.dist.mr.mean <- append(gentobarr.dist.mr.mean,mean(meantemp))#
			gentobarr.dist.mr.sd <- append(gentobarr.dist.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentobarr.dist.mr.error <- qnorm(0.975)*gentobarr.dist.mr.sd/sqrt((mcrunno*batchno))#
		gentobarr.dist.mr.left <- gentobarr.dist.mr.mean - gentobarr.dist.mr.error#
		gentobarr.dist.mr.right <- gentobarr.dist.mr.mean + gentobarr.dist.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentobarr.dist.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentobarr.dist.ans == 'Y')#
		{#
			# Storage vectors#
			gentobarr.dist.mg.mean <- c()#
			gentobarr.dist.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentobarr.dist.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentobarr.dist.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentobarr.dist.mg.mean <- append(gentobarr.dist.mg.mean,mean(meantemp))#
				gentobarr.dist.mg.sd <- append(gentobarr.dist.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentobarr.dist.mg.error <- qnorm(0.975)*gentobarr.dist.mg.sd/sqrt((mcrunno*batchno))#
			gentobarr.dist.mg.left <- gentobarr.dist.mg.mean - gentobarr.dist.mg.error#
			gentobarr.dist.mg.right <- gentobarr.dist.mg.mean + gentobarr.dist.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentobarr.dist.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentobarr.dist.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ landscape|distance#
	if (gentoland.dist.ans=='Y')#
	{#
		# Storage vectors#
		gentoland.dist.mr.mean <- c()#
		gentoland.dist.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentoland.dist.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentoland.dist.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentoland.dist.mr.mean <- append(gentoland.dist.mr.mean,mean(meantemp))#
			gentoland.dist.mr.sd <- append(gentoland.dist.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentoland.dist.mr.error <- qnorm(0.975)*gentoland.dist.mr.sd/sqrt((mcrunno*batchno))#
		gentoland.dist.mr.left <- gentoland.dist.mr.mean - gentoland.dist.mr.error#
		gentoland.dist.mr.right <- gentoland.dist.mr.mean + gentoland.dist.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentoland.dist.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentoland.dist.ans == 'Y')#
		{#
			# Storage vectors#
			gentoland.dist.mg.mean <- c()#
			gentoland.dist.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentoland.dist.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentoland.dist.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentoland.dist.mg.mean <- append(gentoland.dist.mg.mean,mean(meantemp))#
				gentoland.dist.mg.sd <- append(gentoland.dist.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentoland.dist.mg.error <- qnorm(0.975)*gentoland.dist.mg.sd/sqrt((mcrunno*batchno))#
			gentoland.dist.mg.left <- gentoland.dist.mg.mean - gentoland.dist.mg.error#
			gentoland.dist.mg.right <- gentoland.dist.mg.mean + gentoland.dist.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentoland.dist.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentoland.dist.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ landscape|barrier#
	if (gentoland.barr.ans=='Y')#
	{#
		# Storage vectors#
		gentoland.barr.mr.mean <- c()#
		gentoland.barr.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentoland.barr.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentoland.barr.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentoland.barr.mr.mean <- append(gentoland.barr.mr.mean,mean(meantemp))#
			gentoland.barr.mr.sd <- append(gentoland.barr.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentoland.barr.mr.error <- qnorm(0.975)*gentoland.barr.mr.sd/sqrt((mcrunno*batchno))#
		gentoland.barr.mr.left <- gentoland.barr.mr.mean - gentoland.barr.mr.error#
		gentoland.barr.mr.right <- gentoland.barr.mr.mean + gentoland.barr.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentoland.barr.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentoland.barr.ans == 'Y')#
		{#
			# Storage vectors#
			gentoland.barr.mg.mean <- c()#
			gentoland.barr.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentoland.barr.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentoland.barr.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentoland.barr.mg.mean <- append(gentoland.barr.mg.mean,mean(meantemp))#
				gentoland.barr.mg.sd <- append(gentoland.barr.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentoland.barr.mg.error <- qnorm(0.975)*gentoland.barr.mg.sd/sqrt((mcrunno*batchno))#
			gentoland.barr.mg.left <- gentoland.barr.mg.mean - gentoland.barr.mg.error#
			gentoland.barr.mg.right <- gentoland.barr.mg.mean + gentoland.barr.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentoland.barr.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentoland.barr.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
#Return values#
list(gentodist.mr.mean=gentodist.mr.mean,#
	gentodist.mr.left=gentodist.mr.left,#
	gentodist.mr.right=gentodist.mr.right,#
	gentodist.mg.mean=gentodist.mg.mean,#
	gentodist.mg.left=gentodist.mg.left,#
	gentodist.mg.right=gentodist.mg.right,#
	gentodist.mg.lag=gentodist.mg.lag,#
	gentobarr.mr.mean=gentobarr.mr.mean,#
	gentobarr.mr.left=gentobarr.mr.left,#
	gentobarr.mr.right=gentobarr.mr.right,#
	gentobarr.mg.mean=gentobarr.mg.mean,#
	gentobarr.mg.left=gentobarr.mg.left,#
	gentobarr.mg.right=gentobarr.mg.right,#
	gentobarr.mg.lag=gentobarr.mg.lag,#
	gentoland.mr.mean=gentoland.mr.mean,#
	gentoland.mr.left=gentoland.mr.left,#
	gentoland.mr.right=gentoland.mr.right,#
	gentoland.mg.mean=gentoland.mg.mean,#
	gentoland.mg.left=gentoland.mg.left,#
	gentoland.mg.right=gentoland.mg.right,#
	gentoland.mg.lag=gentoland.mg.lag,#
	gentodist.barr.mr.mean=gentodist.barr.mr.mean,#
	gentodist.barr.mr.left=gentodist.barr.mr.left,#
	gentodist.barr.mr.right=gentodist.barr.mr.right,#
	gentodist.barr.mg.mean=gentodist.barr.mg.mean,#
	gentodist.barr.mg.left=gentodist.barr.mg.left,#
	gentodist.barr.mg.right=gentodist.barr.mg.right,#
	gentodist.barr.mg.lag=gentodist.barr.mg.lag,#
	gentobarr.dist.mr.mean=gentobarr.dist.mr.mean,#
	gentobarr.dist.mr.left=gentobarr.dist.mr.left,#
	gentobarr.dist.mr.right=gentobarr.dist.mr.right,#
	gentobarr.dist.mg.mean=gentobarr.dist.mg.mean,#
	gentobarr.dist.mg.left=gentobarr.dist.mg.left,#
	gentobarr.dist.mg.right=gentobarr.dist.mg.right,#
	gentobarr.dist.mg.lag=gentobarr.dist.mg.lag,#
	gentoland.barr.mr.mean=gentoland.barr.mr.mean,#
	gentoland.barr.mr.left=gentoland.barr.mr.left,#
	gentoland.barr.mr.right=gentoland.barr.mr.right,#
	gentoland.barr.mg.mean=gentoland.barr.mg.mean,#
	gentoland.barr.mg.left=gentoland.barr.mg.left,#
	gentoland.barr.mg.right=gentoland.barr.mg.right,#
	gentoland.barr.mg.lag=gentoland.barr.mg.lag,#
	gentodist.land.mr.mean=gentodist.land.mr.mean,#
	gentodist.land.mr.left=gentodist.land.mr.left,#
	gentodist.land.mr.right=gentodist.land.mr.right,#
	gentodist.land.mg.mean=gentodist.land.mg.mean,#
	gentodist.land.mg.left=gentodist.land.mg.left,#
	gentodist.land.mg.right=gentodist.land.mg.right,#
	gentodist.land.mg.lag=gentodist.land.mg.lag,#
	gentobarr.land.mr.mean=gentobarr.land.mr.mean,#
	gentobarr.land.mr.left=gentobarr.land.mr.left,#
	gentobarr.land.mr.right=gentobarr.land.mr.right,#
	gentobarr.land.mg.mean=gentobarr.land.mg.mean,#
	gentobarr.land.mg.left=gentobarr.land.mg.left,#
	gentobarr.land.mg.right=gentobarr.land.mg.right,#
	gentobarr.land.mg.lag=gentobarr.land.mg.lag,#
	gentoland.dist.mr.mean=gentoland.dist.mr.mean,#
	gentoland.dist.mr.left=gentoland.dist.mr.left,#
	gentoland.dist.mr.right=gentoland.dist.mr.right,#
	gentoland.dist.mg.mean=gentoland.dist.mg.mean,#
	gentoland.dist.mg.left=gentoland.dist.mg.left,#
	gentoland.dist.mg.right=gentoland.dist.mg.right,#
	gentoland.dist.mg.lag=gentoland.dist.mg.lag)	#
}
Erin L. Landguth#
## MRMCRun.R											#
##   Project Description: an example script to run  the function mantel.mc#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs...#
##	2. MRMCFun.R must be loaded into workspace before this script is ran. 								#
## Project Steps:										#
##	1. User input function parameters#
##	2. mantel.mc function run call#
##	3. mantel.mc.analysis function run call#
##	4. Some plotting commands for mantel.mc.analysis returned values	#
## Project Date: December 10, 2008								#
############################################################################
####################
## Load Library	#
####################
library(spatial)#
library(ecodist)#
################################
## 1. Function parameter inputs	#
################################
batchstring <- ''#
# Specify the number of batch runs used#
batchno <- 1#
# Specify the number of Monte Carlo runs used#
mcrunno <- 1#
# The total individuals in each file#
N <- 1000#
# Total runtime length#
looptime <- 1#
# Uncomment one of these styles for nthfile analysis#
nthfile <- 0	# The incremental nthfile, e.g. 0,5,10,15...#
nthfile <- c(0,5,20,50,100)#
#nthfile <- seq(0,looptime-1,1)#
# Genetic distance file location and names and number of#
gddir <- "~/CDPOP_v1.2.08_20120520/MortData/1345135252output_test/"#
gdfilename <- 'Gdmatrix'				 				#
# Barrier distance file location and names and answer if you want to test barrier model#
barrdir <- "~/CDPOP_v1.2.08_20120520/MortData/"			#
barrfilename <- c("CDpanbar01.csv")	#
barrans <- 'Y'				#
# Euclidean distance file location and names and answer if you want to test distanc model#
distdir <- "~/CDPOP_v1.2.08_20120520/MortData/"		#
distfilename <- c("CDdisbar01.csv")#
distans <- 'Y'								#
# Landscape distance file location and names and answer if you want to test landscape model#
landdir <- "~/CDPOP_v1.2.08_20120520/MortData/"	#
landfilename <- c(".csv")		#
landans <- 'N'					#
# Now specify the sample style to use: #
#	known = a known set of indeces to be read from a file#
#	random = a random n draw from the total#
#	all = run analysis on all points#
samplestyle <- 'all'#
# If samplestyle = 'random'#
sampleno <- 200#
# Else if samplestyle = 'known'#
sampledir <- "" #
# Here specify Mantel Test run information 9 of them:#
#	Y or N to the specific simple and partial Mantel Tests#
#	Define number of permutations for significance test#
gentodist.ans <- 'Y'			# Simple genetic ~ distancee#
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier#
gentoland.ans <- 'N'			# Simple genetic ~ landscape#
gentodist.barr.ans <- 'Y'		# Partial genetic ~ distance|barrier#
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape#
gentobarr.dist.ans <- 'Y'		# Partial genetic ~ barrier|distance#
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape#
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance#
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier#
mperms <- 199				# Mantel permutations#
# Here specifiy Mantel Correlogram to run#
#	Y or N to the specific Mantel correlogram#
#	Define year to run test at#
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance#
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier#
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape#
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier#
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape#
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance#
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape#
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance#
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier#
mgramruntime <- 100#
####################
## Function code#
####################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)
results <- mantel.mc.analysis(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)#
####################################################
## Plot returned information from mantel.mc.anlysis#
####################################################
# If nthfile has a length of 1, then create a vector#
if (length(nthfile) == 1)#
{#
	nthfile <- seq(0,looptime,as.integer(nthfile))	#
}#
# Simple Mantel genetic~distance#
if (gentodist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.mr.left,lty="dashed")#
	lines(time,results$gentodist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier#
if (gentobarr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.mr.left,lty="dashed")#
	lines(time,results$gentobarr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape#
if (gentoland.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.mr.left,lty="dashed")#
	lines(time,results$gentoland.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|barrier#
if (gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.barr.mr.left,lty="dashed")#
	lines(time,results$gentodist.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|landscape#
if (gentodist.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.land.mr.left,lty="dashed")#
	lines(time,results$gentodist.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|distance#
if (gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.dist.mr.left,lty="dashed")#
	lines(time,results$gentobarr.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|landscape#
if (gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.land.mr.left,lty="dashed")#
	lines(time,results$gentobarr.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|barrier#
if (gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.barr.mr.left,lty="dashed")#
	lines(time,results$gentoland.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|distance#
if (gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.dist.mr.left,lty="dashed")#
	lines(time,results$gentoland.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mgram genetic~distance#
if (mgram.gentodist.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentodist.mg.lag,results$gentodist.mg.mean,type="b",ylab="Mantel r",xlab="Distance",las=1)#
	lines(results$gentodist.mg.lag,results$gentodist.mg.left,lty="dashed")#
	lines(results$gentodist.mg.lag,results$gentodist.mg.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
}#
# Simple Mgram genetic~barrier#
if (mgram.gentobarr.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentobarr.mg.lag,results$gentobarr.mg.mean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.left,lty="dashed")#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.right,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier)")#
}#
# Simple Mgram genetic~landscape#
if (mgram.gentoland.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.mg.lag#
	mgmean <- results$gentoland.mg.mean#
	mgright <- results$gentoland.mg.right#
	mgleft <- results$gentoland.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape)")#
}#
# Simple Mgram genetic~distance|barrier#
if (mgram.gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.barr.mg.lag#
	mgmean <- results$gentodist.barr.mg.mean#
	mgright <- results$gentodist.barr.mg.right#
	mgleft <- results$gentodist.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|barrier)")#
}#
# Simple Mgram genetic~distance|landscape#
if (mgram.gentodist.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.land.mg.lag#
	mgmean <- results$gentodist.land.mg.mean#
	mgright <- results$gentodist.land.mg.right#
	mgleft <- results$gentodist.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|landscape)")#
}#
# Simple Mgram genetic~barrier|distance#
if (mgram.gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.dist.mg.lag#
	mgmean <- results$gentobarr.dist.mg.mean#
	mgright <- results$gentobarr.dist.mg.right#
	mgleft <- results$gentobarr.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|distance)")#
}#
# Simple Mgram genetic~barrier|landscape#
if (mgram.gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.land.mg.lag#
	mgmean <- results$gentobarr.land.mg.mean#
	mgright <- results$gentobarr.land.mg.right#
	mgleft <- results$gentobarr.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|landscape)")#
}#
# Simple Mgram genetic~landscape|distance#
if (mgram.gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.dist.mg.lag#
	mgmean <- results$gentoland.dist.mg.mean#
	mgright <- results$gentoland.dist.mg.right#
	mgleft <- results$gentoland.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|distance)")#
}#
# Simple Mgram genetic~landscape|barrier#
if (mgram.gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.barr.mg.lag#
	mgmean <- results$gentoland.barr.mg.mean#
	mgright <- results$gentoland.barr.mg.right#
	mgleft <- results$gentoland.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|barrier)")#
}
?lower
Erin L. Landguth#
## MRMCRun.R											#
##   Project Description: an example script to run  the function mantel.mc#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs...#
##	2. MRMCFun.R must be loaded into workspace before this script is ran. 								#
## Project Steps:										#
##	1. User input function parameters#
##	2. mantel.mc function run call#
##	3. mantel.mc.analysis function run call#
##	4. Some plotting commands for mantel.mc.analysis returned values	#
## Project Date: December 10, 2008								#
############################################################################
####################
## Load Library	#
####################
library(spatial)#
library(ecodist)#
################################
## 1. Function parameter inputs	#
################################
batchstring <- ''#
# Specify the number of batch runs used#
batchno <- 12#
# Specify the number of Monte Carlo runs used#
mcrunno <- 1#
# The total individuals in each file#
N <- 1000#
# Total runtime length#
looptime <- 1#
# Uncomment one of these styles for nthfile analysis#
nthfile <- 0	# The incremental nthfile, e.g. 0,5,10,15...#
nthfile <- c(0,5,20,50,100)#
#nthfile <- seq(0,looptime-1,1)#
# Genetic distance file location and names and number of#
gddir <- "~/CDPOP_v1.2.08_20120520/MortData/1345142080output_test/"#
gdfilename <- 'Gdmatrix'				 				#
# Barrier distance file location and names and answer if you want to test barrier model#
barrdir <- "~/CDPOP_v1.2.08_20120520/MortData/"			#
barrfilename <- c("CDpanbar01.csv")	#
barrans <- 'Y'				#
# Euclidean distance file location and names and answer if you want to test distanc model#
distdir <- "~/CDPOP_v1.2.08_20120520/MortData/"		#
distfilename <- c("CDdisbar01.csv")#
distans <- 'Y'								#
# Landscape distance file location and names and answer if you want to test landscape model#
landdir <- "~/CDPOP_v1.2.08_20120520/MortData/"	#
landfilename <- c(".csv")		#
landans <- 'N'					#
# Now specify the sample style to use: #
#	known = a known set of indeces to be read from a file#
#	random = a random n draw from the total#
#	all = run analysis on all points#
samplestyle <- 'all'#
# If samplestyle = 'random'#
sampleno <- 200#
# Else if samplestyle = 'known'#
sampledir <- "" #
# Here specify Mantel Test run information 9 of them:#
#	Y or N to the specific simple and partial Mantel Tests#
#	Define number of permutations for significance test#
gentodist.ans <- 'Y'			# Simple genetic ~ distancee#
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier#
gentoland.ans <- 'N'			# Simple genetic ~ landscape#
gentodist.barr.ans <- 'Y'		# Partial genetic ~ distance|barrier#
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape#
gentobarr.dist.ans <- 'Y'		# Partial genetic ~ barrier|distance#
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape#
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance#
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier#
mperms <- 199				# Mantel permutations#
# Here specifiy Mantel Correlogram to run#
#	Y or N to the specific Mantel correlogram#
#	Define year to run test at#
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance#
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier#
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape#
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier#
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape#
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance#
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape#
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance#
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier#
mgramruntime <- 100#
####################
## Function code#
####################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)#
results <- mantel.mc.analysis(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)#
####################################################
## Plot returned information from mantel.mc.anlysis#
####################################################
# If nthfile has a length of 1, then create a vector#
if (length(nthfile) == 1)#
{#
	nthfile <- seq(0,looptime,as.integer(nthfile))	#
}#
# Simple Mantel genetic~distance#
if (gentodist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.mr.left,lty="dashed")#
	lines(time,results$gentodist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier#
if (gentobarr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.mr.left,lty="dashed")#
	lines(time,results$gentobarr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape#
if (gentoland.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.mr.left,lty="dashed")#
	lines(time,results$gentoland.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|barrier#
if (gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.barr.mr.left,lty="dashed")#
	lines(time,results$gentodist.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|landscape#
if (gentodist.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.land.mr.left,lty="dashed")#
	lines(time,results$gentodist.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|distance#
if (gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.dist.mr.left,lty="dashed")#
	lines(time,results$gentobarr.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|landscape#
if (gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.land.mr.left,lty="dashed")#
	lines(time,results$gentobarr.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|barrier#
if (gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.barr.mr.left,lty="dashed")#
	lines(time,results$gentoland.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|distance#
if (gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.dist.mr.left,lty="dashed")#
	lines(time,results$gentoland.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mgram genetic~distance#
if (mgram.gentodist.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentodist.mg.lag,results$gentodist.mg.mean,type="b",ylab="Mantel r",xlab="Distance",las=1)#
	lines(results$gentodist.mg.lag,results$gentodist.mg.left,lty="dashed")#
	lines(results$gentodist.mg.lag,results$gentodist.mg.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
}#
# Simple Mgram genetic~barrier#
if (mgram.gentobarr.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentobarr.mg.lag,results$gentobarr.mg.mean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.left,lty="dashed")#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.right,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier)")#
}#
# Simple Mgram genetic~landscape#
if (mgram.gentoland.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.mg.lag#
	mgmean <- results$gentoland.mg.mean#
	mgright <- results$gentoland.mg.right#
	mgleft <- results$gentoland.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape)")#
}#
# Simple Mgram genetic~distance|barrier#
if (mgram.gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.barr.mg.lag#
	mgmean <- results$gentodist.barr.mg.mean#
	mgright <- results$gentodist.barr.mg.right#
	mgleft <- results$gentodist.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|barrier)")#
}#
# Simple Mgram genetic~distance|landscape#
if (mgram.gentodist.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.land.mg.lag#
	mgmean <- results$gentodist.land.mg.mean#
	mgright <- results$gentodist.land.mg.right#
	mgleft <- results$gentodist.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|landscape)")#
}#
# Simple Mgram genetic~barrier|distance#
if (mgram.gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.dist.mg.lag#
	mgmean <- results$gentobarr.dist.mg.mean#
	mgright <- results$gentobarr.dist.mg.right#
	mgleft <- results$gentobarr.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|distance)")#
}#
# Simple Mgram genetic~barrier|landscape#
if (mgram.gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.land.mg.lag#
	mgmean <- results$gentobarr.land.mg.mean#
	mgright <- results$gentobarr.land.mg.right#
	mgleft <- results$gentobarr.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|landscape)")#
}#
# Simple Mgram genetic~landscape|distance#
if (mgram.gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.dist.mg.lag#
	mgmean <- results$gentoland.dist.mg.mean#
	mgright <- results$gentoland.dist.mg.right#
	mgleft <- results$gentoland.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|distance)")#
}#
# Simple Mgram genetic~landscape|barrier#
if (mgram.gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.barr.mg.lag#
	mgmean <- results$gentoland.barr.mg.mean#
	mgright <- results$gentoland.barr.mg.right#
	mgleft <- results$gentoland.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|barrier)")#
}
Erin L. Landguth#
## MRMCRun.R											#
##   Project Description: an example script to run  the function mantel.mc#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs...#
##	2. MRMCFun.R must be loaded into workspace before this script is ran. 								#
## Project Steps:										#
##	1. User input function parameters#
##	2. mantel.mc function run call#
##	3. mantel.mc.analysis function run call#
##	4. Some plotting commands for mantel.mc.analysis returned values	#
## Project Date: December 10, 2008								#
############################################################################
####################
## Load Library	#
####################
library(spatial)#
library(ecodist)#
################################
## 1. Function parameter inputs	#
################################
batchstring <- ''#
# Specify the number of batch runs used#
batchno <- 1#
# Specify the number of Monte Carlo runs used#
mcrunno <- 1#
# The total individuals in each file#
N <- 1000#
# Total runtime length#
looptime <- 1#
# Uncomment one of these styles for nthfile analysis#
nthfile <- 0	# The incremental nthfile, e.g. 0,5,10,15...#
nthfile <- c(0,5,20,50,100)#
#nthfile <- seq(0,looptime-1,1)#
# Genetic distance file location and names and number of#
gddir <- "~/CDPOP_v1.2.08_20120520/MortData/1345142080output_test/"#
gdfilename <- 'Gdmatrix'				 				#
# Barrier distance file location and names and answer if you want to test barrier model#
barrdir <- "~/CDPOP_v1.2.08_20120520/MortData/"			#
barrfilename <- c("CDpanbar01.csv")	#
barrans <- 'Y'				#
# Euclidean distance file location and names and answer if you want to test distanc model#
distdir <- "~/CDPOP_v1.2.08_20120520/MortData/"		#
distfilename <- c("CDdisbar01.csv")#
distans <- 'Y'								#
# Landscape distance file location and names and answer if you want to test landscape model#
landdir <- "~/CDPOP_v1.2.08_20120520/MortData/"	#
landfilename <- c(".csv")		#
landans <- 'N'					#
# Now specify the sample style to use: #
#	known = a known set of indeces to be read from a file#
#	random = a random n draw from the total#
#	all = run analysis on all points#
samplestyle <- 'all'#
# If samplestyle = 'random'#
sampleno <- 200#
# Else if samplestyle = 'known'#
sampledir <- "" #
# Here specify Mantel Test run information 9 of them:#
#	Y or N to the specific simple and partial Mantel Tests#
#	Define number of permutations for significance test#
gentodist.ans <- 'Y'			# Simple genetic ~ distancee#
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier#
gentoland.ans <- 'N'			# Simple genetic ~ landscape#
gentodist.barr.ans <- 'Y'		# Partial genetic ~ distance|barrier#
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape#
gentobarr.dist.ans <- 'Y'		# Partial genetic ~ barrier|distance#
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape#
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance#
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier#
mperms <- 199				# Mantel permutations#
# Here specifiy Mantel Correlogram to run#
#	Y or N to the specific Mantel correlogram#
#	Define year to run test at#
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance#
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier#
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape#
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier#
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape#
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance#
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape#
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance#
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier#
mgramruntime <- 100#
####################
## Function code#
####################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)#
results <- mantel.mc.analysis(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)#
####################################################
## Plot returned information from mantel.mc.anlysis#
####################################################
# If nthfile has a length of 1, then create a vector#
if (length(nthfile) == 1)#
{#
	nthfile <- seq(0,looptime,as.integer(nthfile))	#
}#
# Simple Mantel genetic~distance#
if (gentodist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.mr.left,lty="dashed")#
	lines(time,results$gentodist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier#
if (gentobarr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.mr.left,lty="dashed")#
	lines(time,results$gentobarr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape#
if (gentoland.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.mr.left,lty="dashed")#
	lines(time,results$gentoland.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|barrier#
if (gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.barr.mr.left,lty="dashed")#
	lines(time,results$gentodist.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|landscape#
if (gentodist.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.land.mr.left,lty="dashed")#
	lines(time,results$gentodist.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|distance#
if (gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.dist.mr.left,lty="dashed")#
	lines(time,results$gentobarr.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|landscape#
if (gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.land.mr.left,lty="dashed")#
	lines(time,results$gentobarr.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|barrier#
if (gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.barr.mr.left,lty="dashed")#
	lines(time,results$gentoland.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|distance#
if (gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.dist.mr.left,lty="dashed")#
	lines(time,results$gentoland.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mgram genetic~distance#
if (mgram.gentodist.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentodist.mg.lag,results$gentodist.mg.mean,type="b",ylab="Mantel r",xlab="Distance",las=1)#
	lines(results$gentodist.mg.lag,results$gentodist.mg.left,lty="dashed")#
	lines(results$gentodist.mg.lag,results$gentodist.mg.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
}#
# Simple Mgram genetic~barrier#
if (mgram.gentobarr.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentobarr.mg.lag,results$gentobarr.mg.mean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.left,lty="dashed")#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.right,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier)")#
}#
# Simple Mgram genetic~landscape#
if (mgram.gentoland.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.mg.lag#
	mgmean <- results$gentoland.mg.mean#
	mgright <- results$gentoland.mg.right#
	mgleft <- results$gentoland.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape)")#
}#
# Simple Mgram genetic~distance|barrier#
if (mgram.gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.barr.mg.lag#
	mgmean <- results$gentodist.barr.mg.mean#
	mgright <- results$gentodist.barr.mg.right#
	mgleft <- results$gentodist.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|barrier)")#
}#
# Simple Mgram genetic~distance|landscape#
if (mgram.gentodist.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.land.mg.lag#
	mgmean <- results$gentodist.land.mg.mean#
	mgright <- results$gentodist.land.mg.right#
	mgleft <- results$gentodist.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|landscape)")#
}#
# Simple Mgram genetic~barrier|distance#
if (mgram.gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.dist.mg.lag#
	mgmean <- results$gentobarr.dist.mg.mean#
	mgright <- results$gentobarr.dist.mg.right#
	mgleft <- results$gentobarr.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|distance)")#
}#
# Simple Mgram genetic~barrier|landscape#
if (mgram.gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.land.mg.lag#
	mgmean <- results$gentobarr.land.mg.mean#
	mgright <- results$gentobarr.land.mg.right#
	mgleft <- results$gentobarr.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|landscape)")#
}#
# Simple Mgram genetic~landscape|distance#
if (mgram.gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.dist.mg.lag#
	mgmean <- results$gentoland.dist.mg.mean#
	mgright <- results$gentoland.dist.mg.right#
	mgleft <- results$gentoland.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|distance)")#
}#
# Simple Mgram genetic~landscape|barrier#
if (mgram.gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.barr.mg.lag#
	mgmean <- results$gentoland.barr.mg.mean#
	mgright <- results$gentoland.barr.mg.right#
	mgleft <- results$gentoland.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|barrier)")#
}
Erin L. Landguth#
## MRMCRun.R											#
##   Project Description: an example script to run  the function mantel.mc#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs...#
##	2. MRMCFun.R must be loaded into workspace before this script is ran. 								#
## Project Steps:										#
##	1. User input function parameters#
##	2. mantel.mc function run call#
##	3. mantel.mc.analysis function run call#
##	4. Some plotting commands for mantel.mc.analysis returned values	#
## Project Date: December 10, 2008								#
############################################################################
####################
## Load Library	#
####################
library(spatial)#
library(ecodist)#
################################
## 1. Function parameter inputs	#
################################
batchstring <- ''#
# Specify the number of batch runs used#
batchno <- 1#
# Specify the number of Monte Carlo runs used#
mcrunno <- 5#
# The total individuals in each file#
N <- 1000#
# Total runtime length#
looptime <- 1#
# Uncomment one of these styles for nthfile analysis#
nthfile <- 0	# The incremental nthfile, e.g. 0,5,10,15...#
nthfile <- c(0,5,20,50,100)#
#nthfile <- seq(0,looptime-1,1)#
# Genetic distance file location and names and number of#
gddir <- "~/CDPOP_v1.2.08_20120520/MortData/1345227342output_test_dispersal/"#
gdfilename <- 'Gdmatrix'				 				#
# Barrier distance file location and names and answer if you want to test barrier model#
barrdir <- "~/CDPOP_v1.2.08_20120520/MortData/"			#
barrfilename <- c("CDpanbar01.csv")	#
barrans <- 'Y'				#
# Euclidean distance file location and names and answer if you want to test distanc model#
distdir <- "~/CDPOP_v1.2.08_20120520/MortData/"		#
distfilename <- c("CDdisbar01.csv")#
distans <- 'Y'								#
# Landscape distance file location and names and answer if you want to test landscape model#
landdir <- "~/CDPOP_v1.2.08_20120520/MortData/"	#
landfilename <- c(".csv")		#
landans <- 'N'					#
# Now specify the sample style to use: #
#	known = a known set of indeces to be read from a file#
#	random = a random n draw from the total#
#	all = run analysis on all points#
samplestyle <- 'all'#
# If samplestyle = 'random'#
sampleno <- 200#
# Else if samplestyle = 'known'#
sampledir <- "" #
# Here specify Mantel Test run information 9 of them:#
#	Y or N to the specific simple and partial Mantel Tests#
#	Define number of permutations for significance test#
gentodist.ans <- 'Y'			# Simple genetic ~ distancee#
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier#
gentoland.ans <- 'N'			# Simple genetic ~ landscape#
gentodist.barr.ans <- 'Y'		# Partial genetic ~ distance|barrier#
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape#
gentobarr.dist.ans <- 'Y'		# Partial genetic ~ barrier|distance#
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape#
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance#
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier#
mperms <- 199				# Mantel permutations#
# Here specifiy Mantel Correlogram to run#
#	Y or N to the specific Mantel correlogram#
#	Define year to run test at#
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance#
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier#
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape#
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier#
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape#
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance#
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape#
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance#
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier#
mgramruntime <- 100#
####################
## Function code#
####################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)#
results <- mantel.mc.analysis(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)#
####################################################
## Plot returned information from mantel.mc.anlysis#
####################################################
# If nthfile has a length of 1, then create a vector#
if (length(nthfile) == 1)#
{#
	nthfile <- seq(0,looptime,as.integer(nthfile))	#
}#
# Simple Mantel genetic~distance#
if (gentodist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.mr.left,lty="dashed")#
	lines(time,results$gentodist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier#
if (gentobarr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.mr.left,lty="dashed")#
	lines(time,results$gentobarr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape#
if (gentoland.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.mr.left,lty="dashed")#
	lines(time,results$gentoland.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|barrier#
if (gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.barr.mr.left,lty="dashed")#
	lines(time,results$gentodist.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|landscape#
if (gentodist.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.land.mr.left,lty="dashed")#
	lines(time,results$gentodist.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|distance#
if (gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.dist.mr.left,lty="dashed")#
	lines(time,results$gentobarr.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|landscape#
if (gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.land.mr.left,lty="dashed")#
	lines(time,results$gentobarr.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|barrier#
if (gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.barr.mr.left,lty="dashed")#
	lines(time,results$gentoland.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|distance#
if (gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.dist.mr.left,lty="dashed")#
	lines(time,results$gentoland.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mgram genetic~distance#
if (mgram.gentodist.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentodist.mg.lag,results$gentodist.mg.mean,type="b",ylab="Mantel r",xlab="Distance",las=1)#
	lines(results$gentodist.mg.lag,results$gentodist.mg.left,lty="dashed")#
	lines(results$gentodist.mg.lag,results$gentodist.mg.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
}#
# Simple Mgram genetic~barrier#
if (mgram.gentobarr.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentobarr.mg.lag,results$gentobarr.mg.mean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.left,lty="dashed")#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.right,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier)")#
}#
# Simple Mgram genetic~landscape#
if (mgram.gentoland.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.mg.lag#
	mgmean <- results$gentoland.mg.mean#
	mgright <- results$gentoland.mg.right#
	mgleft <- results$gentoland.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape)")#
}#
# Simple Mgram genetic~distance|barrier#
if (mgram.gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.barr.mg.lag#
	mgmean <- results$gentodist.barr.mg.mean#
	mgright <- results$gentodist.barr.mg.right#
	mgleft <- results$gentodist.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|barrier)")#
}#
# Simple Mgram genetic~distance|landscape#
if (mgram.gentodist.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.land.mg.lag#
	mgmean <- results$gentodist.land.mg.mean#
	mgright <- results$gentodist.land.mg.right#
	mgleft <- results$gentodist.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|landscape)")#
}#
# Simple Mgram genetic~barrier|distance#
if (mgram.gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.dist.mg.lag#
	mgmean <- results$gentobarr.dist.mg.mean#
	mgright <- results$gentobarr.dist.mg.right#
	mgleft <- results$gentobarr.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|distance)")#
}#
# Simple Mgram genetic~barrier|landscape#
if (mgram.gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.land.mg.lag#
	mgmean <- results$gentobarr.land.mg.mean#
	mgright <- results$gentobarr.land.mg.right#
	mgleft <- results$gentobarr.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|landscape)")#
}#
# Simple Mgram genetic~landscape|distance#
if (mgram.gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.dist.mg.lag#
	mgmean <- results$gentoland.dist.mg.mean#
	mgright <- results$gentoland.dist.mg.right#
	mgleft <- results$gentoland.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|distance)")#
}#
# Simple Mgram genetic~landscape|barrier#
if (mgram.gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.barr.mg.lag#
	mgmean <- results$gentoland.barr.mg.mean#
	mgright <- results$gentoland.barr.mg.right#
	mgleft <- results$gentoland.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|barrier)")#
}
Erin L. Landguth#
## MRMCRun.R											#
##   Project Description: an example script to run  the function mantel.mc#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs...#
##	2. MRMCFun.R must be loaded into workspace before this script is ran. 								#
## Project Steps:										#
##	1. User input function parameters#
##	2. mantel.mc function run call#
##	3. mantel.mc.analysis function run call#
##	4. Some plotting commands for mantel.mc.analysis returned values	#
## Project Date: December 10, 2008								#
############################################################################
####################
## Load Library	#
####################
library(spatial)#
library(ecodist)#
################################
## 1. Function parameter inputs	#
################################
batchstring <- ''#
# Specify the number of batch runs used#
batchno <- 3#
# Specify the number of Monte Carlo runs used#
mcrunno <- 5#
# The total individuals in each file#
N <- 1000#
# Total runtime length#
looptime <- 1#
# Uncomment one of these styles for nthfile analysis#
nthfile <- 0	# The incremental nthfile, e.g. 0,5,10,15...#
nthfile <- c(0,5,20,50,100)#
#nthfile <- seq(0,looptime-1,1)#
# Genetic distance file location and names and number of#
gddir <- "~/CDPOP_v1.2.08_20120520/MortData/1345227342output_test_dispersal/"#
gdfilename <- 'Gdmatrix'				 				#
# Barrier distance file location and names and answer if you want to test barrier model#
barrdir <- "~/CDPOP_v1.2.08_20120520/MortData/"			#
barrfilename <- c("CDpanbar01.csv")	#
barrans <- 'Y'				#
# Euclidean distance file location and names and answer if you want to test distanc model#
distdir <- "~/CDPOP_v1.2.08_20120520/MortData/"		#
distfilename <- c("CDdisbar01.csv")#
distans <- 'Y'								#
# Landscape distance file location and names and answer if you want to test landscape model#
landdir <- "~/CDPOP_v1.2.08_20120520/MortData/"	#
landfilename <- c(".csv")		#
landans <- 'N'					#
# Now specify the sample style to use: #
#	known = a known set of indeces to be read from a file#
#	random = a random n draw from the total#
#	all = run analysis on all points#
samplestyle <- 'all'#
# If samplestyle = 'random'#
sampleno <- 200#
# Else if samplestyle = 'known'#
sampledir <- "" #
# Here specify Mantel Test run information 9 of them:#
#	Y or N to the specific simple and partial Mantel Tests#
#	Define number of permutations for significance test#
gentodist.ans <- 'Y'			# Simple genetic ~ distancee#
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier#
gentoland.ans <- 'N'			# Simple genetic ~ landscape#
gentodist.barr.ans <- 'Y'		# Partial genetic ~ distance|barrier#
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape#
gentobarr.dist.ans <- 'Y'		# Partial genetic ~ barrier|distance#
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape#
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance#
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier#
mperms <- 199				# Mantel permutations#
# Here specifiy Mantel Correlogram to run#
#	Y or N to the specific Mantel correlogram#
#	Define year to run test at#
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance#
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier#
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape#
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier#
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape#
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance#
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape#
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance#
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier#
mgramruntime <- 100#
####################
## Function code#
####################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)#
results <- mantel.mc.analysis(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)#
####################################################
## Plot returned information from mantel.mc.anlysis#
####################################################
# If nthfile has a length of 1, then create a vector#
if (length(nthfile) == 1)#
{#
	nthfile <- seq(0,looptime,as.integer(nthfile))	#
}#
# Simple Mantel genetic~distance#
if (gentodist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.mr.left,lty="dashed")#
	lines(time,results$gentodist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier#
if (gentobarr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.mr.left,lty="dashed")#
	lines(time,results$gentobarr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape#
if (gentoland.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.mr.left,lty="dashed")#
	lines(time,results$gentoland.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|barrier#
if (gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.barr.mr.left,lty="dashed")#
	lines(time,results$gentodist.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|landscape#
if (gentodist.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.land.mr.left,lty="dashed")#
	lines(time,results$gentodist.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|distance#
if (gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.dist.mr.left,lty="dashed")#
	lines(time,results$gentobarr.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|landscape#
if (gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.land.mr.left,lty="dashed")#
	lines(time,results$gentobarr.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|barrier#
if (gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.barr.mr.left,lty="dashed")#
	lines(time,results$gentoland.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|distance#
if (gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.dist.mr.left,lty="dashed")#
	lines(time,results$gentoland.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mgram genetic~distance#
if (mgram.gentodist.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentodist.mg.lag,results$gentodist.mg.mean,type="b",ylab="Mantel r",xlab="Distance",las=1)#
	lines(results$gentodist.mg.lag,results$gentodist.mg.left,lty="dashed")#
	lines(results$gentodist.mg.lag,results$gentodist.mg.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
}#
# Simple Mgram genetic~barrier#
if (mgram.gentobarr.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentobarr.mg.lag,results$gentobarr.mg.mean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.left,lty="dashed")#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.right,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier)")#
}#
# Simple Mgram genetic~landscape#
if (mgram.gentoland.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.mg.lag#
	mgmean <- results$gentoland.mg.mean#
	mgright <- results$gentoland.mg.right#
	mgleft <- results$gentoland.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape)")#
}#
# Simple Mgram genetic~distance|barrier#
if (mgram.gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.barr.mg.lag#
	mgmean <- results$gentodist.barr.mg.mean#
	mgright <- results$gentodist.barr.mg.right#
	mgleft <- results$gentodist.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|barrier)")#
}#
# Simple Mgram genetic~distance|landscape#
if (mgram.gentodist.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.land.mg.lag#
	mgmean <- results$gentodist.land.mg.mean#
	mgright <- results$gentodist.land.mg.right#
	mgleft <- results$gentodist.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|landscape)")#
}#
# Simple Mgram genetic~barrier|distance#
if (mgram.gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.dist.mg.lag#
	mgmean <- results$gentobarr.dist.mg.mean#
	mgright <- results$gentobarr.dist.mg.right#
	mgleft <- results$gentobarr.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|distance)")#
}#
# Simple Mgram genetic~barrier|landscape#
if (mgram.gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.land.mg.lag#
	mgmean <- results$gentobarr.land.mg.mean#
	mgright <- results$gentobarr.land.mg.right#
	mgleft <- results$gentobarr.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|landscape)")#
}#
# Simple Mgram genetic~landscape|distance#
if (mgram.gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.dist.mg.lag#
	mgmean <- results$gentoland.dist.mg.mean#
	mgright <- results$gentoland.dist.mg.right#
	mgleft <- results$gentoland.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|distance)")#
}#
# Simple Mgram genetic~landscape|barrier#
if (mgram.gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.barr.mg.lag#
	mgmean <- results$gentoland.barr.mg.mean#
	mgright <- results$gentoland.barr.mg.right#
	mgleft <- results$gentoland.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|barrier)")#
}
Erin L. Landguth#
## MRMCFun.R											#
##   Project Description: #
##	1. mantel.mc: Function to run simple and partial mantel test on #
##   	distance, barrier, and genetic matrices extracting information from #
##   	mutliple folders that were created through a batch or Monte Carlo #
##   	process.  Results outputted to MRMCgentoXXXXXX.csv - the correspond-#
#	ing Mantel test.#
##	2. mantel.mc.analysis: Function to read in MRMCgentoXXX.csv, calculate#
##	mean, sd, confidence intervals and plot these results.#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs... 								#
## MRMCRun.R is an example script to run this function 																	#
## Project Date: December 10, 2008								#
############################################################################
##################################
## Function code for Mantel tests#
##################################
mantel.mc <- function(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)#
{#
	#################################
	## 1. Read in sample information#
	#################################
	# Random draw#
	if (samplestyle == 'random')#
	{#
		sampledraw <- runif(sampleno,1,N)#
	}#
	# Known points draw#
	if (samplestyle == 'known')#
	{#
		sampledraw <- read.table(paste(sampledir,sep=""),sep=",",header=TRUE)#
		sampledraw <- sampledraw$SelectedID#
	}#
	# All points draw#
	if (samplestyle == 'all')#
	{#
		sampledraw <- seq(1,N)#
	}#
	# If nthfile has a length of 1, then create a vector#
	if (length(nthfile) == 1 && nthfile !=0)#
	{#
		nthfile <- seq(0,looptime,as.integer(nthfile))	#
	}#
	#######################
	## 2. Batch Loop Begin#
	#######################
	for (i in 1:batchno)#
	{#
		############################################
		## 3. Read in Data - Cost Distance Matrices#
		############################################
		# Read in barrier matrix#
		if (barrans == 'Y')#
		{#
			if (length(barrfilename) == 1)#
			{#
				barrier <- read.table(paste(barrdir,barrfilename[1],sep=""),sep=",",header=FALSE)#
			}#
			if (length(barrfilename) != 1)#
			{#
				barrier <- read.table(paste(barrdir,barrfilename[i],sep=""),sep=",",header=FALSE)#
			}#
			barrier <- as.matrix(barrier[,1:N])#
			barrier <- lower(barrier[sampledraw,sampledraw])#
		}#
		# Read in distance matrix	#
		if (distans == 'Y')#
		{#
			if (length(distfilename) == 1)#
			{#
				distance <- read.table(paste(distdir,distfilename[1],sep=""),sep=",",header=FALSE)#
			}#
			if (length(distfilename) != 1)#
			{#
				distance <- read.table(paste(distdir,distfilename[i],sep=""),sep=",",header=FALSE)#
			}#
			distance <- as.matrix(distance[,1:N])#
			distance <- lower(distance[sampledraw,sampledraw])#
		}#
		# Read in landscape matrix#
		if (landans == 'Y')#
		{#
			if (length(landfilename) == 1)#
			{#
				landscape <- read.table(paste(landdir,landfilename[1],sep=""),sep=",",header=FALSE)#
			}#
			if (length(landfilename) != 1)#
			{#
				landscape <- read.table(paste(landdir,landfilename[i],sep=""),sep=",",header=FALSE)#
			}#
			landscape <- as.matrix(landscape[,1:N])#
			landscape <- lower(landscape[sampledraw,sampledraw])#
		}#
		# Create batch directory string#
		batchfiledir <- paste(batchstring,'batchrun',as.character(i-1),sep="")		#
		#batchfiledir <- paste(batchstring,'batchrun',as.character(9),sep="")		#
		print(batchfiledir)		#
		#############################
		## 4. Monte Carlo Loop Begin#
		#############################
		for (j in 1:mcrunno)#
		{#
			# Create Monte Carlo directory string#
			mcfiledir <- paste('mcrun',as.character(j-1),'/',sep="")#
			print(mcfiledir)#
			######################################
			## 5. Preliminary vector storage work#
			######################################
			# Create empty vectors to append to for mantelr,pval1,llim,ulim: check all cases#
			# Simple genetic ~ distance#
			if (gentodist.ans=='Y')#
			{#
				gentodist.mr <- c()#
				gentodist.pv1 <- c()#
				gentodist.pv2 <- c()#
				gentodist.pv3 <- c()#
			}#
			# Simple genetic ~ barrier#
			if (gentobarr.ans=='Y')#
			{#
				gentobarr.mr <- c()#
				gentobarr.pv1 <- c()#
				gentobarr.pv2 <- c()#
				gentobarr.pv3 <- c()#
			}#
			# Simple genetic ~ landscape#
			if (gentoland.ans=='Y')#
			{#
				gentoland.mr <- c()#
				gentoland.pv1 <- c()#
				gentoland.pv2 <- c()#
				gentoland.pv3 <- c()#
			}#
			# Partial genetic ~ distance|barrier#
			if (gentodist.barr.ans=='Y')#
			{#
				gentodist.barr.mr <- c()#
				gentodist.barr.pv1 <- c()#
				gentodist.barr.pv2 <- c()#
				gentodist.barr.pv3 <- c()#
			}#
			# Partial genetic ~ distance|landscape#
			if (gentodist.land.ans=='Y')#
			{#
				gentodist.land.mr <- c()#
				gentodist.land.pv1 <- c()#
				gentodist.land.pv2 <- c()#
				gentodist.land.pv3 <- c()#
			}#
			# Partial genetic ~ barrier|landscape#
			if (gentobarr.land.ans=='Y')#
			{#
				gentobarr.land.mr <- c()#
				gentobarr.land.pv1 <- c()#
				gentobarr.land.pv2 <- c()#
				gentobarr.land.pv3 <- c()#
			}#
			# Partial genetic ~ barrier|distance#
			if (gentobarr.dist.ans=='Y')#
			{#
				gentobarr.dist.mr <- c()#
				gentobarr.dist.pv1 <- c()#
				gentobarr.dist.pv2 <- c()#
				gentobarr.dist.pv3 <- c()#
			}#
			# Partial genetic ~ landscape|distance#
			if (gentoland.dist.ans=='Y')#
			{#
				gentoland.dist.mr <- c()#
				gentoland.dist.pv1 <- c()#
				gentoland.dist.pv2 <- c()#
				gentoland.dist.pv3 <- c()#
			}#
			# Partial genetic ~ landscape|barrier#
			if (gentoland.barr.ans=='Y')#
			{#
				gentoland.barr.mr <- c()#
				gentoland.barr.pv1 <- c()#
				gentoland.barr.pv2 <- c()#
				gentoland.barr.pv3 <- c()#
			}#
			####################################################################
			## 6. Mantel Test: #
			##	Simple: genetic ~ distance#
			##	Simple: genetic ~ barrier#
			##	Partial: genetic ~ distance|barrier#
			##	Partial: genetic ~ barrier|distance#
			##	Partial: genetic ~ distance|distance#
			##	Mantel Correlogram for each of the above or specified.#
			####################################################################
			# Start for loop through each Gdmatrix#
			for (k in 1:length(nthfile))#
			{#
				# Read in genetic distance matrix - piece it up for character read#
				file1 <- as.character(nthfile[k])		# For specified nthfile#
				file2 <- ".csv"#
				genetic <- read.table(paste(gddir,batchfiledir,mcfiledir,gdfilename,file1,file2,sep=""),sep=",",header=FALSE)#
				genetic <- as.matrix(genetic[,1:N])#
				print(nthfile[k])#
				# Make matrices lower#
				genetic <- lower(genetic[sampledraw,sampledraw])#
				# Run Mantel appending results to empty vector: distance#
				if (gentodist.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~distance, nperm=mperms, nboot=0)#
					# Append loop information#
					gentodist.mr <- append(gentodist.mr,mantelrun[1])#
					gentodist.pv1 <- append(gentodist.pv1,mantelrun[2])#
					gentodist.pv2 <- append(gentodist.pv2,mantelrun[3])#
					gentodist.pv3 <- append(gentodist.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentodist.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentodist.mgram <- mgram(genetic,distance,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: barrier#
				if (gentobarr.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~barrier, nperm=mperms, nboot=0)#
					# Append loop information#
					gentobarr.mr <- append(gentobarr.mr,mantelrun[1])#
					gentobarr.pv1 <- append(gentobarr.pv1,mantelrun[2])#
					gentobarr.pv2 <- append(gentobarr.pv2,mantelrun[3])#
					gentobarr.pv3 <- append(gentobarr.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentobarr.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentobarr.mgram <- mgram(genetic,barrier,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: landscape#
				if (gentoland.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~landscape, nperm=mperms, nboot=0)#
					# Append loop information#
					gentoland.mr <- append(gentoland.mr,mantelrun[1])#
					gentoland.pv1 <- append(gentoland.pv1,mantelrun[2])#
					gentoland.pv2 <- append(gentoland.pv2,mantelrun[3])#
					gentoland.pv3 <- append(gentoland.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentoland.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentoland.mgram <- mgram(genetic,landscape,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: distance|barrier#
				if (gentodist.barr.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~distance+barrier, nperm=mperms, nboot=0)#
					# Append loop information#
					gentodist.barr.mr <- append(gentodist.barr.mr,mantelrun[1])#
					gentodist.barr.pv1 <- append(gentodist.barr.pv1,mantelrun[2])#
					gentodist.barr.pv2 <- append(gentodist.barr.pv2,mantelrun[3])#
					gentodist.barr.pv3 <- append(gentodist.barr.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentodist.barr.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentodist.barr.mgram <- mgram(genetic,distance+barrier,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: distance|landscape#
				if (gentodist.land.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~distance+landscape, nperm=mperms, nboot=0)#
					# Append loop information#
					gentodist.land.mr <- append(gentodist.land.mr,mantelrun[1])#
					gentodist.land.pv1 <- append(gentodist.land.pv1,mantelrun[2])#
					gentodist.land.pv2 <- append(gentodist.land.pv2,mantelrun[3])#
					gentodist.land.pv3 <- append(gentodist.land.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentodist.land.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentodist.land.mgram <- mgram(genetic,distance+landscape,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: barrier|distance#
				if (gentobarr.dist.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~barrier+distance, nperm=mperms, nboot=0)#
					# Append loop information#
					gentobarr.dist.mr <- append(gentobarr.dist.mr,mantelrun[1])#
					gentobarr.dist.pv1 <- append(gentobarr.dist.pv1,mantelrun[2])#
					gentobarr.dist.pv2 <- append(gentobarr.dist.pv2,mantelrun[3])#
					gentobarr.dist.pv3 <- append(gentobarr.dist.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentobarr.dist.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentobarr.dist.mgram <- mgram(genetic,barrier+distance,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: barrier|landscape#
				if (gentobarr.land.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~barrier+landscape, nperm=mperms, nboot=0)#
					# Append loop information#
					gentobarr.land.mr <- append(gentobarr.land.mr,mantelrun[1])#
					gentobarr.land.pv1 <- append(gentobarr.land.pv1,mantelrun[2])#
					gentobarr.land.pv2 <- append(gentobarr.land.pv2,mantelrun[3])#
					gentobarr.land.pv3 <- append(gentobarr.land.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentobarr.land.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentobarr.land.mgram <- mgram(genetic,barrier+landscape,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: landscape|distance#
				if (gentoland.dist.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~landscape+distance, nperm=mperms, nboot=0)#
					# Append loop information#
					gentoland.dist.mr <- append(gentoland.dist.mr,mantelrun[1])#
					gentoland.dist.pv1 <- append(gentoland.dist.pv1,mantelrun[2])#
					gentoland.dist.pv2 <- append(gentoland.dist.pv2,mantelrun[3])#
					gentoland.dist.pv3 <- append(gentoland.dist.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentoland.dist.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentoland.dist.mgram <- mgram(genetic,landscape+distance,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: landscape|barrier#
				if (gentoland.barr.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~landscape+barrier, nperm=mperms, nboot=0)#
					# Append loop information#
					gentoland.barr.mr <- append(gentoland.barr.mr,mantelrun[1])#
					gentoland.barr.pv1 <- append(gentoland.barr.pv1,mantelrun[2])#
					gentoland.barr.pv2 <- append(gentoland.barr.pv2,mantelrun[3])#
					gentoland.barr.pv3 <- append(gentoland.barr.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentoland.barr.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentoland.barr.mgram <- mgram(genetic,landscape+barrier,nperm=mperms)#
						}#
					}#
				}# Last Mantel Run End#
			}# Mantel Loop End#
			########################################
			## 7. Output mantel information to file#
			#######################################				#
			## Transpose and data.frame vectors and then print and write to file#
			if (gentodist.ans=='Y')#
			{#
				gentodist.mr <- t(data.frame(gentodist.mr))#
				gentodist.pv1 <- t(data.frame(gentodist.pv1))#
				gentodist.pv2 <- t(data.frame(gentodist.pv2))#
				gentodist.pv3 <- t(data.frame(gentodist.pv3))#
				# File name#
				fileoutputname <- "MRMCgentodist.csv"#
				write.table(gentodist.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentodist.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentodist.csv"#
					write.table(t(data.frame(gentodist.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}			#
			}#
			# Simple genetic ~ barrier#
			if (gentobarr.ans=='Y')#
			{#
				gentobarr.mr <- t(data.frame(gentobarr.mr))#
				gentobarr.pv1 <- t(data.frame(gentobarr.pv1))#
				gentobarr.pv2 <- t(data.frame(gentobarr.pv2))#
				gentobarr.pv3 <- t(data.frame(gentobarr.pv3))#
				# File name#
				fileoutputname <- "MRMCgentobarr.csv"#
				write.table(gentobarr.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentobarr.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentobarr.csv"#
					write.table(t(data.frame(gentobarr.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Simple genetic ~ landscape#
			if (gentoland.ans=='Y')#
			{#
				gentoland.mr <- t(data.frame(gentoland.mr))#
				gentoland.pv1 <- t(data.frame(gentoland.pv1))#
				gentoland.pv2 <- t(data.frame(gentoland.pv2))#
				gentoland.pv3 <- t(data.frame(gentoland.pv3))#
				# File name#
				fileoutputname <- "MRMCgentoland.csv"#
				write.table(gentoland.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentoland.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentoland.csv"#
					write.table(t(data.frame(gentoland.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ distance|barrier#
			if (gentodist.barr.ans=='Y')#
			{#
				gentodist.barr.mr <- t(data.frame(gentodist.barr.mr))#
				gentodist.barr.pv1 <- t(data.frame(gentodist.barr.pv1))#
				gentodist.barr.pv2 <- t(data.frame(gentodist.barr.pv2))#
				gentodist.barr.pv3 <- t(data.frame(gentodist.barr.pv3))#
				# File name#
				fileoutputname <- "MRMCgentodist.barr.csv"#
				write.table(gentodist.barr.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.barr.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.barr.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.barr.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentodist.barr.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentodist.barr.csv"#
					write.table(t(data.frame(gentodist.barr.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.barr.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.barr.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ distance|landscape#
			if (gentodist.land.ans=='Y')#
			{#
				gentodist.land.mr <- t(data.frame(gentodist.land.mr))#
				gentodist.land.pv1 <- t(data.frame(gentodist.land.pv1))#
				gentodist.land.pv2 <- t(data.frame(gentodist.land.pv2))#
				gentodist.land.pv3 <- t(data.frame(gentodist.land.pv3))#
				# File name#
				fileoutputname <- "MRMCgentodist.land.csv"#
				write.table(gentodist.land.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.land.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.land.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.land.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentodist.land.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentodist.land.csv"#
					write.table(t(data.frame(gentodist.land.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.land.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.land.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ barrier|landscape#
			if (gentobarr.land.ans=='Y')#
			{#
				gentobarr.land.mr <- t(data.frame(gentobarr.land.mr))#
				gentobarr.land.pv1 <- t(data.frame(gentobarr.land.pv1))#
				gentobarr.land.pv2 <- t(data.frame(gentobarr.land.pv2))#
				gentobarr.land.pv3 <- t(data.frame(gentobarr.land.pv3))#
				# File name#
				fileoutputname <- "MRMCgentobarr.land.csv"#
				write.table(gentobarr.land.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.land.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.land.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.land.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentobarr.land.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentobarr.land.csv"#
					write.table(t(data.frame(gentobarr.land.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.land.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.land.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ barrier|distance#
			if (gentobarr.dist.ans=='Y')#
			{#
				gentobarr.dist.mr <- t(data.frame(gentobarr.dist.mr))#
				gentobarr.dist.pv1 <- t(data.frame(gentobarr.dist.pv1))#
				gentobarr.dist.pv2 <- t(data.frame(gentobarr.dist.pv2))#
				gentobarr.dist.pv3 <- t(data.frame(gentobarr.dist.pv3))#
				# File name#
				fileoutputname <- "MRMCgentobarr.dist.csv"#
				write.table(gentobarr.dist.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.dist.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.dist.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.dist.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentobarr.dist.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentobarr.dist.csv"#
					write.table(t(data.frame(gentobarr.dist.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.dist.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.dist.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ landscape|distance#
			if (gentoland.dist.ans=='Y')#
			{#
				gentoland.dist.mr <- t(data.frame(gentoland.dist.mr))#
				gentoland.dist.pv1 <- t(data.frame(gentoland.dist.pv1))#
				gentoland.dist.pv2 <- t(data.frame(gentoland.dist.pv2))#
				gentoland.dist.pv3 <- t(data.frame(gentoland.dist.pv3))#
				# File name#
				fileoutputname <- "MRMCgentoland.dist.csv"#
				write.table(gentoland.dist.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.dist.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.dist.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.dist.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentoland.dist.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentoland.dist.csv"#
					write.table(t(data.frame(gentoland.dist.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.dist.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.dist.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ landscape|barrier#
			if (gentoland.barr.ans=='Y')#
			{#
				gentoland.barr.mr <- t(data.frame(gentoland.barr.mr))#
				gentoland.barr.pv1 <- t(data.frame(gentoland.barr.pv1))#
				gentoland.barr.pv2 <- t(data.frame(gentoland.barr.pv2))#
				gentoland.barr.pv3 <- t(data.frame(gentoland.barr.pv3))#
				# File name#
				fileoutputname <- "MRMCgentoland.barr.csv"#
				write.table(gentoland.barr.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.barr.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.barr.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.barr.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentoland.barr.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentoland.barr.csv"#
					write.table(t(data.frame(gentoland.barr.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.barr.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.barr.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
		}# Monte Carlo Loop End		#
	}# Batch Loop End#
}# Function End#
##################################################
## Function code for Mantel analysis and plotting#
##################################################
mantel.mc.analysis <- function(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)#
{#
	###########################################################################
	## For specified Mantel analysis (must be a file allready created for it):#
	##	1. Create storage mean and sd vectors#
	##	2. Read in file#
	##	3. Loop the file, storing and then take the mean and sd and error.#
	##	4. Calculate the SE, and left and right bars#
	##	5. Write information back to file...appending mean,sd,error,left,right#
	##	6. Plot results if specified.#
	###########################################################################
	# Storage vectors to be return by function#
	gentodist.mr.mean <- c()#
	gentodist.mr.left <- c()#
	gentodist.mr.right <- c()#
	gentodist.mg.mean <- c()#
	gentodist.mg.left <- c()#
	gentodist.mg.right <- c()#
	gentodist.mg.lag <- c()#
	gentobarr.mr.mean <- c()#
	gentobarr.mr.left <- c()#
	gentobarr.mr.right <- c()#
	gentobarr.mg.mean <- c()#
	gentobarr.mg.left <- c()#
	gentobarr.mg.right <- c()#
	gentobarr.mg.lag <- c()#
	gentoland.mr.mean <- c()#
	gentoland.mr.left <- c()#
	gentoland.mr.right <- c()#
	gentoland.mg.mean <- c()#
	gentoland.mg.left <- c()#
	gentoland.mg.right <- c()#
	gentoland.mg.lag <- c()#
	gentodist.barr.mr.mean <- c()#
	gentodist.barr.mr.left <- c()#
	gentodist.barr.mr.right <- c()#
	gentodist.barr.mg.mean <- c()#
	gentodist.barr.mg.left <- c()#
	gentodist.barr.mg.right <- c()#
	gentodist.barr.mg.lag <- c()#
	gentobarr.dist.mr.mean <- c()#
	gentobarr.dist.mr.left <- c()#
	gentobarr.dist.mr.right <- c()#
	gentobarr.dist.mg.mean <- c()#
	gentobarr.dist.mg.left <- c()#
	gentobarr.dist.mg.right <- c()#
	gentobarr.dist.mg.lag <- c()#
	gentoland.barr.mr.mean <- c()#
	gentoland.barr.mr.left <- c()#
	gentoland.barr.mr.right <- c()#
	gentoland.barr.mg.mean <- c()#
	gentoland.barr.mg.left <- c()#
	gentoland.barr.mg.right <- c()#
	gentoland.barr.mg.lag <- c()#
	gentodist.land.mr.mean <- c()#
	gentodist.land.mr.left <- c()#
	gentodist.land.mr.right <- c()#
	gentodist.land.mg.mean <- c()#
	gentodist.land.mg.left <- c()#
	gentodist.land.mg.right <- c()#
	gentodist.land.mg.lag <- c()#
	gentobarr.land.mr.mean <- c()#
	gentobarr.land.mr.left <- c()#
	gentobarr.land.mr.right <- c()#
	gentobarr.land.mg.mean <- c()#
	gentobarr.land.mg.left <- c()#
	gentobarr.land.mg.right <- c()#
	gentobarr.land.mg.lag <- c()#
	gentoland.dist.mr.mean <- c()#
	gentoland.dist.mr.left <- c()#
	gentoland.dist.mr.right <- c()#
	gentoland.dist.mg.mean <- c()#
	gentoland.dist.mg.left <- c()#
	gentoland.dist.mg.right <- c()#
	gentoland.dist.mg.lag <- c()	#
	# Create mean and sd storage vectors and open file#
	# Simple genetic ~ distance#
	if (gentodist.ans=='Y')#
	{#
		# Storage vectors#
		gentodist.mr.mean <- c()#
		gentodist.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentodist.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentodist.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentodist.mr.mean <- append(gentodist.mr.mean,mean(meantemp))#
			gentodist.mr.sd <- append(gentodist.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentodist.mr.error <- qnorm(0.975)*gentodist.mr.sd/sqrt((mcrunno*batchno))#
		gentodist.mr.left <- gentodist.mr.mean - gentodist.mr.error#
		gentodist.mr.right <- gentodist.mr.mean + gentodist.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentodist.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentodist.ans == 'Y')#
		{#
			# Storage vectors#
			gentodist.mg.mean <- c()#
			gentodist.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentodist.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentodist.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentodist.mg.mean <- append(gentodist.mg.mean,mean(meantemp))#
				gentodist.mg.sd <- append(gentodist.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentodist.mg.error <- qnorm(0.975)*gentodist.mg.sd/sqrt((mcrunno*batchno))#
			gentodist.mg.left <- gentodist.mg.mean - gentodist.mg.error#
			gentodist.mg.right <- gentodist.mg.mean + gentodist.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentodist.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentodist.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Simple genetic ~ barrier#
	if (gentobarr.ans=='Y')#
	{#
		# Storage vectors#
		gentobarr.mr.mean <- c()#
		gentobarr.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentobarr.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentobarr.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentobarr.mr.mean <- append(gentobarr.mr.mean,mean(meantemp))#
			gentobarr.mr.sd <- append(gentobarr.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentobarr.mr.error <- qnorm(0.975)*gentobarr.mr.sd/sqrt((mcrunno*batchno))#
		gentobarr.mr.left <- gentobarr.mr.mean - gentobarr.mr.error#
		gentobarr.mr.right <- gentobarr.mr.mean + gentobarr.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentobarr.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentobarr.ans == 'Y')#
		{#
			# Storage vectors#
			gentobarr.mg.mean <- c()#
			gentobarr.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentobarr.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentobarr.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentobarr.mg.mean <- append(gentobarr.mg.mean,mean(meantemp))#
				gentobarr.mg.sd <- append(gentobarr.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentobarr.mg.error <- qnorm(0.975)*gentobarr.mg.sd/sqrt((mcrunno*batchno))#
			gentobarr.mg.left <- gentobarr.mg.mean - gentobarr.mg.error#
			gentobarr.mg.right <- gentobarr.mg.mean + gentobarr.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentobarr.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentobarr.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Simple genetic ~ landscape#
	if (gentoland.ans=='Y')#
	{#
		# Storage vectors#
		gentoland.mr.mean <- c()#
		gentoland.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentoland.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentoland.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentoland.mr.mean <- append(gentoland.mr.mean,mean(meantemp))#
			gentoland.mr.sd <- append(gentoland.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentoland.mr.error <- qnorm(0.975)*gentoland.mr.sd/sqrt((mcrunno*batchno))#
		gentoland.mr.left <- gentoland.mr.mean - gentoland.mr.error#
		gentoland.mr.right <- gentoland.mr.mean + gentoland.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentoland.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentoland.ans == 'Y')#
		{#
			# Storage vectors#
			gentoland.mg.mean <- c()#
			gentoland.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentoland.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentoland.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentoland.mg.mean <- append(gentoland.mg.mean,mean(meantemp))#
				gentoland.mg.sd <- append(gentoland.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentoland.mg.error <- qnorm(0.975)*gentoland.mg.sd/sqrt((mcrunno*batchno))#
			gentoland.mg.left <- gentoland.mg.mean - gentoland.mg.error#
			gentoland.mg.right <- gentoland.mg.mean + gentoland.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentoland.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentoland.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ distance|barrier#
	if (gentodist.barr.ans=='Y')#
	{#
		# Storage vectors#
		gentodist.barr.mr.mean <- c()#
		gentodist.barr.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentodist.barr.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentodist.barr.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentodist.barr.mr.mean <- append(gentodist.barr.mr.mean,mean(meantemp))#
			gentodist.barr.mr.sd <- append(gentodist.barr.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentodist.barr.mr.error <- qnorm(0.975)*gentodist.barr.mr.sd/sqrt((mcrunno*batchno))#
		gentodist.barr.mr.left <- gentodist.barr.mr.mean - gentodist.barr.mr.error#
		gentodist.barr.mr.right <- gentodist.barr.mr.mean + gentodist.barr.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentodist.barr.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentodist.barr.ans == 'Y')#
		{#
			# Storage vectors#
			gentodist.barr.mg.mean <- c()#
			gentodist.barr.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentodist.barr.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentodist.barr.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentodist.barr.mg.mean <- append(gentodist.barr.mg.mean,mean(meantemp))#
				gentodist.barr.mg.sd <- append(gentodist.barr.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentodist.barr.mg.error <- qnorm(0.975)*gentodist.barr.mg.sd/sqrt((mcrunno*batchno))#
			gentodist.barr.mg.left <- gentodist.barr.mg.mean - gentodist.barr.mg.error#
			gentodist.barr.mg.right <- gentodist.barr.mg.mean + gentodist.barr.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentodist.barr.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentodist.barr.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ distance|landscape#
	if (gentodist.land.ans=='Y')#
	{#
		# Storage vectors#
		gentodist.land.mr.mean <- c()#
		gentodist.land.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentodist.land.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentodist.land.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentodist.land.mr.mean <- append(gentodist.land.mr.mean,mean(meantemp))#
			gentodist.land.mr.sd <- append(gentodist.land.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentodist.land.mr.error <- qnorm(0.975)*gentodist.land.mr.sd/sqrt((mcrunno*batchno))#
		gentodist.land.mr.left <- gentodist.land.mr.mean - gentodist.land.mr.error#
		gentodist.land.mr.right <- gentodist.land.mr.mean + gentodist.land.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentodist.land.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentodist.land.ans == 'Y')#
		{#
			# Storage vectors#
			gentodist.land.mg.mean <- c()#
			gentodist.land.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentodist.land.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentodist.land.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentodist.land.mg.mean <- append(gentodist.land.mg.mean,mean(meantemp))#
				gentodist.land.mg.sd <- append(gentodist.land.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentodist.land.mg.error <- qnorm(0.975)*gentodist.land.mg.sd/sqrt((mcrunno*batchno))#
			gentodist.land.mg.left <- gentodist.land.mg.mean - gentodist.land.mg.error#
			gentodist.land.mg.right <- gentodist.land.mg.mean + gentodist.land.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentodist.land.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentodist.land.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ barrier|landscape#
	if (gentobarr.land.ans=='Y')#
	{#
		# Storage vectors#
		gentobarr.land.mr.mean <- c()#
		gentobarr.land.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentobarr.land.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentobarr.land.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentobarr.land.mr.mean <- append(gentobarr.land.mr.mean,mean(meantemp))#
			gentobarr.land.mr.sd <- append(gentobarr.land.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentobarr.land.mr.error <- qnorm(0.975)*gentobarr.land.mr.sd/sqrt((mcrunno*batchno))#
		gentobarr.land.mr.left <- gentobarr.land.mr.mean - gentobarr.land.mr.error#
		gentobarr.land.mr.right <- gentobarr.land.mr.mean + gentobarr.land.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentobarr.land.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentobarr.land.ans == 'Y')#
		{#
			# Storage vectors#
			gentobarr.land.mg.mean <- c()#
			gentobarr.land.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentobarr.land.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentobarr.land.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentobarr.land.mg.mean <- append(gentobarr.land.mg.mean,mean(meantemp))#
				gentobarr.land.mg.sd <- append(gentobarr.land.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentobarr.land.mg.error <- qnorm(0.975)*gentobarr.land.mg.sd/sqrt((mcrunno*batchno))#
			gentobarr.land.mg.left <- gentobarr.land.mg.mean - gentobarr.land.mg.error#
			gentobarr.land.mg.right <- gentobarr.land.mg.mean + gentobarr.land.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentobarr.land.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentobarr.land.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ barrier|distance#
	if (gentobarr.dist.ans=='Y')#
	{#
		# Storage vectors#
		gentobarr.dist.mr.mean <- c()#
		gentobarr.dist.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentobarr.dist.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentobarr.dist.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentobarr.dist.mr.mean <- append(gentobarr.dist.mr.mean,mean(meantemp))#
			gentobarr.dist.mr.sd <- append(gentobarr.dist.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentobarr.dist.mr.error <- qnorm(0.975)*gentobarr.dist.mr.sd/sqrt((mcrunno*batchno))#
		gentobarr.dist.mr.left <- gentobarr.dist.mr.mean - gentobarr.dist.mr.error#
		gentobarr.dist.mr.right <- gentobarr.dist.mr.mean + gentobarr.dist.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentobarr.dist.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentobarr.dist.ans == 'Y')#
		{#
			# Storage vectors#
			gentobarr.dist.mg.mean <- c()#
			gentobarr.dist.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentobarr.dist.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentobarr.dist.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentobarr.dist.mg.mean <- append(gentobarr.dist.mg.mean,mean(meantemp))#
				gentobarr.dist.mg.sd <- append(gentobarr.dist.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentobarr.dist.mg.error <- qnorm(0.975)*gentobarr.dist.mg.sd/sqrt((mcrunno*batchno))#
			gentobarr.dist.mg.left <- gentobarr.dist.mg.mean - gentobarr.dist.mg.error#
			gentobarr.dist.mg.right <- gentobarr.dist.mg.mean + gentobarr.dist.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentobarr.dist.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentobarr.dist.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ landscape|distance#
	if (gentoland.dist.ans=='Y')#
	{#
		# Storage vectors#
		gentoland.dist.mr.mean <- c()#
		gentoland.dist.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentoland.dist.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentoland.dist.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentoland.dist.mr.mean <- append(gentoland.dist.mr.mean,mean(meantemp))#
			gentoland.dist.mr.sd <- append(gentoland.dist.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentoland.dist.mr.error <- qnorm(0.975)*gentoland.dist.mr.sd/sqrt((mcrunno*batchno))#
		gentoland.dist.mr.left <- gentoland.dist.mr.mean - gentoland.dist.mr.error#
		gentoland.dist.mr.right <- gentoland.dist.mr.mean + gentoland.dist.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentoland.dist.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentoland.dist.ans == 'Y')#
		{#
			# Storage vectors#
			gentoland.dist.mg.mean <- c()#
			gentoland.dist.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentoland.dist.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentoland.dist.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentoland.dist.mg.mean <- append(gentoland.dist.mg.mean,mean(meantemp))#
				gentoland.dist.mg.sd <- append(gentoland.dist.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentoland.dist.mg.error <- qnorm(0.975)*gentoland.dist.mg.sd/sqrt((mcrunno*batchno))#
			gentoland.dist.mg.left <- gentoland.dist.mg.mean - gentoland.dist.mg.error#
			gentoland.dist.mg.right <- gentoland.dist.mg.mean + gentoland.dist.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentoland.dist.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentoland.dist.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ landscape|barrier#
	if (gentoland.barr.ans=='Y')#
	{#
		# Storage vectors#
		gentoland.barr.mr.mean <- c()#
		gentoland.barr.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentoland.barr.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentoland.barr.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentoland.barr.mr.mean <- append(gentoland.barr.mr.mean,mean(meantemp))#
			gentoland.barr.mr.sd <- append(gentoland.barr.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentoland.barr.mr.error <- qnorm(0.975)*gentoland.barr.mr.sd/sqrt((mcrunno*batchno))#
		gentoland.barr.mr.left <- gentoland.barr.mr.mean - gentoland.barr.mr.error#
		gentoland.barr.mr.right <- gentoland.barr.mr.mean + gentoland.barr.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentoland.barr.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentoland.barr.ans == 'Y')#
		{#
			# Storage vectors#
			gentoland.barr.mg.mean <- c()#
			gentoland.barr.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentoland.barr.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentoland.barr.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentoland.barr.mg.mean <- append(gentoland.barr.mg.mean,mean(meantemp))#
				gentoland.barr.mg.sd <- append(gentoland.barr.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentoland.barr.mg.error <- qnorm(0.975)*gentoland.barr.mg.sd/sqrt((mcrunno*batchno))#
			gentoland.barr.mg.left <- gentoland.barr.mg.mean - gentoland.barr.mg.error#
			gentoland.barr.mg.right <- gentoland.barr.mg.mean + gentoland.barr.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentoland.barr.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentoland.barr.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
#Return values#
list(gentodist.mr.mean=gentodist.mr.mean,#
	gentodist.mr.left=gentodist.mr.left,#
	gentodist.mr.right=gentodist.mr.right,#
	gentodist.mg.mean=gentodist.mg.mean,#
	gentodist.mg.left=gentodist.mg.left,#
	gentodist.mg.right=gentodist.mg.right,#
	gentodist.mg.lag=gentodist.mg.lag,#
	gentobarr.mr.mean=gentobarr.mr.mean,#
	gentobarr.mr.left=gentobarr.mr.left,#
	gentobarr.mr.right=gentobarr.mr.right,#
	gentobarr.mg.mean=gentobarr.mg.mean,#
	gentobarr.mg.left=gentobarr.mg.left,#
	gentobarr.mg.right=gentobarr.mg.right,#
	gentobarr.mg.lag=gentobarr.mg.lag,#
	gentoland.mr.mean=gentoland.mr.mean,#
	gentoland.mr.left=gentoland.mr.left,#
	gentoland.mr.right=gentoland.mr.right,#
	gentoland.mg.mean=gentoland.mg.mean,#
	gentoland.mg.left=gentoland.mg.left,#
	gentoland.mg.right=gentoland.mg.right,#
	gentoland.mg.lag=gentoland.mg.lag,#
	gentodist.barr.mr.mean=gentodist.barr.mr.mean,#
	gentodist.barr.mr.left=gentodist.barr.mr.left,#
	gentodist.barr.mr.right=gentodist.barr.mr.right,#
	gentodist.barr.mg.mean=gentodist.barr.mg.mean,#
	gentodist.barr.mg.left=gentodist.barr.mg.left,#
	gentodist.barr.mg.right=gentodist.barr.mg.right,#
	gentodist.barr.mg.lag=gentodist.barr.mg.lag,#
	gentobarr.dist.mr.mean=gentobarr.dist.mr.mean,#
	gentobarr.dist.mr.left=gentobarr.dist.mr.left,#
	gentobarr.dist.mr.right=gentobarr.dist.mr.right,#
	gentobarr.dist.mg.mean=gentobarr.dist.mg.mean,#
	gentobarr.dist.mg.left=gentobarr.dist.mg.left,#
	gentobarr.dist.mg.right=gentobarr.dist.mg.right,#
	gentobarr.dist.mg.lag=gentobarr.dist.mg.lag,#
	gentoland.barr.mr.mean=gentoland.barr.mr.mean,#
	gentoland.barr.mr.left=gentoland.barr.mr.left,#
	gentoland.barr.mr.right=gentoland.barr.mr.right,#
	gentoland.barr.mg.mean=gentoland.barr.mg.mean,#
	gentoland.barr.mg.left=gentoland.barr.mg.left,#
	gentoland.barr.mg.right=gentoland.barr.mg.right,#
	gentoland.barr.mg.lag=gentoland.barr.mg.lag,#
	gentodist.land.mr.mean=gentodist.land.mr.mean,#
	gentodist.land.mr.left=gentodist.land.mr.left,#
	gentodist.land.mr.right=gentodist.land.mr.right,#
	gentodist.land.mg.mean=gentodist.land.mg.mean,#
	gentodist.land.mg.left=gentodist.land.mg.left,#
	gentodist.land.mg.right=gentodist.land.mg.right,#
	gentodist.land.mg.lag=gentodist.land.mg.lag,#
	gentobarr.land.mr.mean=gentobarr.land.mr.mean,#
	gentobarr.land.mr.left=gentobarr.land.mr.left,#
	gentobarr.land.mr.right=gentobarr.land.mr.right,#
	gentobarr.land.mg.mean=gentobarr.land.mg.mean,#
	gentobarr.land.mg.left=gentobarr.land.mg.left,#
	gentobarr.land.mg.right=gentobarr.land.mg.right,#
	gentobarr.land.mg.lag=gentobarr.land.mg.lag,#
	gentoland.dist.mr.mean=gentoland.dist.mr.mean,#
	gentoland.dist.mr.left=gentoland.dist.mr.left,#
	gentoland.dist.mr.right=gentoland.dist.mr.right,#
	gentoland.dist.mg.mean=gentoland.dist.mg.mean,#
	gentoland.dist.mg.left=gentoland.dist.mg.left,#
	gentoland.dist.mg.right=gentoland.dist.mg.right,#
	gentoland.dist.mg.lag=gentoland.dist.mg.lag)	#
}
Erin L. Landguth#
## MRMCRun.R											#
##   Project Description: an example script to run  the function mantel.mc#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs...#
##	2. MRMCFun.R must be loaded into workspace before this script is ran. 								#
## Project Steps:										#
##	1. User input function parameters#
##	2. mantel.mc function run call#
##	3. mantel.mc.analysis function run call#
##	4. Some plotting commands for mantel.mc.analysis returned values	#
## Project Date: December 10, 2008								#
############################################################################
####################
## Load Library	#
####################
library(spatial)#
library(ecodist)#
################################
## 1. Function parameter inputs	#
################################
batchstring <- ''#
# Specify the number of batch runs used#
batchno <- 3#
# Specify the number of Monte Carlo runs used#
mcrunno <- 5#
# The total individuals in each file#
N <- 1000#
# Total runtime length#
looptime <- 1#
# Uncomment one of these styles for nthfile analysis#
nthfile <- 0	# The incremental nthfile, e.g. 0,5,10,15...#
nthfile <- c(0,5,20,50,100)#
#nthfile <- seq(0,looptime-1,1)#
# Genetic distance file location and names and number of#
gddir <- "~/CDPOP_v1.2.08_20120520/MortData/1345227342output_test_dispersal/"#
gdfilename <- 'Gdmatrix'				 				#
# Barrier distance file location and names and answer if you want to test barrier model#
barrdir <- "~/CDPOP_v1.2.08_20120520/MortData/"			#
barrfilename <- c("CDpanbar01.csv")	#
barrans <- 'Y'				#
# Euclidean distance file location and names and answer if you want to test distanc model#
distdir <- "~/CDPOP_v1.2.08_20120520/MortData/"		#
distfilename <- c("CDdisbar01.csv")#
distans <- 'Y'								#
# Landscape distance file location and names and answer if you want to test landscape model#
landdir <- "~/CDPOP_v1.2.08_20120520/MortData/"	#
landfilename <- c(".csv")		#
landans <- 'N'					#
# Now specify the sample style to use: #
#	known = a known set of indeces to be read from a file#
#	random = a random n draw from the total#
#	all = run analysis on all points#
samplestyle <- 'all'#
# If samplestyle = 'random'#
sampleno <- 200#
# Else if samplestyle = 'known'#
sampledir <- "" #
# Here specify Mantel Test run information 9 of them:#
#	Y or N to the specific simple and partial Mantel Tests#
#	Define number of permutations for significance test#
gentodist.ans <- 'Y'			# Simple genetic ~ distancee#
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier#
gentoland.ans <- 'N'			# Simple genetic ~ landscape#
gentodist.barr.ans <- 'Y'		# Partial genetic ~ distance|barrier#
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape#
gentobarr.dist.ans <- 'Y'		# Partial genetic ~ barrier|distance#
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape#
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance#
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier#
mperms <- 199				# Mantel permutations#
# Here specifiy Mantel Correlogram to run#
#	Y or N to the specific Mantel correlogram#
#	Define year to run test at#
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance#
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier#
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape#
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier#
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape#
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance#
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape#
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance#
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier#
mgramruntime <- 100#
####################
## Function code#
####################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)
Erin L. Landguth#
## MRMCRun.R											#
##   Project Description: an example script to run  the function mantel.mc#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs...#
##	2. MRMCFun.R must be loaded into workspace before this script is ran. 								#
## Project Steps:										#
##	1. User input function parameters#
##	2. mantel.mc function run call#
##	3. mantel.mc.analysis function run call#
##	4. Some plotting commands for mantel.mc.analysis returned values	#
## Project Date: December 10, 2008								#
############################################################################
####################
## Load Library	#
####################
library(spatial)#
library(ecodist)#
################################
## 1. Function parameter inputs	#
################################
batchstring <- ''#
# Specify the number of batch runs used#
batchno <- 1#
# Specify the number of Monte Carlo runs used#
mcrunno <- 1#
# The total individuals in each file#
N <- 1000#
# Total runtime length#
looptime <- 1#
# Uncomment one of these styles for nthfile analysis#
nthfile <- 0	# The incremental nthfile, e.g. 0,5,10,15...#
nthfile <- c(0,5,20,100)#
#nthfile <- seq(0,looptime-1,1)#
# Genetic distance file location and names and number of#
gddir <- "~/CDPOP_v1.2.08_20120520/MortData/1345227342output_test_dispersal/"#
gdfilename <- 'Gdmatrix'				 				#
# Barrier distance file location and names and answer if you want to test barrier model#
barrdir <- "~/CDPOP_v1.2.08_20120520/MortData/"			#
barrfilename <- c("CDpanbar01.csv")	#
barrans <- 'Y'				#
# Euclidean distance file location and names and answer if you want to test distanc model#
distdir <- "~/CDPOP_v1.2.08_20120520/MortData/"		#
distfilename <- c("CDdisbar01.csv")#
distans <- 'Y'								#
# Landscape distance file location and names and answer if you want to test landscape model#
landdir <- "~/CDPOP_v1.2.08_20120520/MortData/"	#
landfilename <- c(".csv")		#
landans <- 'N'					#
# Now specify the sample style to use: #
#	known = a known set of indeces to be read from a file#
#	random = a random n draw from the total#
#	all = run analysis on all points#
samplestyle <- 'all'#
# If samplestyle = 'random'#
sampleno <- 200#
# Else if samplestyle = 'known'#
sampledir <- "" #
# Here specify Mantel Test run information 9 of them:#
#	Y or N to the specific simple and partial Mantel Tests#
#	Define number of permutations for significance test#
gentodist.ans <- 'Y'			# Simple genetic ~ distancee#
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier#
gentoland.ans <- 'N'			# Simple genetic ~ landscape#
gentodist.barr.ans <- 'Y'		# Partial genetic ~ distance|barrier#
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape#
gentobarr.dist.ans <- 'Y'		# Partial genetic ~ barrier|distance#
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape#
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance#
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier#
mperms <- 199				# Mantel permutations#
# Here specifiy Mantel Correlogram to run#
#	Y or N to the specific Mantel correlogram#
#	Define year to run test at#
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance#
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier#
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape#
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier#
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape#
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance#
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape#
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance#
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier#
mgramruntime <- 100#
####################
## Function code#
####################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)#
results <- mantel.mc.analysis(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)#
####################################################
## Plot returned information from mantel.mc.anlysis#
####################################################
# If nthfile has a length of 1, then create a vector#
if (length(nthfile) == 1)#
{#
	nthfile <- seq(0,looptime,as.integer(nthfile))	#
}#
# Simple Mantel genetic~distance#
if (gentodist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.mr.left,lty="dashed")#
	lines(time,results$gentodist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier#
if (gentobarr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.mr.left,lty="dashed")#
	lines(time,results$gentobarr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape#
if (gentoland.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.mr.left,lty="dashed")#
	lines(time,results$gentoland.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|barrier#
if (gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.barr.mr.left,lty="dashed")#
	lines(time,results$gentodist.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|landscape#
if (gentodist.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.land.mr.left,lty="dashed")#
	lines(time,results$gentodist.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|distance#
if (gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.dist.mr.left,lty="dashed")#
	lines(time,results$gentobarr.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|landscape#
if (gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.land.mr.left,lty="dashed")#
	lines(time,results$gentobarr.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|barrier#
if (gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.barr.mr.left,lty="dashed")#
	lines(time,results$gentoland.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|distance#
if (gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.dist.mr.left,lty="dashed")#
	lines(time,results$gentoland.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mgram genetic~distance#
if (mgram.gentodist.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentodist.mg.lag,results$gentodist.mg.mean,type="b",ylab="Mantel r",xlab="Distance",las=1)#
	lines(results$gentodist.mg.lag,results$gentodist.mg.left,lty="dashed")#
	lines(results$gentodist.mg.lag,results$gentodist.mg.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
}#
# Simple Mgram genetic~barrier#
if (mgram.gentobarr.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentobarr.mg.lag,results$gentobarr.mg.mean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.left,lty="dashed")#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.right,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier)")#
}#
# Simple Mgram genetic~landscape#
if (mgram.gentoland.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.mg.lag#
	mgmean <- results$gentoland.mg.mean#
	mgright <- results$gentoland.mg.right#
	mgleft <- results$gentoland.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape)")#
}#
# Simple Mgram genetic~distance|barrier#
if (mgram.gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.barr.mg.lag#
	mgmean <- results$gentodist.barr.mg.mean#
	mgright <- results$gentodist.barr.mg.right#
	mgleft <- results$gentodist.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|barrier)")#
}#
# Simple Mgram genetic~distance|landscape#
if (mgram.gentodist.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.land.mg.lag#
	mgmean <- results$gentodist.land.mg.mean#
	mgright <- results$gentodist.land.mg.right#
	mgleft <- results$gentodist.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|landscape)")#
}#
# Simple Mgram genetic~barrier|distance#
if (mgram.gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.dist.mg.lag#
	mgmean <- results$gentobarr.dist.mg.mean#
	mgright <- results$gentobarr.dist.mg.right#
	mgleft <- results$gentobarr.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|distance)")#
}#
# Simple Mgram genetic~barrier|landscape#
if (mgram.gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.land.mg.lag#
	mgmean <- results$gentobarr.land.mg.mean#
	mgright <- results$gentobarr.land.mg.right#
	mgleft <- results$gentobarr.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|landscape)")#
}#
# Simple Mgram genetic~landscape|distance#
if (mgram.gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.dist.mg.lag#
	mgmean <- results$gentoland.dist.mg.mean#
	mgright <- results$gentoland.dist.mg.right#
	mgleft <- results$gentoland.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|distance)")#
}#
# Simple Mgram genetic~landscape|barrier#
if (mgram.gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.barr.mg.lag#
	mgmean <- results$gentoland.barr.mg.mean#
	mgright <- results$gentoland.barr.mg.right#
	mgleft <- results$gentoland.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|barrier)")#
}
Erin L. Landguth#
## MRMCRun.R											#
##   Project Description: an example script to run  the function mantel.mc#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs...#
##	2. MRMCFun.R must be loaded into workspace before this script is ran. 								#
## Project Steps:										#
##	1. User input function parameters#
##	2. mantel.mc function run call#
##	3. mantel.mc.analysis function run call#
##	4. Some plotting commands for mantel.mc.analysis returned values	#
## Project Date: December 10, 2008								#
############################################################################
####################
## Load Library	#
####################
library(spatial)#
library(ecodist)#
################################
## 1. Function parameter inputs	#
################################
batchstring <- ''#
# Specify the number of batch runs used#
batchno <- 1#
# Specify the number of Monte Carlo runs used#
mcrunno <- 1#
# The total individuals in each file#
N <- 1000#
# Total runtime length#
looptime <- 1#
# Uncomment one of these styles for nthfile analysis#
nthfile <- 0	# The incremental nthfile, e.g. 0,5,10,15...#
nthfile <- c(0,5,20,50,100)#
#nthfile <- seq(0,looptime-1,1)#
# Genetic distance file location and names and number of#
gddir <- "~/CDPOP_v1.2.08_20120520/MortData/1345227342output_test_dispersal/"#
gdfilename <- 'Gdmatrix'				 				#
# Barrier distance file location and names and answer if you want to test barrier model#
barrdir <- "~/CDPOP_v1.2.08_20120520/MortData/"			#
barrfilename <- c("CDpanbar01.csv")	#
barrans <- 'Y'				#
# Euclidean distance file location and names and answer if you want to test distanc model#
distdir <- "~/CDPOP_v1.2.08_20120520/MortData/"		#
distfilename <- c("CDdisbar01.csv")#
distans <- 'Y'								#
# Landscape distance file location and names and answer if you want to test landscape model#
landdir <- "~/CDPOP_v1.2.08_20120520/MortData/"	#
landfilename <- c(".csv")		#
landans <- 'N'					#
# Now specify the sample style to use: #
#	known = a known set of indeces to be read from a file#
#	random = a random n draw from the total#
#	all = run analysis on all points#
samplestyle <- 'all'#
# If samplestyle = 'random'#
sampleno <- 200#
# Else if samplestyle = 'known'#
sampledir <- "" #
# Here specify Mantel Test run information 9 of them:#
#	Y or N to the specific simple and partial Mantel Tests#
#	Define number of permutations for significance test#
gentodist.ans <- 'Y'			# Simple genetic ~ distancee#
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier#
gentoland.ans <- 'N'			# Simple genetic ~ landscape#
gentodist.barr.ans <- 'Y'		# Partial genetic ~ distance|barrier#
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape#
gentobarr.dist.ans <- 'Y'		# Partial genetic ~ barrier|distance#
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape#
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance#
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier#
mperms <- 199				# Mantel permutations#
# Here specifiy Mantel Correlogram to run#
#	Y or N to the specific Mantel correlogram#
#	Define year to run test at#
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance#
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier#
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape#
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier#
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape#
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance#
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape#
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance#
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier#
mgramruntime <- 100#
####################
## Function code#
####################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)#
results <- mantel.mc.analysis(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)#
####################################################
## Plot returned information from mantel.mc.anlysis#
####################################################
# If nthfile has a length of 1, then create a vector#
if (length(nthfile) == 1)#
{#
	nthfile <- seq(0,looptime,as.integer(nthfile))	#
}#
# Simple Mantel genetic~distance#
if (gentodist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.mr.left,lty="dashed")#
	lines(time,results$gentodist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier#
if (gentobarr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.mr.left,lty="dashed")#
	lines(time,results$gentobarr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape#
if (gentoland.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.mr.left,lty="dashed")#
	lines(time,results$gentoland.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|barrier#
if (gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.barr.mr.left,lty="dashed")#
	lines(time,results$gentodist.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|landscape#
if (gentodist.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.land.mr.left,lty="dashed")#
	lines(time,results$gentodist.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|distance#
if (gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.dist.mr.left,lty="dashed")#
	lines(time,results$gentobarr.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|landscape#
if (gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.land.mr.left,lty="dashed")#
	lines(time,results$gentobarr.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|barrier#
if (gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.barr.mr.left,lty="dashed")#
	lines(time,results$gentoland.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|distance#
if (gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.dist.mr.left,lty="dashed")#
	lines(time,results$gentoland.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mgram genetic~distance#
if (mgram.gentodist.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentodist.mg.lag,results$gentodist.mg.mean,type="b",ylab="Mantel r",xlab="Distance",las=1)#
	lines(results$gentodist.mg.lag,results$gentodist.mg.left,lty="dashed")#
	lines(results$gentodist.mg.lag,results$gentodist.mg.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
}#
# Simple Mgram genetic~barrier#
if (mgram.gentobarr.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentobarr.mg.lag,results$gentobarr.mg.mean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.left,lty="dashed")#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.right,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier)")#
}#
# Simple Mgram genetic~landscape#
if (mgram.gentoland.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.mg.lag#
	mgmean <- results$gentoland.mg.mean#
	mgright <- results$gentoland.mg.right#
	mgleft <- results$gentoland.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape)")#
}#
# Simple Mgram genetic~distance|barrier#
if (mgram.gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.barr.mg.lag#
	mgmean <- results$gentodist.barr.mg.mean#
	mgright <- results$gentodist.barr.mg.right#
	mgleft <- results$gentodist.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|barrier)")#
}#
# Simple Mgram genetic~distance|landscape#
if (mgram.gentodist.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.land.mg.lag#
	mgmean <- results$gentodist.land.mg.mean#
	mgright <- results$gentodist.land.mg.right#
	mgleft <- results$gentodist.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|landscape)")#
}#
# Simple Mgram genetic~barrier|distance#
if (mgram.gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.dist.mg.lag#
	mgmean <- results$gentobarr.dist.mg.mean#
	mgright <- results$gentobarr.dist.mg.right#
	mgleft <- results$gentobarr.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|distance)")#
}#
# Simple Mgram genetic~barrier|landscape#
if (mgram.gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.land.mg.lag#
	mgmean <- results$gentobarr.land.mg.mean#
	mgright <- results$gentobarr.land.mg.right#
	mgleft <- results$gentobarr.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|landscape)")#
}#
# Simple Mgram genetic~landscape|distance#
if (mgram.gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.dist.mg.lag#
	mgmean <- results$gentoland.dist.mg.mean#
	mgright <- results$gentoland.dist.mg.right#
	mgleft <- results$gentoland.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|distance)")#
}#
# Simple Mgram genetic~landscape|barrier#
if (mgram.gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.barr.mg.lag#
	mgmean <- results$gentoland.barr.mg.mean#
	mgright <- results$gentoland.barr.mg.right#
	mgleft <- results$gentoland.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|barrier)")#
}
Erin L. Landguth#
## MRMCRun.R											#
##   Project Description: an example script to run  the function mantel.mc#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs...#
##	2. MRMCFun.R must be loaded into workspace before this script is ran. 								#
## Project Steps:										#
##	1. User input function parameters#
##	2. mantel.mc function run call#
##	3. mantel.mc.analysis function run call#
##	4. Some plotting commands for mantel.mc.analysis returned values	#
## Project Date: December 10, 2008								#
############################################################################
####################
## Load Library	#
####################
library(spatial)#
library(ecodist)#
################################
## 1. Function parameter inputs	#
################################
batchstring <- ''#
# Specify the number of batch runs used#
batchno <- 3#
# Specify the number of Monte Carlo runs used#
mcrunno <- 1#
# The total individuals in each file#
N <- 1000#
# Total runtime length#
looptime <- 1#
# Uncomment one of these styles for nthfile analysis#
nthfile <- 0	# The incremental nthfile, e.g. 0,5,10,15...#
nthfile <- c(0,5,20,100)#
#nthfile <- seq(0,looptime-1,1)#
# Genetic distance file location and names and number of#
gddir <- "~/CDPOP_v1.2.08_20120520/MortData/1345227342output_test_dispersal/"#
gdfilename <- 'Gdmatrix'				 				#
# Barrier distance file location and names and answer if you want to test barrier model#
barrdir <- "~/CDPOP_v1.2.08_20120520/MortData/"			#
barrfilename <- c("CDpanbar01.csv")	#
barrans <- 'Y'				#
# Euclidean distance file location and names and answer if you want to test distanc model#
distdir <- "~/CDPOP_v1.2.08_20120520/MortData/"		#
distfilename <- c("CDdisbar01.csv")#
distans <- 'Y'								#
# Landscape distance file location and names and answer if you want to test landscape model#
landdir <- "~/CDPOP_v1.2.08_20120520/MortData/"	#
landfilename <- c(".csv")		#
landans <- 'N'					#
# Now specify the sample style to use: #
#	known = a known set of indeces to be read from a file#
#	random = a random n draw from the total#
#	all = run analysis on all points#
samplestyle <- 'all'#
# If samplestyle = 'random'#
sampleno <- 200#
# Else if samplestyle = 'known'#
sampledir <- "" #
# Here specify Mantel Test run information 9 of them:#
#	Y or N to the specific simple and partial Mantel Tests#
#	Define number of permutations for significance test#
gentodist.ans <- 'Y'			# Simple genetic ~ distancee#
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier#
gentoland.ans <- 'N'			# Simple genetic ~ landscape#
gentodist.barr.ans <- 'Y'		# Partial genetic ~ distance|barrier#
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape#
gentobarr.dist.ans <- 'Y'		# Partial genetic ~ barrier|distance#
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape#
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance#
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier#
mperms <- 199				# Mantel permutations#
# Here specifiy Mantel Correlogram to run#
#	Y or N to the specific Mantel correlogram#
#	Define year to run test at#
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance#
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier#
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape#
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier#
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape#
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance#
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape#
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance#
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier#
mgramruntime <- 100#
####################
## Function code#
####################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)#
results <- mantel.mc.analysis(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)#
####################################################
## Plot returned information from mantel.mc.anlysis#
####################################################
# If nthfile has a length of 1, then create a vector#
if (length(nthfile) == 1)#
{#
	nthfile <- seq(0,looptime,as.integer(nthfile))	#
}#
# Simple Mantel genetic~distance#
if (gentodist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.mr.left,lty="dashed")#
	lines(time,results$gentodist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier#
if (gentobarr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.mr.left,lty="dashed")#
	lines(time,results$gentobarr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape#
if (gentoland.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.mr.left,lty="dashed")#
	lines(time,results$gentoland.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|barrier#
if (gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.barr.mr.left,lty="dashed")#
	lines(time,results$gentodist.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|landscape#
if (gentodist.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.land.mr.left,lty="dashed")#
	lines(time,results$gentodist.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|distance#
if (gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.dist.mr.left,lty="dashed")#
	lines(time,results$gentobarr.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|landscape#
if (gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.land.mr.left,lty="dashed")#
	lines(time,results$gentobarr.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|barrier#
if (gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.barr.mr.left,lty="dashed")#
	lines(time,results$gentoland.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|distance#
if (gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.dist.mr.left,lty="dashed")#
	lines(time,results$gentoland.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mgram genetic~distance#
if (mgram.gentodist.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentodist.mg.lag,results$gentodist.mg.mean,type="b",ylab="Mantel r",xlab="Distance",las=1)#
	lines(results$gentodist.mg.lag,results$gentodist.mg.left,lty="dashed")#
	lines(results$gentodist.mg.lag,results$gentodist.mg.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
}#
# Simple Mgram genetic~barrier#
if (mgram.gentobarr.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentobarr.mg.lag,results$gentobarr.mg.mean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.left,lty="dashed")#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.right,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier)")#
}#
# Simple Mgram genetic~landscape#
if (mgram.gentoland.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.mg.lag#
	mgmean <- results$gentoland.mg.mean#
	mgright <- results$gentoland.mg.right#
	mgleft <- results$gentoland.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape)")#
}#
# Simple Mgram genetic~distance|barrier#
if (mgram.gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.barr.mg.lag#
	mgmean <- results$gentodist.barr.mg.mean#
	mgright <- results$gentodist.barr.mg.right#
	mgleft <- results$gentodist.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|barrier)")#
}#
# Simple Mgram genetic~distance|landscape#
if (mgram.gentodist.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.land.mg.lag#
	mgmean <- results$gentodist.land.mg.mean#
	mgright <- results$gentodist.land.mg.right#
	mgleft <- results$gentodist.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|landscape)")#
}#
# Simple Mgram genetic~barrier|distance#
if (mgram.gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.dist.mg.lag#
	mgmean <- results$gentobarr.dist.mg.mean#
	mgright <- results$gentobarr.dist.mg.right#
	mgleft <- results$gentobarr.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|distance)")#
}#
# Simple Mgram genetic~barrier|landscape#
if (mgram.gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.land.mg.lag#
	mgmean <- results$gentobarr.land.mg.mean#
	mgright <- results$gentobarr.land.mg.right#
	mgleft <- results$gentobarr.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|landscape)")#
}#
# Simple Mgram genetic~landscape|distance#
if (mgram.gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.dist.mg.lag#
	mgmean <- results$gentoland.dist.mg.mean#
	mgright <- results$gentoland.dist.mg.right#
	mgleft <- results$gentoland.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|distance)")#
}#
# Simple Mgram genetic~landscape|barrier#
if (mgram.gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.barr.mg.lag#
	mgmean <- results$gentoland.barr.mg.mean#
	mgright <- results$gentoland.barr.mg.right#
	mgleft <- results$gentoland.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|barrier)")#
}
Erin L. Landguth#
## MRMCFun.R											#
##   Project Description: #
##	1. mantel.mc: Function to run simple and partial mantel test on #
##   	distance, barrier, and genetic matrices extracting information from #
##   	mutliple folders that were created through a batch or Monte Carlo #
##   	process.  Results outputted to MRMCgentoXXXXXX.csv - the correspond-#
#	ing Mantel test.#
##	2. mantel.mc.analysis: Function to read in MRMCgentoXXX.csv, calculate#
##	mean, sd, confidence intervals and plot these results.#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs... 								#
## MRMCRun.R is an example script to run this function 																	#
## Project Date: December 10, 2008								#
############################################################################
##################################
## Function code for Mantel tests#
##################################
mantel.mc <- function(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)#
{#
	#################################
	## 1. Read in sample information#
	#################################
	# Random draw#
	if (samplestyle == 'random')#
	{#
		sampledraw <- runif(sampleno,1,N)#
	}#
	# Known points draw#
	if (samplestyle == 'known')#
	{#
		sampledraw <- read.table(paste(sampledir,sep=""),sep=",",header=TRUE)#
		sampledraw <- sampledraw$SelectedID#
	}#
	# All points draw#
	if (samplestyle == 'all')#
	{#
		sampledraw <- seq(1,N)#
	}#
	# If nthfile has a length of 1, then create a vector#
	if (length(nthfile) == 1 && nthfile !=0)#
	{#
		nthfile <- seq(0,looptime,as.integer(nthfile))	#
	}#
	#######################
	## 2. Batch Loop Begin#
	#######################
	for (i in 1:batchno)#
	{#
		############################################
		## 3. Read in Data - Cost Distance Matrices#
		############################################
		# Read in barrier matrix#
		if (barrans == 'Y')#
		{#
			if (length(barrfilename) == 1)#
			{#
				barrier <- read.table(paste(barrdir,barrfilename[1],sep=""),sep=",",header=FALSE)#
			}#
			if (length(barrfilename) != 1)#
			{#
				barrier <- read.table(paste(barrdir,barrfilename[i],sep=""),sep=",",header=FALSE)#
			}#
			barrier <- as.matrix(barrier[,1:N])#
			barrier <- lower(barrier[sampledraw,sampledraw])#
		}#
		# Read in distance matrix	#
		if (distans == 'Y')#
		{#
			if (length(distfilename) == 1)#
			{#
				distance <- read.table(paste(distdir,distfilename[1],sep=""),sep=",",header=FALSE)#
			}#
			if (length(distfilename) != 1)#
			{#
				distance <- read.table(paste(distdir,distfilename[i],sep=""),sep=",",header=FALSE)#
			}#
			distance <- as.matrix(distance[,1:N])#
			distance <- lower(distance[sampledraw,sampledraw])#
		}#
		# Read in landscape matrix#
		if (landans == 'Y')#
		{#
			if (length(landfilename) == 1)#
			{#
				landscape <- read.table(paste(landdir,landfilename[1],sep=""),sep=",",header=FALSE)#
			}#
			if (length(landfilename) != 1)#
			{#
				landscape <- read.table(paste(landdir,landfilename[i],sep=""),sep=",",header=FALSE)#
			}#
			landscape <- as.matrix(landscape[,1:N])#
			landscape <- lower(landscape[sampledraw,sampledraw])#
		}#
		# Create batch directory string#
		batchfiledir <- paste(batchstring,'batchrun',as.character(i-1),sep="")		#
		#batchfiledir <- paste(batchstring,'batchrun',as.character(9),sep="")		#
		print(batchfiledir)		#
		#############################
		## 4. Monte Carlo Loop Begin#
		#############################
		for (j in 1:mcrunno)#
		{#
			# Create Monte Carlo directory string#
			mcfiledir <- paste('mcrun',as.character(j-1),'/',sep="")#
			print(mcfiledir)#
			######################################
			## 5. Preliminary vector storage work#
			######################################
			# Create empty vectors to append to for mantelr,pval1,llim,ulim: check all cases#
			# Simple genetic ~ distance#
			if (gentodist.ans=='Y')#
			{#
				gentodist.mr <- c()#
				gentodist.pv1 <- c()#
				gentodist.pv2 <- c()#
				gentodist.pv3 <- c()#
			}#
			# Simple genetic ~ barrier#
			if (gentobarr.ans=='Y')#
			{#
				gentobarr.mr <- c()#
				gentobarr.pv1 <- c()#
				gentobarr.pv2 <- c()#
				gentobarr.pv3 <- c()#
			}#
			# Simple genetic ~ landscape#
			if (gentoland.ans=='Y')#
			{#
				gentoland.mr <- c()#
				gentoland.pv1 <- c()#
				gentoland.pv2 <- c()#
				gentoland.pv3 <- c()#
			}#
			# Partial genetic ~ distance|barrier#
			if (gentodist.barr.ans=='Y')#
			{#
				gentodist.barr.mr <- c()#
				gentodist.barr.pv1 <- c()#
				gentodist.barr.pv2 <- c()#
				gentodist.barr.pv3 <- c()#
			}#
			# Partial genetic ~ distance|landscape#
			if (gentodist.land.ans=='Y')#
			{#
				gentodist.land.mr <- c()#
				gentodist.land.pv1 <- c()#
				gentodist.land.pv2 <- c()#
				gentodist.land.pv3 <- c()#
			}#
			# Partial genetic ~ barrier|landscape#
			if (gentobarr.land.ans=='Y')#
			{#
				gentobarr.land.mr <- c()#
				gentobarr.land.pv1 <- c()#
				gentobarr.land.pv2 <- c()#
				gentobarr.land.pv3 <- c()#
			}#
			# Partial genetic ~ barrier|distance#
			if (gentobarr.dist.ans=='Y')#
			{#
				gentobarr.dist.mr <- c()#
				gentobarr.dist.pv1 <- c()#
				gentobarr.dist.pv2 <- c()#
				gentobarr.dist.pv3 <- c()#
			}#
			# Partial genetic ~ landscape|distance#
			if (gentoland.dist.ans=='Y')#
			{#
				gentoland.dist.mr <- c()#
				gentoland.dist.pv1 <- c()#
				gentoland.dist.pv2 <- c()#
				gentoland.dist.pv3 <- c()#
			}#
			# Partial genetic ~ landscape|barrier#
			if (gentoland.barr.ans=='Y')#
			{#
				gentoland.barr.mr <- c()#
				gentoland.barr.pv1 <- c()#
				gentoland.barr.pv2 <- c()#
				gentoland.barr.pv3 <- c()#
			}#
			####################################################################
			## 6. Mantel Test: #
			##	Simple: genetic ~ distance#
			##	Simple: genetic ~ barrier#
			##	Partial: genetic ~ distance|barrier#
			##	Partial: genetic ~ barrier|distance#
			##	Partial: genetic ~ distance|distance#
			##	Mantel Correlogram for each of the above or specified.#
			####################################################################
			# Start for loop through each Gdmatrix#
			for (k in 1:length(nthfile))#
			{#
				# Read in genetic distance matrix - piece it up for character read#
				file1 <- as.character(nthfile[k])		# For specified nthfile#
				file2 <- ".csv"#
				genetic <- read.table(paste(gddir,batchfiledir,mcfiledir,gdfilename,file1,file2,sep=""),sep=",",header=FALSE)#
				genetic <- as.matrix(genetic[,1:N])#
				print(nthfile[k])#
				# Make matrices lower#
				genetic <- lower(genetic[sampledraw,sampledraw])#
				# Run Mantel appending results to empty vector: distance#
				if (gentodist.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~distance, nperm=mperms, nboot=0)#
					# Append loop information#
					gentodist.mr <- append(gentodist.mr,mantelrun[1])#
					gentodist.pv1 <- append(gentodist.pv1,mantelrun[2])#
					gentodist.pv2 <- append(gentodist.pv2,mantelrun[3])#
					gentodist.pv3 <- append(gentodist.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentodist.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentodist.mgram <- mgram(genetic,distance,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: barrier#
				if (gentobarr.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~barrier, nperm=mperms, nboot=0)#
					# Append loop information#
					gentobarr.mr <- append(gentobarr.mr,mantelrun[1])#
					gentobarr.pv1 <- append(gentobarr.pv1,mantelrun[2])#
					gentobarr.pv2 <- append(gentobarr.pv2,mantelrun[3])#
					gentobarr.pv3 <- append(gentobarr.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentobarr.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentobarr.mgram <- mgram(genetic,barrier,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: landscape#
				if (gentoland.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~landscape, nperm=mperms, nboot=0)#
					# Append loop information#
					gentoland.mr <- append(gentoland.mr,mantelrun[1])#
					gentoland.pv1 <- append(gentoland.pv1,mantelrun[2])#
					gentoland.pv2 <- append(gentoland.pv2,mantelrun[3])#
					gentoland.pv3 <- append(gentoland.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentoland.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentoland.mgram <- mgram(genetic,landscape,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: distance|barrier#
				if (gentodist.barr.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~distance+barrier, nperm=mperms, nboot=0)#
					# Append loop information#
					gentodist.barr.mr <- append(gentodist.barr.mr,mantelrun[1])#
					gentodist.barr.pv1 <- append(gentodist.barr.pv1,mantelrun[2])#
					gentodist.barr.pv2 <- append(gentodist.barr.pv2,mantelrun[3])#
					gentodist.barr.pv3 <- append(gentodist.barr.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentodist.barr.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentodist.barr.mgram <- mgram(genetic,distance+barrier,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: distance|landscape#
				if (gentodist.land.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~distance+landscape, nperm=mperms, nboot=0)#
					# Append loop information#
					gentodist.land.mr <- append(gentodist.land.mr,mantelrun[1])#
					gentodist.land.pv1 <- append(gentodist.land.pv1,mantelrun[2])#
					gentodist.land.pv2 <- append(gentodist.land.pv2,mantelrun[3])#
					gentodist.land.pv3 <- append(gentodist.land.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentodist.land.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentodist.land.mgram <- mgram(genetic,distance+landscape,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: barrier|distance#
				if (gentobarr.dist.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~barrier+distance, nperm=mperms, nboot=0)#
					# Append loop information#
					gentobarr.dist.mr <- append(gentobarr.dist.mr,mantelrun[1])#
					gentobarr.dist.pv1 <- append(gentobarr.dist.pv1,mantelrun[2])#
					gentobarr.dist.pv2 <- append(gentobarr.dist.pv2,mantelrun[3])#
					gentobarr.dist.pv3 <- append(gentobarr.dist.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentobarr.dist.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentobarr.dist.mgram <- mgram(genetic,barrier+distance,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: barrier|landscape#
				if (gentobarr.land.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~barrier+landscape, nperm=mperms, nboot=0)#
					# Append loop information#
					gentobarr.land.mr <- append(gentobarr.land.mr,mantelrun[1])#
					gentobarr.land.pv1 <- append(gentobarr.land.pv1,mantelrun[2])#
					gentobarr.land.pv2 <- append(gentobarr.land.pv2,mantelrun[3])#
					gentobarr.land.pv3 <- append(gentobarr.land.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentobarr.land.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentobarr.land.mgram <- mgram(genetic,barrier+landscape,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: landscape|distance#
				if (gentoland.dist.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~landscape+distance, nperm=mperms, nboot=0)#
					# Append loop information#
					gentoland.dist.mr <- append(gentoland.dist.mr,mantelrun[1])#
					gentoland.dist.pv1 <- append(gentoland.dist.pv1,mantelrun[2])#
					gentoland.dist.pv2 <- append(gentoland.dist.pv2,mantelrun[3])#
					gentoland.dist.pv3 <- append(gentoland.dist.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentoland.dist.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentoland.dist.mgram <- mgram(genetic,landscape+distance,nperm=mperms)#
						}#
					}#
				}#
				# Run Mantel appending results to empty vector: landscape|barrier#
				if (gentoland.barr.ans == 'Y')#
				{	#
					mantelrun <- mantel(genetic~landscape+barrier, nperm=mperms, nboot=0)#
					# Append loop information#
					gentoland.barr.mr <- append(gentoland.barr.mr,mantelrun[1])#
					gentoland.barr.pv1 <- append(gentoland.barr.pv1,mantelrun[2])#
					gentoland.barr.pv2 <- append(gentoland.barr.pv2,mantelrun[3])#
					gentoland.barr.pv3 <- append(gentoland.barr.pv3,mantelrun[4])#
					# Check for correlogram#
					if (mgram.gentoland.barr.ans == 'Y')#
					{#
						if (nthfile[k] == mgramruntime)#
						{#
							gentoland.barr.mgram <- mgram(genetic,landscape+barrier,nperm=mperms)#
						}#
					}#
				}# Last Mantel Run End#
			}# Mantel Loop End#
			########################################
			## 7. Output mantel information to file#
			#######################################				#
			## Transpose and data.frame vectors and then print and write to file#
			if (gentodist.ans=='Y')#
			{#
				gentodist.mr <- t(data.frame(gentodist.mr))#
				gentodist.pv1 <- t(data.frame(gentodist.pv1))#
				gentodist.pv2 <- t(data.frame(gentodist.pv2))#
				gentodist.pv3 <- t(data.frame(gentodist.pv3))#
				# File name#
				fileoutputname <- "MRMCgentodist.csv"#
				write.table(gentodist.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentodist.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentodist.csv"#
					write.table(t(data.frame(gentodist.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}			#
			}#
			# Simple genetic ~ barrier#
			if (gentobarr.ans=='Y')#
			{#
				gentobarr.mr <- t(data.frame(gentobarr.mr))#
				gentobarr.pv1 <- t(data.frame(gentobarr.pv1))#
				gentobarr.pv2 <- t(data.frame(gentobarr.pv2))#
				gentobarr.pv3 <- t(data.frame(gentobarr.pv3))#
				# File name#
				fileoutputname <- "MRMCgentobarr.csv"#
				write.table(gentobarr.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentobarr.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentobarr.csv"#
					write.table(t(data.frame(gentobarr.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Simple genetic ~ landscape#
			if (gentoland.ans=='Y')#
			{#
				gentoland.mr <- t(data.frame(gentoland.mr))#
				gentoland.pv1 <- t(data.frame(gentoland.pv1))#
				gentoland.pv2 <- t(data.frame(gentoland.pv2))#
				gentoland.pv3 <- t(data.frame(gentoland.pv3))#
				# File name#
				fileoutputname <- "MRMCgentoland.csv"#
				write.table(gentoland.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentoland.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentoland.csv"#
					write.table(t(data.frame(gentoland.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ distance|barrier#
			if (gentodist.barr.ans=='Y')#
			{#
				gentodist.barr.mr <- t(data.frame(gentodist.barr.mr))#
				gentodist.barr.pv1 <- t(data.frame(gentodist.barr.pv1))#
				gentodist.barr.pv2 <- t(data.frame(gentodist.barr.pv2))#
				gentodist.barr.pv3 <- t(data.frame(gentodist.barr.pv3))#
				# File name#
				fileoutputname <- "MRMCgentodist.barr.csv"#
				write.table(gentodist.barr.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.barr.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.barr.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.barr.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentodist.barr.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentodist.barr.csv"#
					write.table(t(data.frame(gentodist.barr.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.barr.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.barr.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ distance|landscape#
			if (gentodist.land.ans=='Y')#
			{#
				gentodist.land.mr <- t(data.frame(gentodist.land.mr))#
				gentodist.land.pv1 <- t(data.frame(gentodist.land.pv1))#
				gentodist.land.pv2 <- t(data.frame(gentodist.land.pv2))#
				gentodist.land.pv3 <- t(data.frame(gentodist.land.pv3))#
				# File name#
				fileoutputname <- "MRMCgentodist.land.csv"#
				write.table(gentodist.land.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.land.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.land.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentodist.land.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentodist.land.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentodist.land.csv"#
					write.table(t(data.frame(gentodist.land.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.land.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentodist.land.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ barrier|landscape#
			if (gentobarr.land.ans=='Y')#
			{#
				gentobarr.land.mr <- t(data.frame(gentobarr.land.mr))#
				gentobarr.land.pv1 <- t(data.frame(gentobarr.land.pv1))#
				gentobarr.land.pv2 <- t(data.frame(gentobarr.land.pv2))#
				gentobarr.land.pv3 <- t(data.frame(gentobarr.land.pv3))#
				# File name#
				fileoutputname <- "MRMCgentobarr.land.csv"#
				write.table(gentobarr.land.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.land.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.land.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.land.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentobarr.land.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentobarr.land.csv"#
					write.table(t(data.frame(gentobarr.land.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.land.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.land.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ barrier|distance#
			if (gentobarr.dist.ans=='Y')#
			{#
				gentobarr.dist.mr <- t(data.frame(gentobarr.dist.mr))#
				gentobarr.dist.pv1 <- t(data.frame(gentobarr.dist.pv1))#
				gentobarr.dist.pv2 <- t(data.frame(gentobarr.dist.pv2))#
				gentobarr.dist.pv3 <- t(data.frame(gentobarr.dist.pv3))#
				# File name#
				fileoutputname <- "MRMCgentobarr.dist.csv"#
				write.table(gentobarr.dist.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.dist.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.dist.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentobarr.dist.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentobarr.dist.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentobarr.dist.csv"#
					write.table(t(data.frame(gentobarr.dist.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.dist.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentobarr.dist.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ landscape|distance#
			if (gentoland.dist.ans=='Y')#
			{#
				gentoland.dist.mr <- t(data.frame(gentoland.dist.mr))#
				gentoland.dist.pv1 <- t(data.frame(gentoland.dist.pv1))#
				gentoland.dist.pv2 <- t(data.frame(gentoland.dist.pv2))#
				gentoland.dist.pv3 <- t(data.frame(gentoland.dist.pv3))#
				# File name#
				fileoutputname <- "MRMCgentoland.dist.csv"#
				write.table(gentoland.dist.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.dist.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.dist.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.dist.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentoland.dist.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentoland.dist.csv"#
					write.table(t(data.frame(gentoland.dist.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.dist.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.dist.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
			# Partial genetic ~ landscape|barrier#
			if (gentoland.barr.ans=='Y')#
			{#
				gentoland.barr.mr <- t(data.frame(gentoland.barr.mr))#
				gentoland.barr.pv1 <- t(data.frame(gentoland.barr.pv1))#
				gentoland.barr.pv2 <- t(data.frame(gentoland.barr.pv2))#
				gentoland.barr.pv3 <- t(data.frame(gentoland.barr.pv3))#
				# File name#
				fileoutputname <- "MRMCgentoland.barr.csv"#
				write.table(gentoland.barr.mr,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.barr.pv1,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.barr.pv2,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol=",",#
					row.names=TRUE,col.names=FALSE)#
				write.table(gentoland.barr.pv3,file=paste(gddir,fileoutputname,sep=""),append=TRUE,sep=",",eol="\n",#
					row.names=TRUE,col.names=FALSE)#
				if (mgram.gentoland.barr.ans=='Y')#
				{#
					# File folder header#
					fileoutputname1 <- "MGramMCgentoland.barr.csv"#
					write.table(t(data.frame(gentoland.barr.mgram$mgram[,3])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.barr.mgram$mgram[,1])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol=",",#
						row.names=TRUE,col.names=FALSE)#
					write.table(t(data.frame(gentoland.barr.mgram$mgram[,4])),file=paste(gddir,fileoutputname1,sep=""),append=TRUE,sep=",",eol="\n",#
						row.names=TRUE,col.names=FALSE)#
				}#
			}#
		}# Monte Carlo Loop End		#
	}# Batch Loop End#
}# Function End#
##################################################
## Function code for Mantel analysis and plotting#
##################################################
mantel.mc.analysis <- function(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)#
{#
	###########################################################################
	## For specified Mantel analysis (must be a file allready created for it):#
	##	1. Create storage mean and sd vectors#
	##	2. Read in file#
	##	3. Loop the file, storing and then take the mean and sd and error.#
	##	4. Calculate the SE, and left and right bars#
	##	5. Write information back to file...appending mean,sd,error,left,right#
	##	6. Plot results if specified.#
	###########################################################################
	# Storage vectors to be return by function#
	gentodist.mr.mean <- c()#
	gentodist.mr.left <- c()#
	gentodist.mr.right <- c()#
	gentodist.mg.mean <- c()#
	gentodist.mg.left <- c()#
	gentodist.mg.right <- c()#
	gentodist.mg.lag <- c()#
	gentobarr.mr.mean <- c()#
	gentobarr.mr.left <- c()#
	gentobarr.mr.right <- c()#
	gentobarr.mg.mean <- c()#
	gentobarr.mg.left <- c()#
	gentobarr.mg.right <- c()#
	gentobarr.mg.lag <- c()#
	gentoland.mr.mean <- c()#
	gentoland.mr.left <- c()#
	gentoland.mr.right <- c()#
	gentoland.mg.mean <- c()#
	gentoland.mg.left <- c()#
	gentoland.mg.right <- c()#
	gentoland.mg.lag <- c()#
	gentodist.barr.mr.mean <- c()#
	gentodist.barr.mr.left <- c()#
	gentodist.barr.mr.right <- c()#
	gentodist.barr.mg.mean <- c()#
	gentodist.barr.mg.left <- c()#
	gentodist.barr.mg.right <- c()#
	gentodist.barr.mg.lag <- c()#
	gentobarr.dist.mr.mean <- c()#
	gentobarr.dist.mr.left <- c()#
	gentobarr.dist.mr.right <- c()#
	gentobarr.dist.mg.mean <- c()#
	gentobarr.dist.mg.left <- c()#
	gentobarr.dist.mg.right <- c()#
	gentobarr.dist.mg.lag <- c()#
	gentoland.barr.mr.mean <- c()#
	gentoland.barr.mr.left <- c()#
	gentoland.barr.mr.right <- c()#
	gentoland.barr.mg.mean <- c()#
	gentoland.barr.mg.left <- c()#
	gentoland.barr.mg.right <- c()#
	gentoland.barr.mg.lag <- c()#
	gentodist.land.mr.mean <- c()#
	gentodist.land.mr.left <- c()#
	gentodist.land.mr.right <- c()#
	gentodist.land.mg.mean <- c()#
	gentodist.land.mg.left <- c()#
	gentodist.land.mg.right <- c()#
	gentodist.land.mg.lag <- c()#
	gentobarr.land.mr.mean <- c()#
	gentobarr.land.mr.left <- c()#
	gentobarr.land.mr.right <- c()#
	gentobarr.land.mg.mean <- c()#
	gentobarr.land.mg.left <- c()#
	gentobarr.land.mg.right <- c()#
	gentobarr.land.mg.lag <- c()#
	gentoland.dist.mr.mean <- c()#
	gentoland.dist.mr.left <- c()#
	gentoland.dist.mr.right <- c()#
	gentoland.dist.mg.mean <- c()#
	gentoland.dist.mg.left <- c()#
	gentoland.dist.mg.right <- c()#
	gentoland.dist.mg.lag <- c()	#
	# Create mean and sd storage vectors and open file#
	# Simple genetic ~ distance#
	if (gentodist.ans=='Y')#
	{#
		# Storage vectors#
		gentodist.mr.mean <- c()#
		gentodist.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentodist.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentodist.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentodist.mr.mean <- append(gentodist.mr.mean,mean(meantemp))#
			gentodist.mr.sd <- append(gentodist.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentodist.mr.error <- qnorm(0.975)*gentodist.mr.sd/sqrt((mcrunno*batchno))#
		gentodist.mr.left <- gentodist.mr.mean - gentodist.mr.error#
		gentodist.mr.right <- gentodist.mr.mean + gentodist.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentodist.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentodist.ans == 'Y')#
		{#
			# Storage vectors#
			gentodist.mg.mean <- c()#
			gentodist.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentodist.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentodist.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentodist.mg.mean <- append(gentodist.mg.mean,mean(meantemp))#
				gentodist.mg.sd <- append(gentodist.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentodist.mg.error <- qnorm(0.975)*gentodist.mg.sd/sqrt((mcrunno*batchno))#
			gentodist.mg.left <- gentodist.mg.mean - gentodist.mg.error#
			gentodist.mg.right <- gentodist.mg.mean + gentodist.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentodist.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentodist.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Simple genetic ~ barrier#
	if (gentobarr.ans=='Y')#
	{#
		# Storage vectors#
		gentobarr.mr.mean <- c()#
		gentobarr.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentobarr.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentobarr.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentobarr.mr.mean <- append(gentobarr.mr.mean,mean(meantemp))#
			gentobarr.mr.sd <- append(gentobarr.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentobarr.mr.error <- qnorm(0.975)*gentobarr.mr.sd/sqrt((mcrunno*batchno))#
		gentobarr.mr.left <- gentobarr.mr.mean - gentobarr.mr.error#
		gentobarr.mr.right <- gentobarr.mr.mean + gentobarr.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentobarr.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentobarr.ans == 'Y')#
		{#
			# Storage vectors#
			gentobarr.mg.mean <- c()#
			gentobarr.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentobarr.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentobarr.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentobarr.mg.mean <- append(gentobarr.mg.mean,mean(meantemp))#
				gentobarr.mg.sd <- append(gentobarr.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentobarr.mg.error <- qnorm(0.975)*gentobarr.mg.sd/sqrt((mcrunno*batchno))#
			gentobarr.mg.left <- gentobarr.mg.mean - gentobarr.mg.error#
			gentobarr.mg.right <- gentobarr.mg.mean + gentobarr.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentobarr.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentobarr.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Simple genetic ~ landscape#
	if (gentoland.ans=='Y')#
	{#
		# Storage vectors#
		gentoland.mr.mean <- c()#
		gentoland.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentoland.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentoland.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentoland.mr.mean <- append(gentoland.mr.mean,mean(meantemp))#
			gentoland.mr.sd <- append(gentoland.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentoland.mr.error <- qnorm(0.975)*gentoland.mr.sd/sqrt((mcrunno*batchno))#
		gentoland.mr.left <- gentoland.mr.mean - gentoland.mr.error#
		gentoland.mr.right <- gentoland.mr.mean + gentoland.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentoland.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentoland.ans == 'Y')#
		{#
			# Storage vectors#
			gentoland.mg.mean <- c()#
			gentoland.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentoland.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentoland.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentoland.mg.mean <- append(gentoland.mg.mean,mean(meantemp))#
				gentoland.mg.sd <- append(gentoland.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentoland.mg.error <- qnorm(0.975)*gentoland.mg.sd/sqrt((mcrunno*batchno))#
			gentoland.mg.left <- gentoland.mg.mean - gentoland.mg.error#
			gentoland.mg.right <- gentoland.mg.mean + gentoland.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentoland.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentoland.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ distance|barrier#
	if (gentodist.barr.ans=='Y')#
	{#
		# Storage vectors#
		gentodist.barr.mr.mean <- c()#
		gentodist.barr.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentodist.barr.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentodist.barr.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentodist.barr.mr.mean <- append(gentodist.barr.mr.mean,mean(meantemp))#
			gentodist.barr.mr.sd <- append(gentodist.barr.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentodist.barr.mr.error <- qnorm(0.975)*gentodist.barr.mr.sd/sqrt((mcrunno*batchno))#
		gentodist.barr.mr.left <- gentodist.barr.mr.mean - gentodist.barr.mr.error#
		gentodist.barr.mr.right <- gentodist.barr.mr.mean + gentodist.barr.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentodist.barr.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.barr.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentodist.barr.ans == 'Y')#
		{#
			# Storage vectors#
			gentodist.barr.mg.mean <- c()#
			gentodist.barr.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentodist.barr.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentodist.barr.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentodist.barr.mg.mean <- append(gentodist.barr.mg.mean,mean(meantemp))#
				gentodist.barr.mg.sd <- append(gentodist.barr.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentodist.barr.mg.error <- qnorm(0.975)*gentodist.barr.mg.sd/sqrt((mcrunno*batchno))#
			gentodist.barr.mg.left <- gentodist.barr.mg.mean - gentodist.barr.mg.error#
			gentodist.barr.mg.right <- gentodist.barr.mg.mean + gentodist.barr.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentodist.barr.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.barr.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentodist.barr.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ distance|landscape#
	if (gentodist.land.ans=='Y')#
	{#
		# Storage vectors#
		gentodist.land.mr.mean <- c()#
		gentodist.land.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentodist.land.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentodist.land.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentodist.land.mr.mean <- append(gentodist.land.mr.mean,mean(meantemp))#
			gentodist.land.mr.sd <- append(gentodist.land.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentodist.land.mr.error <- qnorm(0.975)*gentodist.land.mr.sd/sqrt((mcrunno*batchno))#
		gentodist.land.mr.left <- gentodist.land.mr.mean - gentodist.land.mr.error#
		gentodist.land.mr.right <- gentodist.land.mr.mean + gentodist.land.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentodist.land.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentodist.land.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentodist.land.ans == 'Y')#
		{#
			# Storage vectors#
			gentodist.land.mg.mean <- c()#
			gentodist.land.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentodist.land.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentodist.land.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentodist.land.mg.mean <- append(gentodist.land.mg.mean,mean(meantemp))#
				gentodist.land.mg.sd <- append(gentodist.land.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentodist.land.mg.error <- qnorm(0.975)*gentodist.land.mg.sd/sqrt((mcrunno*batchno))#
			gentodist.land.mg.left <- gentodist.land.mg.mean - gentodist.land.mg.error#
			gentodist.land.mg.right <- gentodist.land.mg.mean + gentodist.land.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentodist.land.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentodist.land.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentodist.land.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ barrier|landscape#
	if (gentobarr.land.ans=='Y')#
	{#
		# Storage vectors#
		gentobarr.land.mr.mean <- c()#
		gentobarr.land.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentobarr.land.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentobarr.land.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentobarr.land.mr.mean <- append(gentobarr.land.mr.mean,mean(meantemp))#
			gentobarr.land.mr.sd <- append(gentobarr.land.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentobarr.land.mr.error <- qnorm(0.975)*gentobarr.land.mr.sd/sqrt((mcrunno*batchno))#
		gentobarr.land.mr.left <- gentobarr.land.mr.mean - gentobarr.land.mr.error#
		gentobarr.land.mr.right <- gentobarr.land.mr.mean + gentobarr.land.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentobarr.land.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.land.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentobarr.land.ans == 'Y')#
		{#
			# Storage vectors#
			gentobarr.land.mg.mean <- c()#
			gentobarr.land.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentobarr.land.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentobarr.land.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentobarr.land.mg.mean <- append(gentobarr.land.mg.mean,mean(meantemp))#
				gentobarr.land.mg.sd <- append(gentobarr.land.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentobarr.land.mg.error <- qnorm(0.975)*gentobarr.land.mg.sd/sqrt((mcrunno*batchno))#
			gentobarr.land.mg.left <- gentobarr.land.mg.mean - gentobarr.land.mg.error#
			gentobarr.land.mg.right <- gentobarr.land.mg.mean + gentobarr.land.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentobarr.land.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.land.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentobarr.land.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ barrier|distance#
	if (gentobarr.dist.ans=='Y')#
	{#
		# Storage vectors#
		gentobarr.dist.mr.mean <- c()#
		gentobarr.dist.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentobarr.dist.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentobarr.dist.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentobarr.dist.mr.mean <- append(gentobarr.dist.mr.mean,mean(meantemp))#
			gentobarr.dist.mr.sd <- append(gentobarr.dist.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentobarr.dist.mr.error <- qnorm(0.975)*gentobarr.dist.mr.sd/sqrt((mcrunno*batchno))#
		gentobarr.dist.mr.left <- gentobarr.dist.mr.mean - gentobarr.dist.mr.error#
		gentobarr.dist.mr.right <- gentobarr.dist.mr.mean + gentobarr.dist.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentobarr.dist.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentobarr.dist.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentobarr.dist.ans == 'Y')#
		{#
			# Storage vectors#
			gentobarr.dist.mg.mean <- c()#
			gentobarr.dist.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentobarr.dist.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentobarr.dist.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentobarr.dist.mg.mean <- append(gentobarr.dist.mg.mean,mean(meantemp))#
				gentobarr.dist.mg.sd <- append(gentobarr.dist.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentobarr.dist.mg.error <- qnorm(0.975)*gentobarr.dist.mg.sd/sqrt((mcrunno*batchno))#
			gentobarr.dist.mg.left <- gentobarr.dist.mg.mean - gentobarr.dist.mg.error#
			gentobarr.dist.mg.right <- gentobarr.dist.mg.mean + gentobarr.dist.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentobarr.dist.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentobarr.dist.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentobarr.dist.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ landscape|distance#
	if (gentoland.dist.ans=='Y')#
	{#
		# Storage vectors#
		gentoland.dist.mr.mean <- c()#
		gentoland.dist.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentoland.dist.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentoland.dist.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentoland.dist.mr.mean <- append(gentoland.dist.mr.mean,mean(meantemp))#
			gentoland.dist.mr.sd <- append(gentoland.dist.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentoland.dist.mr.error <- qnorm(0.975)*gentoland.dist.mr.sd/sqrt((mcrunno*batchno))#
		gentoland.dist.mr.left <- gentoland.dist.mr.mean - gentoland.dist.mr.error#
		gentoland.dist.mr.right <- gentoland.dist.mr.mean + gentoland.dist.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentoland.dist.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.dist.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentoland.dist.ans == 'Y')#
		{#
			# Storage vectors#
			gentoland.dist.mg.mean <- c()#
			gentoland.dist.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentoland.dist.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentoland.dist.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentoland.dist.mg.mean <- append(gentoland.dist.mg.mean,mean(meantemp))#
				gentoland.dist.mg.sd <- append(gentoland.dist.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentoland.dist.mg.error <- qnorm(0.975)*gentoland.dist.mg.sd/sqrt((mcrunno*batchno))#
			gentoland.dist.mg.left <- gentoland.dist.mg.mean - gentoland.dist.mg.error#
			gentoland.dist.mg.right <- gentoland.dist.mg.mean + gentoland.dist.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentoland.dist.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.dist.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentoland.dist.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
	# Partial genetic ~ landscape|barrier#
	if (gentoland.barr.ans=='Y')#
	{#
		# Storage vectors#
		gentoland.barr.mr.mean <- c()#
		gentoland.barr.mr.sd <- c()#
		# Read in#
		filename <- "MRMCgentoland.barr.csv"#
		mrmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
		# New filename to write to.#
		filename <- "MRMCgentoland.barr.analysis.csv"#
		# Loop through the length of the mantel r vectors#
		for (i in 1:((length(mrmcoutput)/4)-1))#
		{#
			# Create temp variable#
			meantemp <- c()#
			# Loop through the number of samples to average over and grab and append#
			for (j in 1:(mcrunno*batchno))#
			{#
				meantemp <- append(meantemp,mrmcoutput[j,(i+1)])#
			}#
			# Get the mean and sd#
			gentoland.barr.mr.mean <- append(gentoland.barr.mr.mean,mean(meantemp))#
			gentoland.barr.mr.sd <- append(gentoland.barr.mr.sd,sd(meantemp))#
		}#
		# Calculate error and left and right error bars#
		gentoland.barr.mr.error <- qnorm(0.975)*gentoland.barr.mr.sd/sqrt((mcrunno*batchno))#
		gentoland.barr.mr.left <- gentoland.barr.mr.mean - gentoland.barr.mr.error#
		gentoland.barr.mr.right <- gentoland.barr.mr.mean + gentoland.barr.mr.error#
		# Write information back to file#
		write.table(t(data.frame(gentoland.barr.mr.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		write.table(t(data.frame(gentoland.barr.mr.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
			row.names=TRUE,col.names=FALSE)#
		# Mantel correlogram averaging...#
		if (mgram.gentoland.barr.ans == 'Y')#
		{#
			# Storage vectors#
			gentoland.barr.mg.mean <- c()#
			gentoland.barr.mg.sd <- c()#
			# Read in#
			filename <- "MgramMCgentoland.barr.csv"#
			mgmcoutput <- read.csv(paste(gddir,filename,sep=""),sep=",",header=FALSE)#
			# New filename to write to.#
			filename <- "MgramMCgentoland.barr.analysis.csv"#
			# Loop through the length of the mgram vectors#
			for (i in 1:((length(mgmcoutput)/3)-1))#
			{#
				# Create temp variable#
				meantemp <- c()#
				# Loop through the number of samples to average over and grab and append#
				for (j in 1:(mcrunno*batchno))#
				{#
					meantemp <- append(meantemp,mgmcoutput[j,(i+1)])#
				}#
				# Get the mean and sd#
				gentoland.barr.mg.mean <- append(gentoland.barr.mg.mean,mean(meantemp))#
				gentoland.barr.mg.sd <- append(gentoland.barr.mg.sd,sd(meantemp))#
			}#
			# Calculate error and left and right error bars#
			gentoland.barr.mg.error <- qnorm(0.975)*gentoland.barr.mg.sd/sqrt((mcrunno*batchno))#
			gentoland.barr.mg.left <- gentoland.barr.mg.mean - gentoland.barr.mg.error#
			gentoland.barr.mg.right <- gentoland.barr.mg.mean + gentoland.barr.mg.error#
			# Write information back to file#
			write.table(t(data.frame(gentoland.barr.mg.mean)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.sd)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.error)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.left)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			write.table(t(data.frame(gentoland.barr.mg.right)),file=paste(gddir,filename,sep=""),append=TRUE,sep=",",eol="\n",#
				row.names=TRUE,col.names=FALSE)#
			# Store lag intervals for plotting#
			gentoland.barr.mg.lag <- t(data.frame(mgmcoutput[1,((length(mgmcoutput)/3)+2):(((length(mgmcoutput)/3)+2)+((length(mgmcoutput)/3)-2))]))#
		}#
	}#
#Return values#
list(gentodist.mr.mean=gentodist.mr.mean,#
	gentodist.mr.left=gentodist.mr.left,#
	gentodist.mr.right=gentodist.mr.right,#
	gentodist.mg.mean=gentodist.mg.mean,#
	gentodist.mg.left=gentodist.mg.left,#
	gentodist.mg.right=gentodist.mg.right,#
	gentodist.mg.lag=gentodist.mg.lag,#
	gentobarr.mr.mean=gentobarr.mr.mean,#
	gentobarr.mr.left=gentobarr.mr.left,#
	gentobarr.mr.right=gentobarr.mr.right,#
	gentobarr.mg.mean=gentobarr.mg.mean,#
	gentobarr.mg.left=gentobarr.mg.left,#
	gentobarr.mg.right=gentobarr.mg.right,#
	gentobarr.mg.lag=gentobarr.mg.lag,#
	gentoland.mr.mean=gentoland.mr.mean,#
	gentoland.mr.left=gentoland.mr.left,#
	gentoland.mr.right=gentoland.mr.right,#
	gentoland.mg.mean=gentoland.mg.mean,#
	gentoland.mg.left=gentoland.mg.left,#
	gentoland.mg.right=gentoland.mg.right,#
	gentoland.mg.lag=gentoland.mg.lag,#
	gentodist.barr.mr.mean=gentodist.barr.mr.mean,#
	gentodist.barr.mr.left=gentodist.barr.mr.left,#
	gentodist.barr.mr.right=gentodist.barr.mr.right,#
	gentodist.barr.mg.mean=gentodist.barr.mg.mean,#
	gentodist.barr.mg.left=gentodist.barr.mg.left,#
	gentodist.barr.mg.right=gentodist.barr.mg.right,#
	gentodist.barr.mg.lag=gentodist.barr.mg.lag,#
	gentobarr.dist.mr.mean=gentobarr.dist.mr.mean,#
	gentobarr.dist.mr.left=gentobarr.dist.mr.left,#
	gentobarr.dist.mr.right=gentobarr.dist.mr.right,#
	gentobarr.dist.mg.mean=gentobarr.dist.mg.mean,#
	gentobarr.dist.mg.left=gentobarr.dist.mg.left,#
	gentobarr.dist.mg.right=gentobarr.dist.mg.right,#
	gentobarr.dist.mg.lag=gentobarr.dist.mg.lag,#
	gentoland.barr.mr.mean=gentoland.barr.mr.mean,#
	gentoland.barr.mr.left=gentoland.barr.mr.left,#
	gentoland.barr.mr.right=gentoland.barr.mr.right,#
	gentoland.barr.mg.mean=gentoland.barr.mg.mean,#
	gentoland.barr.mg.left=gentoland.barr.mg.left,#
	gentoland.barr.mg.right=gentoland.barr.mg.right,#
	gentoland.barr.mg.lag=gentoland.barr.mg.lag,#
	gentodist.land.mr.mean=gentodist.land.mr.mean,#
	gentodist.land.mr.left=gentodist.land.mr.left,#
	gentodist.land.mr.right=gentodist.land.mr.right,#
	gentodist.land.mg.mean=gentodist.land.mg.mean,#
	gentodist.land.mg.left=gentodist.land.mg.left,#
	gentodist.land.mg.right=gentodist.land.mg.right,#
	gentodist.land.mg.lag=gentodist.land.mg.lag,#
	gentobarr.land.mr.mean=gentobarr.land.mr.mean,#
	gentobarr.land.mr.left=gentobarr.land.mr.left,#
	gentobarr.land.mr.right=gentobarr.land.mr.right,#
	gentobarr.land.mg.mean=gentobarr.land.mg.mean,#
	gentobarr.land.mg.left=gentobarr.land.mg.left,#
	gentobarr.land.mg.right=gentobarr.land.mg.right,#
	gentobarr.land.mg.lag=gentobarr.land.mg.lag,#
	gentoland.dist.mr.mean=gentoland.dist.mr.mean,#
	gentoland.dist.mr.left=gentoland.dist.mr.left,#
	gentoland.dist.mr.right=gentoland.dist.mr.right,#
	gentoland.dist.mg.mean=gentoland.dist.mg.mean,#
	gentoland.dist.mg.left=gentoland.dist.mg.left,#
	gentoland.dist.mg.right=gentoland.dist.mg.right,#
	gentoland.dist.mg.lag=gentoland.dist.mg.lag)	#
}
Erin L. Landguth#
## MRMCRun.R											#
##   Project Description: an example script to run  the function mantel.mc#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs...#
##	2. MRMCFun.R must be loaded into workspace before this script is ran. 								#
## Project Steps:										#
##	1. User input function parameters#
##	2. mantel.mc function run call#
##	3. mantel.mc.analysis function run call#
##	4. Some plotting commands for mantel.mc.analysis returned values	#
## Project Date: December 10, 2008								#
############################################################################
####################
## Load Library	#
####################
library(spatial)#
library(ecodist)#
################################
## 1. Function parameter inputs	#
################################
batchstring <- ''#
# Specify the number of batch runs used#
batchno <- 1#
# Specify the number of Monte Carlo runs used#
mcrunno <- 5#
# The total individuals in each file#
N <- 1000#
# Total runtime length#
looptime <- 1#
# Uncomment one of these styles for nthfile analysis#
#nthfile <- 0	# The incremental nthfile, e.g. 0,5,10,15...#
nthfile <- c(0,5,20,50,100)#
#nthfile <- seq(0,looptime-1,1)#
# Genetic distance file location and names and number of#
gddir <- "~/CDPOP_v1.2.08_20120520/MortData/1345576046output_test/"#
gdfilename <- 'Gdmatrix'				 				#
# Barrier distance file location and names and answer if you want to test barrier model#
barrdir <- "~/CDPOP_v1.2.08_20120520/MortData/"			#
barrfilename <- c("panbar01.csv")	#
barrans <- 'Y'				#
# Euclidean distance file location and names and answer if you want to test distanc model#
distdir <- "~/CDPOP_v1.2.08_20120520/MortData/"		#
distfilename <- c("disbar01.csv")#
distans <- 'Y'								#
# Landscape distance file location and names and answer if you want to test landscape model#
landdir <- "~/CDPOP_v1.2.08_20120520/MortData/"	#
landfilename <- c(".csv")		#
landans <- 'N'					#
# Now specify the sample style to use: #
#	known = a known set of indeces to be read from a file#
#	random = a random n draw from the total#
#	all = run analysis on all points#
samplestyle <- 'all'#
# If samplestyle = 'random'#
sampleno <- 200#
# Else if samplestyle = 'known'#
sampledir <- "" #
# Here specify Mantel Test run information 9 of them:#
#	Y or N to the specific simple and partial Mantel Tests#
#	Define number of permutations for significance test#
gentodist.ans <- 'Y'			# Simple genetic ~ distancee#
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier#
gentoland.ans <- 'N'			# Simple genetic ~ landscape#
gentodist.barr.ans <- 'Y'		# Partial genetic ~ distance|barrier#
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape#
gentobarr.dist.ans <- 'Y'		# Partial genetic ~ barrier|distance#
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape#
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance#
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier#
mperms <- 199				# Mantel permutations#
# Here specifiy Mantel Correlogram to run#
#	Y or N to the specific Mantel correlogram#
#	Define year to run test at#
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance#
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier#
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape#
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier#
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape#
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance#
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape#
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance#
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier#
mgramruntime <- 100#
####################
## Function code#
####################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)#
results <- mantel.mc.analysis(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)#
####################################################
## Plot returned information from mantel.mc.anlysis#
####################################################
# If nthfile has a length of 1, then create a vector#
if (length(nthfile) == 1)#
{#
	nthfile <- seq(0,looptime,as.integer(nthfile))	#
}#
# Simple Mantel genetic~distance#
if (gentodist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.mr.left,lty="dashed")#
	lines(time,results$gentodist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier#
if (gentobarr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.mr.left,lty="dashed")#
	lines(time,results$gentobarr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape#
if (gentoland.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.mr.left,lty="dashed")#
	lines(time,results$gentoland.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|barrier#
if (gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.barr.mr.left,lty="dashed")#
	lines(time,results$gentodist.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|landscape#
if (gentodist.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.land.mr.left,lty="dashed")#
	lines(time,results$gentodist.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|distance#
if (gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.dist.mr.left,lty="dashed")#
	lines(time,results$gentobarr.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|landscape#
if (gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.land.mr.left,lty="dashed")#
	lines(time,results$gentobarr.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|barrier#
if (gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.barr.mr.left,lty="dashed")#
	lines(time,results$gentoland.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|distance#
if (gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.dist.mr.left,lty="dashed")#
	lines(time,results$gentoland.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mgram genetic~distance#
if (mgram.gentodist.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentodist.mg.lag,results$gentodist.mg.mean,type="b",ylab="Mantel r",xlab="Distance",las=1)#
	lines(results$gentodist.mg.lag,results$gentodist.mg.left,lty="dashed")#
	lines(results$gentodist.mg.lag,results$gentodist.mg.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
}#
# Simple Mgram genetic~barrier#
if (mgram.gentobarr.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentobarr.mg.lag,results$gentobarr.mg.mean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.left,lty="dashed")#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.right,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier)")#
}#
# Simple Mgram genetic~landscape#
if (mgram.gentoland.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.mg.lag#
	mgmean <- results$gentoland.mg.mean#
	mgright <- results$gentoland.mg.right#
	mgleft <- results$gentoland.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape)")#
}#
# Simple Mgram genetic~distance|barrier#
if (mgram.gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.barr.mg.lag#
	mgmean <- results$gentodist.barr.mg.mean#
	mgright <- results$gentodist.barr.mg.right#
	mgleft <- results$gentodist.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|barrier)")#
}#
# Simple Mgram genetic~distance|landscape#
if (mgram.gentodist.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.land.mg.lag#
	mgmean <- results$gentodist.land.mg.mean#
	mgright <- results$gentodist.land.mg.right#
	mgleft <- results$gentodist.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|landscape)")#
}#
# Simple Mgram genetic~barrier|distance#
if (mgram.gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.dist.mg.lag#
	mgmean <- results$gentobarr.dist.mg.mean#
	mgright <- results$gentobarr.dist.mg.right#
	mgleft <- results$gentobarr.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|distance)")#
}#
# Simple Mgram genetic~barrier|landscape#
if (mgram.gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.land.mg.lag#
	mgmean <- results$gentobarr.land.mg.mean#
	mgright <- results$gentobarr.land.mg.right#
	mgleft <- results$gentobarr.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|landscape)")#
}#
# Simple Mgram genetic~landscape|distance#
if (mgram.gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.dist.mg.lag#
	mgmean <- results$gentoland.dist.mg.mean#
	mgright <- results$gentoland.dist.mg.right#
	mgleft <- results$gentoland.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|distance)")#
}#
# Simple Mgram genetic~landscape|barrier#
if (mgram.gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.barr.mg.lag#
	mgmean <- results$gentoland.barr.mg.mean#
	mgright <- results$gentoland.barr.mg.right#
	mgleft <- results$gentoland.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|barrier)")#
}
Erin L. Landguth#
## MRMCRun.R											#
##   Project Description: an example script to run  the function mantel.mc#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs...#
##	2. MRMCFun.R must be loaded into workspace before this script is ran. 								#
## Project Steps:										#
##	1. User input function parameters#
##	2. mantel.mc function run call#
##	3. mantel.mc.analysis function run call#
##	4. Some plotting commands for mantel.mc.analysis returned values	#
## Project Date: December 10, 2008								#
############################################################################
####################
## Load Library	#
####################
library(spatial)#
library(ecodist)#
################################
## 1. Function parameter inputs	#
################################
batchstring <- ''#
# Specify the number of batch runs used#
batchno <- 1#
# Specify the number of Monte Carlo runs used#
mcrunno <- 1#
# The total individuals in each file#
N <- 1000#
# Total runtime length#
looptime <- 1#
# Uncomment one of these styles for nthfile analysis#
#nthfile <- 0	# The incremental nthfile, e.g. 0,5,10,15...#
nthfile <- c(0,5,20,50,100)#
#nthfile <- seq(0,looptime-1,1)#
# Genetic distance file location and names and number of#
gddir <- "~/CDPOP_v1.2.08_20120520/MortData/1345576046output_test/"#
gdfilename <- 'Gdmatrix'				 				#
# Barrier distance file location and names and answer if you want to test barrier model#
barrdir <- "~/CDPOP_v1.2.08_20120520/MortData/"			#
barrfilename <- c("panbar01.csv")	#
barrans <- 'Y'				#
# Euclidean distance file location and names and answer if you want to test distanc model#
distdir <- "~/CDPOP_v1.2.08_20120520/MortData/"		#
distfilename <- c("disbar01.csv")#
distans <- 'Y'								#
# Landscape distance file location and names and answer if you want to test landscape model#
landdir <- "~/CDPOP_v1.2.08_20120520/MortData/"	#
landfilename <- c(".csv")		#
landans <- 'N'					#
# Now specify the sample style to use: #
#	known = a known set of indeces to be read from a file#
#	random = a random n draw from the total#
#	all = run analysis on all points#
samplestyle <- 'all'#
# If samplestyle = 'random'#
sampleno <- 200#
# Else if samplestyle = 'known'#
sampledir <- "" #
# Here specify Mantel Test run information 9 of them:#
#	Y or N to the specific simple and partial Mantel Tests#
#	Define number of permutations for significance test#
gentodist.ans <- 'Y'			# Simple genetic ~ distancee#
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier#
gentoland.ans <- 'N'			# Simple genetic ~ landscape#
gentodist.barr.ans <- 'Y'		# Partial genetic ~ distance|barrier#
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape#
gentobarr.dist.ans <- 'Y'		# Partial genetic ~ barrier|distance#
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape#
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance#
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier#
mperms <- 199				# Mantel permutations#
# Here specifiy Mantel Correlogram to run#
#	Y or N to the specific Mantel correlogram#
#	Define year to run test at#
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance#
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier#
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape#
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier#
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape#
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance#
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape#
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance#
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier#
mgramruntime <- 100#
####################
## Function code#
####################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)
Erin L. Landguth#
## MRMCRun.R											#
##   Project Description: an example script to run  the function mantel.mc#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs...#
##	2. MRMCFun.R must be loaded into workspace before this script is ran. 								#
## Project Steps:										#
##	1. User input function parameters#
##	2. mantel.mc function run call#
##	3. mantel.mc.analysis function run call#
##	4. Some plotting commands for mantel.mc.analysis returned values	#
## Project Date: December 10, 2008								#
############################################################################
####################
## Load Library	#
####################
library(spatial)#
library(ecodist)#
################################
## 1. Function parameter inputs	#
################################
batchstring <- ''#
# Specify the number of batch runs used#
batchno <- 1#
# Specify the number of Monte Carlo runs used#
mcrunno <- 1#
# The total individuals in each file#
N <- 1000#
# Total runtime length#
looptime <- 1#
# Uncomment one of these styles for nthfile analysis#
nthfile <- 0	# The incremental nthfile, e.g. 0,5,10,15...#
# nthfile <- c(0,5,20,50,100)#
#nthfile <- seq(0,looptime-1,1)#
# Genetic distance file location and names and number of#
gddir <- "~/CDPOP_v1.2.08_20120520/MortData/1345576046output_test/"#
gdfilename <- 'Gdmatrix'				 				#
# Barrier distance file location and names and answer if you want to test barrier model#
barrdir <- "~/CDPOP_v1.2.08_20120520/MortData/"			#
barrfilename <- c("panbar01.csv")	#
barrans <- 'Y'				#
# Euclidean distance file location and names and answer if you want to test distance model#
distdir <- "~/CDPOP_v1.2.08_20120520/MortData/"		#
distfilename <- c("disbar01.csv")#
distans <- 'Y'								#
# Landscape distance file location and names and answer if you want to test landscape model#
landdir <- "~/CDPOP_v1.2.08_20120520/MortData/"	#
landfilename <- c("r5_1b1.csv")		#
landans <- 'N'					#
# Now specify the sample style to use: #
#	known = a known set of indeces to be read from a file#
#	random = a random n draw from the total#
#	all = run analysis on all points#
samplestyle <- 'all'#
# If samplestyle = 'random'#
sampleno <- 200#
# Else if samplestyle = 'known'#
sampledir <- "" #
# Here specify Mantel Test run information 9 of them:#
#	Y or N to the specific simple and partial Mantel Tests#
#	Define number of permutations for significance test#
gentodist.ans <- 'Y'			# Simple genetic ~ distancee#
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier#
gentoland.ans <- 'N'			# Simple genetic ~ landscape#
gentodist.barr.ans <- 'Y'		# Partial genetic ~ distance|barrier#
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape#
gentobarr.dist.ans <- 'Y'		# Partial genetic ~ barrier|distance#
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape#
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance#
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier#
mperms <- 199				# Mantel permutations#
# Here specifiy Mantel Correlogram to run#
#	Y or N to the specific Mantel correlogram#
#	Define year to run test at#
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance#
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier#
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape#
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier#
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape#
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance#
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape#
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance#
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier#
mgramruntime <- 100#
####################
## Function code#
####################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)
results <- mantel.mc.analysis(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)#
####################################################
## Plot returned information from mantel.mc.anlysis#
####################################################
# If nthfile has a length of 1, then create a vector#
if (length(nthfile) == 1)#
{#
	nthfile <- seq(0,looptime,as.integer(nthfile))	#
}#
# Simple Mantel genetic~distance#
if (gentodist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.mr.left,lty="dashed")#
	lines(time,results$gentodist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier#
if (gentobarr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.mr.left,lty="dashed")#
	lines(time,results$gentobarr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape#
if (gentoland.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.mr.left,lty="dashed")#
	lines(time,results$gentoland.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|barrier#
if (gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.barr.mr.left,lty="dashed")#
	lines(time,results$gentodist.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|landscape#
if (gentodist.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.land.mr.left,lty="dashed")#
	lines(time,results$gentodist.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|distance#
if (gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.dist.mr.left,lty="dashed")#
	lines(time,results$gentobarr.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|landscape#
if (gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.land.mr.left,lty="dashed")#
	lines(time,results$gentobarr.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|barrier#
if (gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.barr.mr.left,lty="dashed")#
	lines(time,results$gentoland.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|distance#
if (gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.dist.mr.left,lty="dashed")#
	lines(time,results$gentoland.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mgram genetic~distance#
if (mgram.gentodist.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentodist.mg.lag,results$gentodist.mg.mean,type="b",ylab="Mantel r",xlab="Distance",las=1)#
	lines(results$gentodist.mg.lag,results$gentodist.mg.left,lty="dashed")#
	lines(results$gentodist.mg.lag,results$gentodist.mg.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
}#
# Simple Mgram genetic~barrier#
if (mgram.gentobarr.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentobarr.mg.lag,results$gentobarr.mg.mean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.left,lty="dashed")#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.right,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier)")#
}#
# Simple Mgram genetic~landscape#
if (mgram.gentoland.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.mg.lag#
	mgmean <- results$gentoland.mg.mean#
	mgright <- results$gentoland.mg.right#
	mgleft <- results$gentoland.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape)")#
}#
# Simple Mgram genetic~distance|barrier#
if (mgram.gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.barr.mg.lag#
	mgmean <- results$gentodist.barr.mg.mean#
	mgright <- results$gentodist.barr.mg.right#
	mgleft <- results$gentodist.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|barrier)")#
}#
# Simple Mgram genetic~distance|landscape#
if (mgram.gentodist.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.land.mg.lag#
	mgmean <- results$gentodist.land.mg.mean#
	mgright <- results$gentodist.land.mg.right#
	mgleft <- results$gentodist.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|landscape)")#
}#
# Simple Mgram genetic~barrier|distance#
if (mgram.gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.dist.mg.lag#
	mgmean <- results$gentobarr.dist.mg.mean#
	mgright <- results$gentobarr.dist.mg.right#
	mgleft <- results$gentobarr.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|distance)")#
}#
# Simple Mgram genetic~barrier|landscape#
if (mgram.gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.land.mg.lag#
	mgmean <- results$gentobarr.land.mg.mean#
	mgright <- results$gentobarr.land.mg.right#
	mgleft <- results$gentobarr.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|landscape)")#
}#
# Simple Mgram genetic~landscape|distance#
if (mgram.gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.dist.mg.lag#
	mgmean <- results$gentoland.dist.mg.mean#
	mgright <- results$gentoland.dist.mg.right#
	mgleft <- results$gentoland.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|distance)")#
}#
# Simple Mgram genetic~landscape|barrier#
if (mgram.gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.barr.mg.lag#
	mgmean <- results$gentoland.barr.mg.mean#
	mgright <- results$gentoland.barr.mg.right#
	mgleft <- results$gentoland.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|barrier)")#
}
Erin L. Landguth#
## MRMCRun.R											#
##   Project Description: an example script to run  the function mantel.mc#
## Libraries Needed:#
##	1. Spatial#
##	2. Ecodist#
## Project Input:#
##	1. Function parameter inputs...#
##	2. MRMCFun.R must be loaded into workspace before this script is ran. 								#
## Project Steps:										#
##	1. User input function parameters#
##	2. mantel.mc function run call#
##	3. mantel.mc.analysis function run call#
##	4. Some plotting commands for mantel.mc.analysis returned values	#
## Project Date: December 10, 2008								#
############################################################################
####################
## Load Library	#
####################
library(spatial)#
library(ecodist)#
################################
## 1. Function parameter inputs	#
################################
batchstring <- ''#
# Specify the number of batch runs used#
batchno <- 1#
# Specify the number of Monte Carlo runs used#
mcrunno <- 1#
# The total individuals in each file#
N <- 1000#
# Total runtime length#
looptime <- 1#
# Uncomment one of these styles for nthfile analysis#
nthfile <- 5	# The incremental nthfile, e.g. 0,5,10,15...#
# nthfile <- c(0,5,20,50,100)#
#nthfile <- seq(0,looptime-1,1)#
# Genetic distance file location and names and number of#
gddir <- "~/CDPOP_v1.2.08_20120520/MortData/1345576046output_test/"#
gdfilename <- 'Gdmatrix'				 				#
# Barrier distance file location and names and answer if you want to test barrier model#
barrdir <- "~/CDPOP_v1.2.08_20120520/MortData/"			#
barrfilename <- c("panbar01.csv")	#
barrans <- 'Y'				#
# Euclidean distance file location and names and answer if you want to test distance model#
distdir <- "~/CDPOP_v1.2.08_20120520/MortData/"		#
distfilename <- c("disbar01.csv")#
distans <- 'Y'								#
# Landscape distance file location and names and answer if you want to test landscape model#
landdir <- "~/CDPOP_v1.2.08_20120520/MortData/"	#
landfilename <- c("r5_1b1.csv")		#
landans <- 'N'					#
# Now specify the sample style to use: #
#	known = a known set of indeces to be read from a file#
#	random = a random n draw from the total#
#	all = run analysis on all points#
samplestyle <- 'all'#
# If samplestyle = 'random'#
sampleno <- 200#
# Else if samplestyle = 'known'#
sampledir <- "" #
# Here specify Mantel Test run information 9 of them:#
#	Y or N to the specific simple and partial Mantel Tests#
#	Define number of permutations for significance test#
gentodist.ans <- 'Y'			# Simple genetic ~ distancee#
gentobarr.ans <- 'Y'			# Simple genetic ~ barrier#
gentoland.ans <- 'N'			# Simple genetic ~ landscape#
gentodist.barr.ans <- 'Y'		# Partial genetic ~ distance|barrier#
gentodist.land.ans <- 'N'		# Partial genetic ~ distance|landscape#
gentobarr.dist.ans <- 'Y'		# Partial genetic ~ barrier|distance#
gentobarr.land.ans <- 'N'		# Partial genetic ~ barrier|landscape#
gentoland.dist.ans <- 'N'		# Partial genetic ~ landscape|distance#
gentoland.barr.ans <- 'N'		# Partial genetic ~ landscape|barrier#
mperms <- 199				# Mantel permutations#
# Here specifiy Mantel Correlogram to run#
#	Y or N to the specific Mantel correlogram#
#	Define year to run test at#
mgram.gentodist.ans <- 'N'		# Simple genetic ~ distance#
mgram.gentobarr.ans <- 'N'		# Simple genetic ~ barrier#
mgram.gentoland.ans <- 'N'		# Simple genetic ~ landscape#
mgram.gentodist.barr.ans <- 'N'	# Partial genetic ~ distance|barrier#
mgram.gentodist.land.ans <- 'N'	# Partial genetic ~ distance|landscape#
mgram.gentobarr.dist.ans <- 'N'	# Partial genetic ~ barrier|distance#
mgram.gentobarr.land.ans <- 'N'	# Partial genetic ~ barrier|landscape#
mgram.gentoland.dist.ans <- 'N'	# Partial genetic ~ landscape|distance#
mgram.gentoland.barr.ans <- 'N'	# Partial genetic ~ landscape|barrier#
mgramruntime <- 100#
####################
## Function code#
####################
mantel.mc(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime,batchstring)#
results <- mantel.mc.analysis(batchno,mcrunno,N,nthfile,gddir,gdfilename,barrdir,barrfilename,barrans,#
	distdir,distfilename,distans,landdir,landfilename,landans,samplestyle,sampleno,sampledir,gentodist.ans,#
	gentobarr.ans,gentoland.ans,gentodist.barr.ans,gentodist.land.ans,gentobarr.dist.ans,gentobarr.land.ans,#
	gentoland.dist.ans,gentoland.barr.ans,mperms,mgram.gentodist.ans,mgram.gentobarr.ans,mgram.gentoland.ans,#
	mgram.gentodist.barr.ans,mgram.gentodist.land.ans,mgram.gentobarr.dist.ans,mgram.gentobarr.land.ans,#
	mgram.gentoland.dist.ans,mgram.gentoland.barr.ans,mgramruntime)#
####################################################
## Plot returned information from mantel.mc.anlysis#
####################################################
# If nthfile has a length of 1, then create a vector#
if (length(nthfile) == 1)#
{#
	nthfile <- seq(0,looptime,as.integer(nthfile))	#
}#
# Simple Mantel genetic~distance#
if (gentodist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.mr.left,lty="dashed")#
	lines(time,results$gentodist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier#
if (gentobarr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.mr.left,lty="dashed")#
	lines(time,results$gentobarr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape#
if (gentoland.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.mr.left,lty="dashed")#
	lines(time,results$gentoland.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|barrier#
if (gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.barr.mr.left,lty="dashed")#
	lines(time,results$gentodist.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~distance|landscape#
if (gentodist.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentodist.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentodist.land.mr.left,lty="dashed")#
	lines(time,results$gentodist.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~distance|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|distance#
if (gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.dist.mr.left,lty="dashed")#
	lines(time,results$gentobarr.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~barrier|landscape#
if (gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentobarr.land.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentobarr.land.mr.left,lty="dashed")#
	lines(time,results$gentobarr.land.mr.right,lty="dashed")#
	title("Mantel Test (genetic~barrier|landscape)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|barrier#
if (gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.barr.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.barr.mr.left,lty="dashed")#
	lines(time,results$gentoland.barr.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|barrier)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mantel genetic~landscape|distance#
if (gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	time <- seq(1,length(nthfile),1)#
	plot(time,results$gentoland.dist.mr.mean,type="b",ylab="Mantel r",xlab="Time",xaxt="n",ylim=c(-0.01,1.0),las=1)#
	lines(time,results$gentoland.dist.mr.left,lty="dashed")#
	lines(time,results$gentoland.dist.mr.right,lty="dashed")#
	title("Mantel Test (genetic~landscape|distance)")#
	axis(1,1:(length(nthfile)),nthfile)#
}#
# Simple Mgram genetic~distance#
if (mgram.gentodist.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentodist.mg.lag,results$gentodist.mg.mean,type="b",ylab="Mantel r",xlab="Distance",las=1)#
	lines(results$gentodist.mg.lag,results$gentodist.mg.left,lty="dashed")#
	lines(results$gentodist.mg.lag,results$gentodist.mg.right,lty="dashed")#
	title("Mantel Test (genetic~distance)")#
}#
# Simple Mgram genetic~barrier#
if (mgram.gentobarr.ans=='Y')#
{	#
	dev.new()#
	plot(results$gentobarr.mg.lag,results$gentobarr.mg.mean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.left,lty="dashed")#
	lines(results$gentobarr.mg.lag,results$gentobarr.mg.right,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier)")#
}#
# Simple Mgram genetic~landscape#
if (mgram.gentoland.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.mg.lag#
	mgmean <- results$gentoland.mg.mean#
	mgright <- results$gentoland.mg.right#
	mgleft <- results$gentoland.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape)")#
}#
# Simple Mgram genetic~distance|barrier#
if (mgram.gentodist.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.barr.mg.lag#
	mgmean <- results$gentodist.barr.mg.mean#
	mgright <- results$gentodist.barr.mg.right#
	mgleft <- results$gentodist.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|barrier)")#
}#
# Simple Mgram genetic~distance|landscape#
if (mgram.gentodist.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentodist.land.mg.lag#
	mgmean <- results$gentodist.land.mg.mean#
	mgright <- results$gentodist.land.mg.right#
	mgleft <- results$gentodist.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~distance|landscape)")#
}#
# Simple Mgram genetic~barrier|distance#
if (mgram.gentobarr.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.dist.mg.lag#
	mgmean <- results$gentobarr.dist.mg.mean#
	mgright <- results$gentobarr.dist.mg.right#
	mgleft <- results$gentobarr.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|distance)")#
}#
# Simple Mgram genetic~barrier|landscape#
if (mgram.gentobarr.land.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentobarr.land.mg.lag#
	mgmean <- results$gentobarr.land.mg.mean#
	mgright <- results$gentobarr.land.mg.right#
	mgleft <- results$gentobarr.land.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~barrier|landscape)")#
}#
# Simple Mgram genetic~landscape|distance#
if (mgram.gentoland.dist.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.dist.mg.lag#
	mgmean <- results$gentoland.dist.mg.mean#
	mgright <- results$gentoland.dist.mg.right#
	mgleft <- results$gentoland.dist.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|distance)")#
}#
# Simple Mgram genetic~landscape|barrier#
if (mgram.gentoland.barr.ans=='Y')#
{	#
	dev.new()#
	lag <- results$gentoland.barr.mg.lag#
	mgmean <- results$gentoland.barr.mg.mean#
	mgright <- results$gentoland.barr.mg.right#
	mgleft <- results$gentoland.barr.mg.left#
	plot(lag,mgmean,type="b",ylab="Mantel r",xlab="Distance",xaxt="n",las=1)#
	lines(lag,mgleft,lty="dashed")#
	lines(lag,mgright,lty="dashed")#
	title("Mantel Correlogram (genetic~landscape|barrier)")#
}
source("DGS_AIC_Outlier_Jackknife_Functions_v3.r")     # Make sure this is the latest version!#
                                                         # File needs to be in same workspace (folder)#
  require(MASS)#
  require(MuMIn)#
###############################################################
# 1. Single run: Outlier detection with Cook's distances Di  ##
###############################################################
# Generate data#
  n = 30#
  data<-AIC.sim(N=n, multicol=0.6, weights=c(0.35, 0.25, 0.15, 0,0,0.25))#
# Node-based analysis without outlier #
  data1 <- data#
  mod1 <- lm(Y ~ ., data=data1)#
  Di1 <- cooks.distance(mod1)           # Vector of Cook's distances, default method#
  Di1.jk <- get.Di.jk(data1)             # Jackknifed Cook's distances, own code#
# Distance-based analysis without outlier #
  dataD1 <- get.dmat(data1)               # Extract matrix of distance vectors#
  mod1D <- lm(Y.dist ~ ., data=dataD1)#
  Di.dist1 <- cooks.distance(mod1D)     # Vector of Cook's distances, default method: wrong! #
  Di.d1 <-get.Did.jk(data1)              # Jackknifed Cook's distances, corrected, own code#
# Introduce outlier in Y into data set (Below outlier added to 1st sample Y variable)#
# ------------------------------------ #
  data2 <- data#
  data2[1,1] <- 10 * sign(data2[1,1])      # value of 10 is an extreme outlier along Y#
                                         # Change this procedure as you wish#
  mod2 <- lm(Y ~ ., data=data2)#
  Di2 <- cooks.distance(mod2)           # Vector of Cook's distances, default method#
  Di2.jk <- get.Di.jk(data2)             # Jackknifed Cook's distances, own code#
  dataD2 <- get.dmat(data2)               # Extract matrix of distance vectors#
  mod2D <- lm(Y.dist ~ ., data=dataD2)#
  Di.dist2 <- cooks.distance(mod2D)     # Vector of Cook's distances, default method: wrong! #
  Di.d2 <-get.Did.jk(data2)              # Jackknifed Cook's distances, corrected, own code   #
# Introduce outlier in X and Y into data set (Below outlier added to 1st sample Y variable)#
# --------------------------------------------  #
  data3 <- data2#
  data3[1,-1] <- data3[1,-1] + 1 * sign(data3[1,-1])    # make first value outlier along x as well#
  mod3 <- lm(Y ~ ., data=data3)#
  Di3 <- cooks.distance(mod3)           # Vector of Cook's distances, default method#
  Di3.jk <- get.Di.jk(data3)             # Jackknifed Cook's distances, own code#
  dataD3 <- get.dmat(data3)               # Extract matrix of distance vectors#
  mod3D <- lm(Y.dist ~ ., data=dataD3)#
  Di.dist3 <- cooks.distance(mod3D)     # Vector of Cook's distances, default method: wrong! #
  Di.d3 <-get.Did.jk(data3)              # Jackknifed Cook's distances, corrected, own code   #
# Table with Di values for the first observation (Results will vary much between runs!) #
# ----------------------------------------------#
# Note: Table shows only Di values for the first observation, which is the one manipulated as outlier#
  Di.Table <- matrix(NA, 4,3, dimnames=list(c("Di_node_default","Di_node_jk","Di_dist_default","Di_dist_jk"),#
    c("No outlier","Outlier in Y","Outlier in X and Y")))#
  Di.Table[] <- c(Di1[1], Di1.jk[1], Di.dist1[1], Di.d1[1], Di2[1], Di2.jk[1], Di.dist2[1], Di.d2[1], Di3[1], Di3.jk[1], Di.dist3[1], Di.d3[1])  #
  round(Di.Table,2)#
  # Main results:#
  # - When no outlier was simulated, none of the methods results in Di > 1, no spurious outlier detection#
  # - Outliers in Y have less influence (smaller Di) than outliers in both X and Y#
  # - Outlier detection (Di > 1) varies between simulation runs#
  # - In most cases, jackknifed Di for distance data are smaller than Di for node data#
###################################################################
# 2. Single run: Jackknife estimates of regression coefficients  ##
###################################################################
# Node-based analysis#
  Reg.coef.no <- get.beta.jk(data1)         # Coefficient estimates without outlier (data)#
  Reg.coef.Y <-get.beta.jk(data2)          # Coefficient estimates with outlier along Y (data2)#
  Reg.coef.XY <-get.beta.jk(data3)         # Coefficient estimates with outlier along X and Y (data3)#
  round(Reg.coef.no,3)#
  round(Reg.coef.Y,3)#
  round(Reg.coef.XY,3)#
  # Coef.lm: Regression coefficients from default method lm()#
  # SE.lm: SE of regression coefficients from default method lm()#
  # Coef.jk: Jackknife estimates of regression coefficients, own code#
  # SE.jk: Jackknife SE of regression coefficients, own code#
  # Bias.jk: Jackknife bias estimate (Coef.jk - Coef.lm)#
# Link-based analysis#
  Reg.coef.no.dist <- get.betad.jk(data1)         # Coefficient estimates without outlier (data)#
  Reg.coef.Y.dist <-get.betad.jk(data2)          # Coefficient estimates with outlier along Y (data2)#
  Reg.coef.XY.dist <-get.betad.jk(data3)         # Coefficient estimates with outlier along X and Y (data3)#
  round(Reg.coef.no.dist,3)#
  round(Reg.coef.Y.dist,3)#
  round(Reg.coef.XY.dist,3)#
# Main results:#
# - Regression coefficients are in the same range for node- and link-based analysis#
# - Jackknife SE are in the same range for node- and link-based analysis#
# - Default SE when using distance matrices are far too small, as expected#
# - Possibly, biases are larger in presence of outliers when doing link-based analysis? #
####################################################################
# 3. Calculation of AIC for lm() and jackknife regression results ##
####################################################################
# Node-based analysis, coefficients from lm()#
# -------------------------------------------#
  # Default AIC calculation#
  lm.1 <- c(AIC(mod1), AICc(mod1), BIC(mod1))              # Without outlier#
  lm.2 <- c(AIC(mod2), AICc(mod2), BIC(mod2))              # With outlier along Y#
  lm.3 <- c(AIC(mod3), AICc(mod3), BIC(mod3))              # With outlier along X and Y#
  tab.lm <- rbind(lm.1, lm.2, lm.3)#
  dimnames(tab.lm)[[2]] <- c("AIC","AICc","BIC")#
  tab.lm#
  # Own code according to first paper: just checking!#
  AIC.calc.1 <- nrow(data1) + nrow(data1)*log(2*pi) + nrow(data1)*log(sum(mod1$residuals^2)/nrow(data1)) + 2*(mod1$rank+1)#
  AIC.calc.2 <- nrow(data2) + nrow(data2)*log(2*pi) + nrow(data2)*log(sum(mod2$residuals^2)/nrow(data2)) + 2*(mod2$rank+1)#
  AIC.calc.3 <- nrow(data3) + nrow(data3)*log(2*pi) + nrow(data3)*log(sum(mod3$residuals^2)/nrow(data3)) + 2*(mod3$rank+1)#
  data.frame(AIC.calc.1, AIC.calc.2, AIC.calc.3)   # Same as default values above#
# Link-based analysis, coefficients from lm()#
# -------------------------------------------#
  # Default AIC calculation: wrong!#
  lm.1d <- c(AIC(mod1D), AICc(mod1D), BIC(mod1D))            # Without outlier#
  lm.2d <- c(AIC(mod2D), AICc(mod2D), BIC(mod2D))            # With outlier along Y#
  lm.3d <- c(AIC(mod3D), AICc(mod3D), BIC(mod3D))           # With outlier along X and Y#
  tab.lmd <- rbind(lm.1d, lm.2d, lm.3d)#
  dimnames(tab.lmd)[[2]] <- c("AIC","AICc","BIC")#
  tab.lmd#
  # Own code according to first paper: just checking!#
  AICd.calc.1 <- nrow(data1) + nrow(data1)*log(2*pi) + nrow(data1)*log(sum(mod1D$residuals^2)/nrow(dataD1)) + 2*(mod1D$rank+1)#
  AICd.calc.2 <- nrow(data2) + nrow(data2)*log(2*pi) + nrow(data2)*log(sum(mod2D$residuals^2)/nrow(dataD2)) + 2*(mod2D$rank+1)#
  AICd.calc.3 <- nrow(data3) + nrow(data3)*log(2*pi) + nrow(data3)*log(sum(mod3D$residuals^2)/nrow(dataD3)) + 2*(mod3D$rank+1)#
  data.frame(AICd.calc.1, AICd.calc.2, AICd.calc.3)   # Similar range as node-based values, typically a little higher#
# Node-based analysis, jackknife coefficients#
# -------------------------------------------#
  # Compare results between lm() and Jackknife coefficients: just checking!#
  get.AIC.coef(Data = data1, Coef = Reg.coef.no$Coef.lm)    # Using lm() regression coefficients, no outlier#
  get.AIC.coef(Data = data1, Coef = Reg.coef.no$Coef.jk)    # Using Jackknife regression coefficients, no outlier#
  # Assemble values#
  AIC.jk.1 <- get.AIC.coef(Data = data1, Coef = Reg.coef.no$Coef.jk)#
  AIC.jk.2 <- get.AIC.coef(Data = data2, Coef = Reg.coef.Y$Coef.jk)#
  AIC.jk.3 <- get.AIC.coef(Data = data3, Coef = Reg.coef.XY$Coef.jk)#
  tab.jk <- rbind(AIC.jk.1, AIC.jk.2, AIC.jk.3)          # Very similar values than AIC.calc, at least without outliers#
  dimnames(tab.jk)[[1]] <- c("jk.1","jk.2","jk.3")       # Thus unlikely to have big effect on model ranking for node data#
  tab.jk                                                 # though need to check especially with outliers#
# Link-based analysis, jackknife coefficients#
# -------------------------------------------#
  # Compare results between lm() and Jackknife coefficients: just checking!#
  get.AICd.coef(Data = data1, Coef = Reg.coef.no.dist$Coef.lm)    # Using lm() regression coefficients, no outlier#
  get.AICd.coef(Data = data1, Coef = Reg.coef.no.dist$Coef.jk)    # Using Jackknife regression coefficients, no outlier#
  # Assemble values#
  AICd.jk.1 <- get.AICd.coef(Data = data1, Coef = Reg.coef.no.dist$Coef.jk)#
  AICd.jk.2 <- get.AICd.coef(Data = data2, Coef = Reg.coef.Y.dist$Coef.jk)#
  AICd.jk.3 <- get.AICd.coef(Data = data3, Coef = Reg.coef.XY.dist$Coef.jk)#
  tab.jkd <- rbind(AICd.jk.1, AICd.jk.2, AICd.jk.3)          # Very similar values than AIC.calc, even with outliers!#
  dimnames(tab.jkd)[[1]] <- c("jk.1d","jk.2d","jk.3d")       # Thus unlikely to have big effect on model ranking for distance data#
  tab.jkd #
###########################################################################################
# 4. Estimates and confidence intervals for regression coefficients from model averaging ##
###########################################################################################
# Are estimates close to known correlations for x1 - x5?#
# Are relative magnitudes preserved between x1 - x5? #
# Model averaging with simulated data, node-based#
# -----------------------------------------------#
  # The new function get.avg() uses similar code as in model.avg (MuMIn) to estimated and test #
  # regression coefficients across a set of models with cumulative weight <= 0.95. #
  # The new code was necessary so that in the next step we can substitute the Jackknife values.#
  fm1 <- lm(Y ~ ., data = data1)#
  fm1.avg <- get.avg(object = subset(dredge(fm1), cumsum(weight) <= .95), adjusted=TRUE)#
  fm1.avg                                        # Print list of results, rounded to 3 digits#
  # Compare to default function from MuMIn package:#
  summary(model.avg(dredge(fm1), cumsum(weight) <= .95))#
  # Repeat for data with outlier along Y:#
  fm2 <- lm(Y ~ ., data = data2)#
  fm2.avg <- get.avg(object = subset(dredge(fm2), cumsum(weight) <= .95), adjusted=TRUE)#
  fm2.avg                                        # Print list of results, rounded to 3 digits#
  # Repeat for data with outlier along Y and X:#
  fm3 <- lm(Y ~ ., data = data3)#
  fm3.avg <- get.avg(object = subset(dredge(fm3), cumsum(weight) <= .95), adjusted=TRUE)#
  fm3.avg                                        # Print list of results, rounded to 3 digits#
  # Summary of first results (will depend on simulation run, though):#
  # Estimates and significance tests looked roughly OK for no outlier#
  # With an outlier, standard method of model averaging did not perform well at all anymore:#
  # - the correct model then was not anymore in the set#
  # - the models with heigh weights (typically, delta < 2) contained weird predictor combinations#
  # - no predictor was significant, or then one that should not be #
###############################################################################
# 5. Substitute Jackknife estimates of regression coefficients and SE        ##
############################################################################## #
  fm1.avg.jk <- get.avg.jk(object = subset(dredge(fm1), cumsum(weight) <= .95), adjusted=TRUE,#
    Data = data1, choice="AICc")#
  fm1.avg.jk  #
  fm2.avg.jk <- get.avg.jk(object = subset(dredge(fm2), cumsum(weight) <= .95), adjusted=TRUE,#
    Data = data2, choice="AICc")#
  fm2.avg.jk#
  fm3.avg.jk <- get.avg.jk(object = subset(dredge(fm3), cumsum(weight) <= .95), adjusted=TRUE,#
    Data = data3, choice="AICc")#
  fm3.avg.jk#
  # Summary of first results (will depend on simulation run, though):#
  # Estimates and significance tests looked roughly OK for no outlier, AICc values were reduce#
  # With an outlier: #
  # - jackknife completely overthrew the AICc values and thus the ranking and model weight!#
  # - Typically, all predictors were significant#
  # It may thus be a good idea to get jackknife estimates for all possible models:#
  fm1.avg.jk <- get.avg.jk(object = dredge(fm1), adjusted=TRUE,#
    Data = data1, choice="AICc")#
  fm1.avg.jk  #
  fm2.avg.jk <- get.avg.jk(object = dredge(fm2), adjusted=TRUE,#
    Data = data2, choice="AICc")#
  fm2.avg.jk  #
  fm3.avg.jk <- get.avg.jk(object = dredge(fm3), adjusted=TRUE,#
    Data = data3, choice="AICc")#
  fm3.avg.jk   #
  # Summary of first results:#
  # This seems to make it even worse!#
###########################################################################
# 6. Compare signficance testing of permutation test and model averaging ##
###########################################################################
# Type 1 error rate: significant coefficients for x4 and x5#
# Type 2 error rates (depending on effect size): non-significant coefficients for x1, x2, and x3
AIC.sim: Function to generate data frame for simulate data ##
###############################################################
  AIC.sim<-function(N=10, multicol=0.9, weights=c(0.35, 0.25, 0.15, 0,0,0.25))#
    {#
  # Define covariance matrix#
    std <- rep(1,6)#
    covmat <- matrix(multicol, 6, 6)#
    covmat[,6] <- covmat[6,] <- 0#
    diag(covmat) <- 1#
  # Simulate predictors x1-x5 and noise e, scale#
    df <- mvrnorm(N, mu = rep(0,6), Sigma = covmat)#
    df <- apply(df, 2, scale)#
    colnames(df) <- c(paste("x", c(1:5), sep=""), "e")#
  # Simulate response y#
    Y <- apply(matrix(weights, N, 6, byrow=TRUE) * df,1,sum)#
    Y <- scale(Y)#
    X<- data.frame(df[,-6])#
  # Generate node-based data file for use in the regression model#
    data.frame(Y,df[,-6])#
  }
source("DGS_AIC_Outlier_Jackknife_Functions_v3.r")     # Make sure this is the latest version!#
                                                         # File needs to be in same workspace (folder)#
  require(MASS)#
  require(MuMIn)
source('~/AIC_Project/Aspatial/Code/DGS_AIC_Outlier_Jackknife_Functions_v3.r', chdir = TRUE)     # Make sure this is the latest version!
n = 30#
  data<-AIC.sim(N=n, multicol=0.6, weights=c(0.35, 0.25, 0.15, 0,0,0.25))
source('~/AIC_Project/Aspatial/Code/DGS_AIC_Outlier_Jackknife_Functions_v3.r', chdir = TRUE)     # Make sure this is the latest version!#
                  # File needs to be in same workspace (folder)#
  require(MASS)#
  require(MuMIn)#
###############################################################
# 1. Single run: Outlier detection with Cook's distances Di  ##
###############################################################
# Generate data#
  n = 30#
  data<-AIC.sim(N=n, multicol=0.6, weights=c(0.35, 0.25, 0.15, 0,0,0.25))#
# Node-based analysis without outlier #
  data1 <- data#
  mod1 <- lm(Y ~ ., data=data1)#
  Di1 <- cooks.distance(mod1)           # Vector of Cook's distances, default method#
  Di1.jk <- get.Di.jk(data1)             # Jackknifed Cook's distances, own code#
# Distance-based analysis without outlier #
  dataD1 <- get.dmat(data1)               # Extract matrix of distance vectors#
  mod1D <- lm(Y.dist ~ ., data=dataD1)#
  Di.dist1 <- cooks.distance(mod1D)     # Vector of Cook's distances, default method: wrong! #
  Di.d1 <-get.Did.jk(data1)              # Jackknifed Cook's distances, corrected, own code#
# Introduce outlier in Y into data set (Below outlier added to 1st sample Y variable)#
# ------------------------------------ #
  data2 <- data#
  data2[1,1] <- 10 * sign(data2[1,1])      # value of 10 is an extreme outlier along Y#
                                         # Change this procedure as you wish#
  mod2 <- lm(Y ~ ., data=data2)#
  Di2 <- cooks.distance(mod2)           # Vector of Cook's distances, default method#
  Di2.jk <- get.Di.jk(data2)             # Jackknifed Cook's distances, own code#
  dataD2 <- get.dmat(data2)               # Extract matrix of distance vectors#
  mod2D <- lm(Y.dist ~ ., data=dataD2)#
  Di.dist2 <- cooks.distance(mod2D)     # Vector of Cook's distances, default method: wrong! #
  Di.d2 <-get.Did.jk(data2)              # Jackknifed Cook's distances, corrected, own code   #
# Introduce outlier in X and Y into data set (Below outlier added to 1st sample Y variable)#
# --------------------------------------------  #
  data3 <- data2#
  data3[1,-1] <- data3[1,-1] + 1 * sign(data3[1,-1])    # make first value outlier along x as well#
  mod3 <- lm(Y ~ ., data=data3)#
  Di3 <- cooks.distance(mod3)           # Vector of Cook's distances, default method#
  Di3.jk <- get.Di.jk(data3)             # Jackknifed Cook's distances, own code#
  dataD3 <- get.dmat(data3)               # Extract matrix of distance vectors#
  mod3D <- lm(Y.dist ~ ., data=dataD3)#
  Di.dist3 <- cooks.distance(mod3D)     # Vector of Cook's distances, default method: wrong! #
  Di.d3 <-get.Did.jk(data3)              # Jackknifed Cook's distances, corrected, own code   #
# Table with Di values for the first observation (Results will vary much between runs!) #
# ----------------------------------------------#
# Note: Table shows only Di values for the first observation, which is the one manipulated as outlier#
  Di.Table <- matrix(NA, 4,3, dimnames=list(c("Di_node_default","Di_node_jk","Di_dist_default","Di_dist_jk"),#
    c("No outlier","Outlier in Y","Outlier in X and Y")))#
  Di.Table[] <- c(Di1[1], Di1.jk[1], Di.dist1[1], Di.d1[1], Di2[1], Di2.jk[1], Di.dist2[1], Di.d2[1], Di3[1], Di3.jk[1], Di.dist3[1], Di.d3[1])  #
  round(Di.Table,2)#
  # Main results:#
  # - When no outlier was simulated, none of the methods results in Di > 1, no spurious outlier detection#
  # - Outliers in Y have less influence (smaller Di) than outliers in both X and Y#
  # - Outlier detection (Di > 1) varies between simulation runs#
  # - In most cases, jackknifed Di for distance data are smaller than Di for node data#
###################################################################
# 2. Single run: Jackknife estimates of regression coefficients  ##
###################################################################
# Node-based analysis#
  Reg.coef.no <- get.beta.jk(data1)         # Coefficient estimates without outlier (data)#
  Reg.coef.Y <-get.beta.jk(data2)          # Coefficient estimates with outlier along Y (data2)#
  Reg.coef.XY <-get.beta.jk(data3)         # Coefficient estimates with outlier along X and Y (data3)#
  round(Reg.coef.no,3)#
  round(Reg.coef.Y,3)#
  round(Reg.coef.XY,3)#
  # Coef.lm: Regression coefficients from default method lm()#
  # SE.lm: SE of regression coefficients from default method lm()#
  # Coef.jk: Jackknife estimates of regression coefficients, own code#
  # SE.jk: Jackknife SE of regression coefficients, own code#
  # Bias.jk: Jackknife bias estimate (Coef.jk - Coef.lm)#
# Link-based analysis#
  Reg.coef.no.dist <- get.betad.jk(data1)         # Coefficient estimates without outlier (data)#
  Reg.coef.Y.dist <-get.betad.jk(data2)          # Coefficient estimates with outlier along Y (data2)#
  Reg.coef.XY.dist <-get.betad.jk(data3)         # Coefficient estimates with outlier along X and Y (data3)#
  round(Reg.coef.no.dist,3)#
  round(Reg.coef.Y.dist,3)#
  round(Reg.coef.XY.dist,3)#
# Main results:#
# - Regression coefficients are in the same range for node- and link-based analysis#
# - Jackknife SE are in the same range for node- and link-based analysis#
# - Default SE when using distance matrices are far too small, as expected#
# - Possibly, biases are larger in presence of outliers when doing link-based analysis? #
####################################################################
# 3. Calculation of AIC for lm() and jackknife regression results ##
####################################################################
# Node-based analysis, coefficients from lm()#
# -------------------------------------------#
  # Default AIC calculation#
  lm.1 <- c(AIC(mod1), AICc(mod1), BIC(mod1))              # Without outlier#
  lm.2 <- c(AIC(mod2), AICc(mod2), BIC(mod2))              # With outlier along Y#
  lm.3 <- c(AIC(mod3), AICc(mod3), BIC(mod3))              # With outlier along X and Y#
  tab.lm <- rbind(lm.1, lm.2, lm.3)#
  dimnames(tab.lm)[[2]] <- c("AIC","AICc","BIC")#
  tab.lm#
  # Own code according to first paper: just checking!#
  AIC.calc.1 <- nrow(data1) + nrow(data1)*log(2*pi) + nrow(data1)*log(sum(mod1$residuals^2)/nrow(data1)) + 2*(mod1$rank+1)#
  AIC.calc.2 <- nrow(data2) + nrow(data2)*log(2*pi) + nrow(data2)*log(sum(mod2$residuals^2)/nrow(data2)) + 2*(mod2$rank+1)#
  AIC.calc.3 <- nrow(data3) + nrow(data3)*log(2*pi) + nrow(data3)*log(sum(mod3$residuals^2)/nrow(data3)) + 2*(mod3$rank+1)#
  data.frame(AIC.calc.1, AIC.calc.2, AIC.calc.3)   # Same as default values above#
# Link-based analysis, coefficients from lm()#
# -------------------------------------------#
  # Default AIC calculation: wrong!#
  lm.1d <- c(AIC(mod1D), AICc(mod1D), BIC(mod1D))            # Without outlier#
  lm.2d <- c(AIC(mod2D), AICc(mod2D), BIC(mod2D))            # With outlier along Y#
  lm.3d <- c(AIC(mod3D), AICc(mod3D), BIC(mod3D))           # With outlier along X and Y#
  tab.lmd <- rbind(lm.1d, lm.2d, lm.3d)#
  dimnames(tab.lmd)[[2]] <- c("AIC","AICc","BIC")#
  tab.lmd#
  # Own code according to first paper: just checking!#
  AICd.calc.1 <- nrow(data1) + nrow(data1)*log(2*pi) + nrow(data1)*log(sum(mod1D$residuals^2)/nrow(dataD1)) + 2*(mod1D$rank+1)#
  AICd.calc.2 <- nrow(data2) + nrow(data2)*log(2*pi) + nrow(data2)*log(sum(mod2D$residuals^2)/nrow(dataD2)) + 2*(mod2D$rank+1)#
  AICd.calc.3 <- nrow(data3) + nrow(data3)*log(2*pi) + nrow(data3)*log(sum(mod3D$residuals^2)/nrow(dataD3)) + 2*(mod3D$rank+1)#
  data.frame(AICd.calc.1, AICd.calc.2, AICd.calc.3)   # Similar range as node-based values, typically a little higher#
# Node-based analysis, jackknife coefficients#
# -------------------------------------------#
  # Compare results between lm() and Jackknife coefficients: just checking!#
  get.AIC.coef(Data = data1, Coef = Reg.coef.no$Coef.lm)    # Using lm() regression coefficients, no outlier#
  get.AIC.coef(Data = data1, Coef = Reg.coef.no$Coef.jk)    # Using Jackknife regression coefficients, no outlier#
  # Assemble values#
  AIC.jk.1 <- get.AIC.coef(Data = data1, Coef = Reg.coef.no$Coef.jk)#
  AIC.jk.2 <- get.AIC.coef(Data = data2, Coef = Reg.coef.Y$Coef.jk)#
  AIC.jk.3 <- get.AIC.coef(Data = data3, Coef = Reg.coef.XY$Coef.jk)#
  tab.jk <- rbind(AIC.jk.1, AIC.jk.2, AIC.jk.3)          # Very similar values than AIC.calc, at least without outliers#
  dimnames(tab.jk)[[1]] <- c("jk.1","jk.2","jk.3")       # Thus unlikely to have big effect on model ranking for node data#
  tab.jk                                                 # though need to check especially with outliers#
# Link-based analysis, jackknife coefficients#
# -------------------------------------------#
  # Compare results between lm() and Jackknife coefficients: just checking!#
  get.AICd.coef(Data = data1, Coef = Reg.coef.no.dist$Coef.lm)    # Using lm() regression coefficients, no outlier#
  get.AICd.coef(Data = data1, Coef = Reg.coef.no.dist$Coef.jk)    # Using Jackknife regression coefficients, no outlier#
  # Assemble values#
  AICd.jk.1 <- get.AICd.coef(Data = data1, Coef = Reg.coef.no.dist$Coef.jk)#
  AICd.jk.2 <- get.AICd.coef(Data = data2, Coef = Reg.coef.Y.dist$Coef.jk)#
  AICd.jk.3 <- get.AICd.coef(Data = data3, Coef = Reg.coef.XY.dist$Coef.jk)#
  tab.jkd <- rbind(AICd.jk.1, AICd.jk.2, AICd.jk.3)          # Very similar values than AIC.calc, even with outliers!#
  dimnames(tab.jkd)[[1]] <- c("jk.1d","jk.2d","jk.3d")       # Thus unlikely to have big effect on model ranking for distance data#
  tab.jkd #
###########################################################################################
# 4. Estimates and confidence intervals for regression coefficients from model averaging ##
###########################################################################################
# Are estimates close to known correlations for x1 - x5?#
# Are relative magnitudes preserved between x1 - x5? #
# Model averaging with simulated data, node-based#
# -----------------------------------------------#
  # The new function get.avg() uses similar code as in model.avg (MuMIn) to estimated and test #
  # regression coefficients across a set of models with cumulative weight <= 0.95. #
  # The new code was necessary so that in the next step we can substitute the Jackknife values.#
  fm1 <- lm(Y ~ ., data = data1)#
  fm1.avg <- get.avg(object = subset(dredge(fm1), cumsum(weight) <= .95), adjusted=TRUE)#
  fm1.avg                                        # Print list of results, rounded to 3 digits#
  # Compare to default function from MuMIn package:#
  summary(model.avg(dredge(fm1), cumsum(weight) <= .95))#
  # Repeat for data with outlier along Y:#
  fm2 <- lm(Y ~ ., data = data2)#
  fm2.avg <- get.avg(object = subset(dredge(fm2), cumsum(weight) <= .95), adjusted=TRUE)#
  fm2.avg                                        # Print list of results, rounded to 3 digits#
  # Repeat for data with outlier along Y and X:#
  fm3 <- lm(Y ~ ., data = data3)#
  fm3.avg <- get.avg(object = subset(dredge(fm3), cumsum(weight) <= .95), adjusted=TRUE)#
  fm3.avg                                        # Print list of results, rounded to 3 digits#
  # Summary of first results (will depend on simulation run, though):#
  # Estimates and significance tests looked roughly OK for no outlier#
  # With an outlier, standard method of model averaging did not perform well at all anymore:#
  # - the correct model then was not anymore in the set#
  # - the models with heigh weights (typically, delta < 2) contained weird predictor combinations#
  # - no predictor was significant, or then one that should not be #
###############################################################################
# 5. Substitute Jackknife estimates of regression coefficients and SE        ##
############################################################################## #
  fm1.avg.jk <- get.avg.jk(object = subset(dredge(fm1), cumsum(weight) <= .95), adjusted=TRUE,#
    Data = data1, choice="AICc")#
  fm1.avg.jk  #
  fm2.avg.jk <- get.avg.jk(object = subset(dredge(fm2), cumsum(weight) <= .95), adjusted=TRUE,#
    Data = data2, choice="AICc")#
  fm2.avg.jk#
  fm3.avg.jk <- get.avg.jk(object = subset(dredge(fm3), cumsum(weight) <= .95), adjusted=TRUE,#
    Data = data3, choice="AICc")#
  fm3.avg.jk#
  # Summary of first results (will depend on simulation run, though):#
  # Estimates and significance tests looked roughly OK for no outlier, AICc values were reduce#
  # With an outlier: #
  # - jackknife completely overthrew the AICc values and thus the ranking and model weight!#
  # - Typically, all predictors were significant#
  # It may thus be a good idea to get jackknife estimates for all possible models:#
  fm1.avg.jk <- get.avg.jk(object = dredge(fm1), adjusted=TRUE,#
    Data = data1, choice="AICc")#
  fm1.avg.jk  #
  fm2.avg.jk <- get.avg.jk(object = dredge(fm2), adjusted=TRUE,#
    Data = data2, choice="AICc")#
  fm2.avg.jk  #
  fm3.avg.jk <- get.avg.jk(object = dredge(fm3), adjusted=TRUE,#
    Data = data3, choice="AICc")#
  fm3.avg.jk   #
  # Summary of first results:#
  # This seems to make it even worse!#
###########################################################################
# 6. Compare signficance testing of permutation test and model averaging ##
###########################################################################
# Type 1 error rate: significant coefficients for x4 and x5#
# Type 2 error rates (depending on effect size): non-significant coefficients for x1, x2, and x3
sqrt(5)
52/27
sqrt(52/27)
com <- read.csv("~/Documents/Phylomeet/Analysis/Simulated_Hybrids/arcot_gw.csv")
com
head(com)
?read.csv
com <- read.csv("~/Documents/Phylomeet/Analysis/Simulated_Hybrids/arcot_gw.csv", rownames=1)
sqrt(3)-1
27/4
sqrt(6.75)
2.59^2
2.598^2
6.75*4/27
0.732+1
1.732^2
?read.csv
com <- read.csv("~/Documents/Phylomeet/Analysis/Simulated_Hybrids/arcot_gw.csv", row.names=1)
head(com)
summary(com)
row.names(com)
hist(com[1:10,])
col.names(com)
colnames(com)
dim(com)
com[1:10,]
hist(com[1:10,1])
hist(com[1:10,2])
par(mfrow=c(10,10))#
for(i in 1:100)#
{hist(com[1:10,i])}
par(mfrow=c(5,5))#
for(i in 1:25)#
{hist(com[1:10,i])}
head(com[1:10,1:25])
par(mfrow=c(5,5))#
for(i in 1:25)#
{hist(com[11:20,i])}
dim(com)
install.packages("RMesquite", repos="http://R-Forge.R-project.org")
setwd("~/Documents/Phylomeet/Analysis/Simulated_Hybrids")#
com <- read.csv("~/Documents/Phylomeet/Analysis/Simulated_Hybrids/arcot_gw.csv", row.names=1)
summary(com)
dim(com)
rownames(com)
crosstype <- c("Fremont","F1","Narrowleaf")
crosstype$1
crosstype[1]
c <- rep(crosstype[1],10)
c
f <- rep("Fremont",10)
f
crosstype <- c(rep("Fremont",10),rep("F1",10),rep("Narrowleaf",20))
crosstype
crosstype <- c(rep(rep("Fremont",10),rep("F1",10),rep("Narrowleaf",20)),4)
crosstype <- c(rep("Fremont",10),rep("F1",10),rep("Narrowleaf",20))
crosstype
rep(crosstype,4)
crosstype <- rep(c(rep("Fremont",10),rep("F1",10),rep("Narrowleaf",20)),4)
crosstype
length(crosstype)
com <- cbind(crosstype,com)
head(com)
crosstype[1:50,1:5]
dim(crosstype)
com[1:50,1:5]
com[1:50,1:3]
seq(2000:2003)
?seq
seq(0, 1, length.out=11)
seq(1, 9, by = 2)
seq(1, 6, by = 3)
seq(17)
year <- c(rep("2000",40),rep("2001",40),rep("2002",40),rep("2003",40))
year
com <- cbind(crosstype,year,com)
com
com[1:5,1:3]
com[1:5,1:4]
com <- read.csv("~/Documents/Phylomeet/Analysis/Simulated_Hybrids/arcot_gw.csv", row.names=1)#
#
crosstype <- rep(c(rep("Fremont",10),rep("F1",10),rep("Narrowleaf",20)),4)#
year <- c(rep("2000",40),rep("2001",40),rep("2002",40),rep("2003",40))#
com <- cbind(crosstype,year,com)
com
com[1:5,1:4]
host <- rep(c(1:10,1:10,1:20),4)
host
com <- read.csv("~/Documents/Phylomeet/Analysis/Simulated_Hybrids/arcot_gw.csv", row.names=1)#
#
crosstype <- rep(c(rep("Fremont",10),rep("F1",10),rep("Narrowleaf",20)),4)#
year <- c(rep("2000",40),rep("2001",40),rep("2002",40),rep("2003",40))#
host <- rep(c(1:10,1:10,1:20),4)#
com <- cbind(crosstype,year,host,com)
com[1:5,1:4]
setwd("~/Documents/Phylomeet/Analysis/Simulated_Hybrids")#
data <- read.csv("~/Documents/Phylomeet/Analysis/Simulated_Hybrids/arcot_gw.csv", row.names=1)#
#
crosstype <- rep(c(rep("Fremont",10),rep("F1",10),rep("Narrowleaf",20)),4)#
year <- c(rep("2000",40),rep("2001",40),rep("2002",40),rep("2003",40))#
host <- rep(c(1:10,1:10,1:20),4)#
com <- cbind(crosstype,year,host,data)
hist(com[com$crosstype == Fremont])
hist(com[com$crosstype == "Fremont"])
com$crosstype
com$year
setwd("~/Documents/Phylomeet/Analysis/Simulated_Hybrids")#
	data <- read.csv("~/Documents/Phylomeet/Analysis/Simulated_Hybrids/arcot_gw.csv", row.names=1)#
	type <- rep(c(rep("Fremont",10),rep("F1",10),rep("Narrowleaf",20)),4)#
	year <- c(rep("2000",40),rep("2001",40),rep("2002",40),rep("2003",40))#
	host <- rep(c(1:10,1:10,1:20),4)#
	com <- cbind(type,year,host,data)
com$type==Fremont
com$type=="Fremont"
hist(com[com$type == "Fremont",])
com$type=="Fremont"
com[com$type == "Fremont",]
hist(com[com$type == "Fremont",1])
com[com$type == "Fremont",1]
head(com[com$type == "Fremont",])
dim(com)
com[com$type == "Fremont",4:86]
com[com$type == "Fremont",4]
hist(com[com$type == "Fremont",4])
par(mfrow=c(4,4))
par(mfrow=c(4,4))#
	for(i in 1:16)#
	{hist(com[com$type == "Fremont",3+i])#
	}
dev.new()#
	par(mfrow=c(4,4))#
	for(i in 1:16) { hist(com[com$type == "Fremont",3+i]) }#
#
	dev.new()#
	par(mfrow=c(4,4))#
	for(i in 1:16) { hist(com[com$type == "Fremont",19+i]) }
ncol(com)
86-3
83/16
83/9
83/25
83/20
83/24
for(j in 0:5)#
	{#
		dev.new()#
		par(mfrow=c(4,4))#
		for(i in 1:16) { hist(com[com$type == "Fremont",j*16+3+i]) }#
	}
for(j in 0:4)#
	{#
		dev.new()#
		par(mfrow=c(4,4))#
		for(i in 1:16) { hist(com[com$type == "Fremont",j*16+3+i]) }#
		dev.new()#
		par(mfrow=c(4,4))#
		hist(com[com$type == "Fremont",84])#
		hist(com[com$type == "Fremont",85])#
		hist(com[com$type == "Fremont",86])#
	}
for(j in 0:4)#
	{#
		dev.new()#
		par(mfrow=c(4,4))#
		for(i in 1:16) { hist(com[com$type == "Fremont",j*16+3+i]) }#
	}#
		dev.new()#
		par(mfrow=c(4,4))#
		hist(com[com$type == "Fremont",84])#
		hist(com[com$type == "Fremont",85])#
		hist(com[com$type == "Fremont",86])
